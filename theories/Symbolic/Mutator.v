(******************************************************************************)
(* Copyright (c) 2020 Dominique Devriese, Georgy Lukyanov,                    *)
(*   Sander Huyghebaert, Steven Keuchel                                       *)
(* All rights reserved.                                                       *)
(*                                                                            *)
(* Redistribution and use in source and binary forms, with or without         *)
(* modification, are permitted provided that the following conditions are     *)
(* met:                                                                       *)
(*                                                                            *)
(* 1. Redistributions of source code must retain the above copyright notice,  *)
(*    this list of conditions and the following disclaimer.                   *)
(*                                                                            *)
(* 2. Redistributions in binary form must reproduce the above copyright       *)
(*    notice, this list of conditions and the following disclaimer in the     *)
(*    documentation and/or other materials provided with the distribution.    *)
(*                                                                            *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  *)
(* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR *)
(* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR          *)
(* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,      *)
(* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *)
(* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *)
(* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *)
(* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *)
(* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *)
(* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               *)
(******************************************************************************)

From Coq Require Import
     Arith.PeanoNat
     Bool.Bool
     Classes.Morphisms
     Classes.Morphisms_Prop
     Classes.Morphisms_Relations
     Classes.RelationClasses
     Relations.Relation_Definitions
     Lists.List
     Program.Tactics
     Strings.String
     ZArith.BinInt.
From Coq Require
     Classes.CRelationClasses.
From Equations Require Import
     Equations.
From Katamaran Require Import
     Prelude
     Symbolic.Propositions
     Symbolic.Worlds
     Syntax.ContractDecl
     Specification
     Base.

From stdpp Require
     base.

Import ctx.notations.
Import env.notations.
Import ListNotations.

Set Implicit Arguments.

Module Type MutatorsOn
  (Import B : Base)
  (Import SPEC : Specification B)
  (Import SOLV : SolverKit B SPEC).

  Import Entailment.
  Import ModalNotations.
  Local Open Scope modal.

  Section DebugInfo.

    Record DebugCall (Œ£ : LCtx) : Type :=
      MkDebugCall
        { debug_call_function_parameters    : PCtx;
          debug_call_function_result_type   : Ty;
          debug_call_function_name          : ùë≠ debug_call_function_parameters debug_call_function_result_type;
          debug_call_function_contract      : SepContract debug_call_function_parameters debug_call_function_result_type;
          debug_call_function_arguments     : SStore debug_call_function_parameters Œ£;
          debug_call_program_context        : PCtx;
          debug_call_pathcondition          : PathCondition Œ£;
          debug_call_localstore             : SStore debug_call_program_context Œ£;
          debug_call_heap                   : SHeap Œ£;
        }.

    Record DebugStm (Œ£ : LCtx) : Type :=
      MkDebugStm
        { debug_stm_program_context        : PCtx;
          debug_stm_statement_type         : Ty;
          debug_stm_statement              : Stm debug_stm_program_context debug_stm_statement_type;
          debug_stm_pathcondition          : PathCondition Œ£;
          debug_stm_localstore             : SStore debug_stm_program_context Œ£;
          debug_stm_heap                   : SHeap Œ£;
        }.

    Record DebugAsn (Œ£ : LCtx) : Type :=
      MkDebugAsn
        { debug_asn_program_context        : PCtx;
          debug_asn_pathcondition          : PathCondition Œ£;
          debug_asn_localstore             : SStore debug_asn_program_context Œ£;
          debug_asn_heap                   : SHeap Œ£;
        }.

    Record DebugConsumeChunk (Œ£ : LCtx) : Type :=
      MkDebugConsumeChunk
        { debug_consume_chunk_program_context        : PCtx;
          debug_consume_chunk_pathcondition          : PathCondition Œ£;
          debug_consume_chunk_localstore             : SStore debug_consume_chunk_program_context Œ£;
          debug_consume_chunk_heap                   : SHeap Œ£;
          debug_consume_chunk_chunk                  : Chunk Œ£;
        }.

    Global Instance SubstDebugCall : Subst DebugCall :=
      fun Œ£0 d Œ£1 Œ∂01 =>
        match d with
        | MkDebugCall f c ts pc Œ¥ h =>
          MkDebugCall f c (subst ts Œ∂01) (subst pc Œ∂01) (subst Œ¥ Œ∂01) (subst h Œ∂01)
        end.

    Import option.notations.
    Global Instance OccursCheckDebugCall : OccursCheck DebugCall :=
      fun Œ£ x xIn d =>
        match d with
        | MkDebugCall f c ts pc Œ¥ h =>
            ts' <- occurs_check xIn ts ;;
            pc' <- occurs_check xIn pc ;;
            Œ¥'  <- occurs_check xIn Œ¥ ;;
            h'  <- occurs_check xIn h ;;
            Some (MkDebugCall f c ts' pc' Œ¥' h')
        end.

    Global Instance SubstDebugStm : Subst DebugStm :=
      fun Œ£0 d Œ£1 Œ∂01 =>
        match d with
        | MkDebugStm s pc Œ¥ h =>
          MkDebugStm s (subst pc Œ∂01) (subst Œ¥ Œ∂01) (subst h Œ∂01)
        end.

    Global Instance OccursCheckDebugStm : OccursCheck DebugStm :=
      fun Œ£ x xIn d =>
        match d with
        | MkDebugStm s pc Œ¥ h =>
            pc' <- occurs_check xIn pc ;;
            Œ¥'  <- occurs_check xIn Œ¥ ;;
            h'  <- occurs_check xIn h ;;
            Some (MkDebugStm s pc' Œ¥' h')
        end.

    Global Instance SubstDebugAsn : Subst DebugAsn :=
      fun Œ£0 d Œ£1 Œ∂01 =>
        match d with
        | MkDebugAsn pc Œ¥ h =>
          MkDebugAsn (subst pc Œ∂01) (subst Œ¥ Œ∂01) (subst h Œ∂01)
        end.

    Global Instance OccursCheckDebugAsn : OccursCheck DebugAsn :=
      fun Œ£ x xIn d =>
        match d with
        | MkDebugAsn pc Œ¥ h =>
            pc' <- occurs_check xIn pc ;;
            Œ¥'  <- occurs_check xIn Œ¥ ;;
            h'  <- occurs_check xIn h ;;
            Some (MkDebugAsn pc' Œ¥' h')
        end.

    Global Instance SubstDebugConsumeChunk : Subst DebugConsumeChunk :=
      fun Œ£0 d Œ£1 Œ∂01 =>
        match d with
        | MkDebugConsumeChunk pc Œ¥ h c =>
          MkDebugConsumeChunk (subst pc Œ∂01) (subst Œ¥ Œ∂01) (subst h Œ∂01) (subst c Œ∂01)
        end.

    Global Instance OccursCheckDebugConsumeChunk : OccursCheck DebugConsumeChunk :=
      fun Œ£ x xIn d =>
        match d with
        | MkDebugConsumeChunk pc Œ¥ h c =>
            pc' <- occurs_check xIn pc ;;
            Œ¥'  <- occurs_check xIn Œ¥ ;;
            h'  <- occurs_check xIn h ;;
            c'  <- occurs_check xIn c ;;
            Some (MkDebugConsumeChunk pc' Œ¥' h'  c')
        end.

  End DebugInfo.

  Module WorldInstance.

    Record WInstance (w : World) : Set :=
      MkWInstance
        { Œπassign :> Valuation w;
          Œπvalid  : instpc (wco w) Œπassign;
        }.

    Program Definition winstance_formula {w} (Œπ : WInstance w) (fml : Formula w) (p : inst (A := Prop) fml Œπ) :
      WInstance (wformula w fml) :=
      {| Œπassign := Œπ; |}.
    Next Obligation.
    Proof.
      intros. cbn.
      apply inst_pathcondition_cons. split; auto.
      apply Œπvalid.
    Qed.

    Program Definition winstance_snoc {w} (Œπ : WInstance w) {b : ùë∫ ‚à∑ Ty} (v : Val (type b)) :
      WInstance (wsnoc w b) :=
      {| Œπassign := env.snoc (Œπassign Œπ) b v; |}.
    Next Obligation.
    Proof.
      intros. unfold wsnoc. cbn [wctx wco].
      rewrite inst_subst, inst_sub_wk1.
      apply Œπvalid.
    Qed.

    (* Fixpoint winstance_cat {Œ£} (Œπ : WInstance Œ£) {Œî} (ŒπŒî : Valuation Œî) : *)
    (*   WInstance (wcat Œ£ Œî). *)
    (* Proof. *)
    (*   destruct ŒπŒî; cbn. *)
    (*   - apply Œπ. *)
    (*   - apply winstance_snoc. *)
    (*     apply winstance_cat. *)
    (*     apply Œπ. *)
    (*     apply ŒπŒî. *)
    (*     apply db. *)
    (* Defined. *)

    Program Definition winstance_subst {w} (Œπ : WInstance w) {x œÉ} {xIn : x‚à∑œÉ ‚àà w}
      (t : Term (w - x‚à∑œÉ) œÉ) (p : inst t (env.remove (x‚à∑œÉ) (Œπassign Œπ) xIn) = env.lookup (Œπassign Œπ) xIn) :
      WInstance (wsubst w x t) :=
      @MkWInstance (wsubst w x t) (env.remove _ (Œπassign Œπ) xIn) _.
    Next Obligation.
      intros * p. cbn. rewrite inst_subst, <- inst_sub_shift in *.
      rewrite inst_sub_single_shift; auto using Œπvalid.
    Qed.

    Program Definition instacc {w0 w1} (œâ01 : w0 ‚äí w1) : WInstance w1 -> WInstance w0 :=
      match œâ01 in (_ ‚äí w) return (WInstance w -> WInstance w0) with
      | acc_refl            => fun Œπ => Œπ
      | @acc_sub _ w1 Œ∂ ent => fun Œπ1 => {| Œπassign := inst Œ∂ Œπ1; |}
      end.
    Next Obligation.
    Proof.
      intros. specialize (ent Œπ1).
      rewrite <- inst_subst.
      apply ent.
      apply Œπvalid.
    Qed.

  End WorldInstance.

  Definition PROP : TYPE :=
    fun _ => Prop.

  Import SymProp.
  Import Postprocessing.

  Section VerificationConditions.

    Inductive VerificationCondition (p : ùïä ctx.nil) : Prop :=
    | vc (P : safe p env.nil).

    Global Instance proper_vc : Proper (sequiv ctx.nil ==> iff) VerificationCondition.
    Proof. intros p q pq. split; intros []; constructor; now apply pq. Qed.

  End VerificationConditions.

  Definition SDijkstra (A : TYPE) : TYPE :=
    ‚ñ°(A -> ùïä) -> ùïä.

  Module SDijk.

    Definition pure {A : TYPE} :
      ‚ä¢ A -> SDijkstra A :=
      fun w0 a POST => T POST a.

    Definition map {A B} :
      ‚ä¢ ‚ñ°(A -> B) -> SDijkstra A -> SDijkstra B :=
      fun w0 f m POST => m (comp <$> POST <*> f).

    Definition bind {A B} :
      ‚ä¢ SDijkstra A -> ‚ñ°(A -> SDijkstra B) -> SDijkstra B :=
      fun w0 m f POST => m (fun w1 œâ01 a1 => f w1 œâ01 a1 (four POST œâ01)).

    Definition angelic (x : option ùë∫) œÉ :
      ‚ä¢ SDijkstra (STerm œÉ) :=
      fun w k =>
        let y := fresh w x in
        angelicv
          (y‚à∑œÉ) (k (wsnoc w (y‚à∑œÉ)) acc_snoc_right (@term_var _ y œÉ ctx.in_zero)).
    Global Arguments angelic x œÉ [w] k.

    Definition angelic_ctx {N : Set} (n : N -> ùë∫) :
      ‚ä¢ ‚àÄ Œî : NCtx N Ty, SDijkstra (fun w => NamedEnv (Term w) Œî) :=
      fix rec {w} Œî {struct Œî} :=
        match Œî with
        | []      => fun k => T k env.nil
        | Œî ‚ñª x‚à∑œÉ =>
          fun k =>
            angelic (Some (n x)) œÉ (fun w1 œâ01 t =>
              rec Œî (fun w2 œâ12 EŒî =>
                k w2 (acc_trans œâ01 œâ12) (EŒî ‚ñ∫ (x‚à∑œÉ ‚Ü¶ persist__term t œâ12))))
        end%ctx.
    Global Arguments angelic_ctx {N} n [w] Œî : rename.

    Definition demonic (x : option ùë∫) œÉ :
      ‚ä¢ SDijkstra (STerm œÉ) :=
      fun w k =>
        let y := fresh w x in
        demonicv
          (y‚à∑œÉ) (k (wsnoc w (y‚à∑œÉ)) acc_snoc_right (@term_var _ y œÉ ctx.in_zero)).
    Global Arguments demonic x œÉ [w] k.

    Definition demonic_ctx {N : Set} (n : N -> ùë∫) :
      ‚ä¢ ‚àÄ Œî : NCtx N Ty, SDijkstra (fun w => NamedEnv (Term w) Œî) :=
      fix demonic_ctx {w} Œî {struct Œî} :=
        match Œî with
        | []      => fun k => T k env.nil
        | Œî ‚ñª x‚à∑œÉ =>
          fun k =>
            demonic (Some (n x)) œÉ (fun w1 œâ01 t =>
              demonic_ctx Œî (fun w2 œâ12 EŒî =>
                k w2 (acc_trans œâ01 œâ12) (EŒî ‚ñ∫ (x‚à∑œÉ ‚Ü¶ persist__term t œâ12))))
        end%ctx.
    Global Arguments demonic_ctx {_} n [w] Œî : rename.

    Definition assume_formulas :
      ‚ä¢ List Formula -> SDijkstra Unit :=
      fun w0 fmls0 POST =>
        match solver fmls0 with
        | Some (existT w1 (ŒΩ , fmls1)) =>
          (* Assume variable equalities and the residual constraints *)
          assume_triangular ŒΩ
            (assume_formulas_without_solver fmls1
               (* Run POST in the world with the variable and residual
                  formulas included. This is a critical piece of code since
                  this is the place where we really meaningfully change the
                  world. We changed the type of assume_formulas_without_solver
                  just to not forget adding the formulas to the path constraints.
               *)
               (four POST (acc_triangular ŒΩ) (acc_formulas_right w1 fmls1) tt))
        | None =>
          (* The formulas are inconsistent with the path constraints. *)
          block
        end.

    Definition assume_formula :
      ‚ä¢ Formula -> SDijkstra Unit :=
      fun w0 fml0 =>
        assume_formulas (cons fml0 nil).

    Definition assert_formulas :
      ‚ä¢ Message -> List Formula -> SDijkstra Unit :=
      fun w0 msg fmls0 POST =>
        match solver fmls0 with
        | Some (existT w1 (ŒΩ , fmls1)) =>
          (* Assert variable equalities and the residual constraints *)
          assert_triangular msg ŒΩ
            (fun msg' =>
               assert_formulas_without_solver msg' fmls1
                 (* Critical code. Like for assume_formulas. *)
                 (four POST (acc_triangular ŒΩ) (acc_formulas_right w1 fmls1) tt))
        | None =>
          (* The formulas are inconsistent with the path constraints. *)
          error (EMsgHere msg)
        end.

    Definition assert_formula :
      ‚ä¢ Message -> Formula -> SDijkstra Unit :=
      fun w0 msg fml0 =>
        assert_formulas msg (cons fml0 nil).

    Definition angelic_binary {A} :
      ‚ä¢ SDijkstra A -> SDijkstra A -> SDijkstra A :=
      fun w m1 m2 POST =>
        angelic_binary (m1 POST) (m2 POST).
    Definition demonic_binary {A} :
      ‚ä¢ SDijkstra A -> SDijkstra A -> SDijkstra A :=
      fun w m1 m2 POST =>
        demonic_binary (m1 POST) (m2 POST).

    Definition angelic_list {M} {subM : Subst M} {occM : OccursCheck M} {A} :
      ‚ä¢ M -> List A -> SDijkstra A :=
      fun w msg =>
        fix rec xs :=
        match xs with
        | nil        => fun POST => error (EMsgHere msg)
        | cons x xs  => angelic_binary (pure x) (rec xs)
        end.

    Definition demonic_list {A} :
      ‚ä¢ List A -> SDijkstra A :=
      fun w =>
        fix rec xs :=
        match xs with
        | nil        => fun POST => block
        | cons x xs  => demonic_binary (pure x) (rec xs)
        end.

    Definition angelic_finite F `{finite.Finite F} :
      ‚ä¢ Message -> SDijkstra ‚åúF‚åù :=
      fun w msg => angelic_list msg (finite.enum F).

    Definition demonic_finite F `{finite.Finite F} :
      ‚ä¢ SDijkstra ‚åúF‚åù :=
      fun w => demonic_list (finite.enum F).

    Definition angelic_match_bool' :
      ‚ä¢ Message -> STerm ty_bool -> SDijkstra ‚åúbool‚åù :=
      fun _ msg t =>
        angelic_binary
          (fun POST => assert_formula msg (formula_bool t) (fun w1 œâ01 _ => POST w1 œâ01 true))
          (fun POST => assert_formula msg (formula_bool (term_not t)) (fun w1 œâ01 _ => POST w1 œâ01 false)).

    Definition angelic_match_bool :
      ‚ä¢ Message -> STerm ty_bool -> SDijkstra ‚åúbool‚åù :=
      fun w msg t =>
        let t' := peval t in
        match term_get_val t' with
        | Some l => pure  l
        | None   => angelic_match_bool' msg t'
        end.

    Definition demonic_match_bool' :
      ‚ä¢ STerm ty_bool -> SDijkstra ‚åúbool‚åù :=
      fun _ t =>
        demonic_binary
          (fun POST => assume_formula (formula_bool t) (fun w1 œâ01 _ => POST w1 œâ01 true))
          (fun POST => assume_formula (formula_bool (term_not t)) (fun w1 œâ01 _ => POST w1 œâ01 false)).

    Definition demonic_match_bool :
      ‚ä¢ STerm ty_bool -> SDijkstra ‚åúbool‚åù :=
      fun w t =>
        let t' := peval t in
        match term_get_val t' with
        | Some l => pure  l
        | None   => demonic_match_bool' t'
        end.


    (* Definition angelic_match_enum {AT E} : *)
    (*   ‚ä¢ Message -> STerm (ty_enum E) -> (‚åúVal (ty_enum E)‚åù -> ‚ñ°(ùïä AT)) -> ùïä AT := *)
    (*   fun w msg t k => *)
    (*     match term_get_val t with *)
    (*     | Some v => T (k v) *)
    (*     | None => angelic_finite *)
    (*                 msg (fun v => assert_formulak msg (formula_eq t (term_enum E v)) (k v)) *)
    (*     end. *)

    (* Definition demonic_match_enum {AT E} : *)
    (*   ‚ä¢ STerm (ty_enum E) -> (‚åúVal (ty_enum E)‚åù -> ‚ñ°(ùïä AT)) -> ùïä AT := *)
    (*   fun w t k => *)
    (*     match term_get_val t with *)
    (*     | Some v => T (k v) *)
    (*     | None => demonic_finite *)
    (*                 (fun v => assume_formulak (formula_eq t (term_enum E v)) (k v)) *)
    (*     end. *)

    (* Definition angelic_match_list {AT} (x y : ùë∫) (œÉ : Ty) : *)
    (*   ‚ä¢ Message -> STerm (ty_list œÉ) -> ‚ñ°(ùïä AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 msg t knil kcons => *)
    (*     angelic_binary (assert_formulak msg (formula_eq (term_val (ty_list œÉ) []) t) knil) *)
    (*       (angelic x œÉ *)
    (*          (fun w1 œâ01 (th : Term w1 œÉ) => *)
    (*           angelic y (ty_list œÉ) *)
    (*             (fun w2 œâ12 (tt : Term w2 (ty_list œÉ)) => *)
    (*              assert_formulak (subst msg (wtrans œâ01 œâ12)) *)
    (*                (formula_eq (term_binop binop_cons (subst th œâ12) tt) (subst t (wtrans œâ01 œâ12))) *)
    (*                (fun w3 œâ23 => *)
    (*                 four kcons (wtrans œâ01 œâ12) œâ23 (subst th (wtrans œâ12 œâ23)) (subst tt œâ23))))). *)

    (* Definition demonic_match_list {AT} (x y : ùë∫) (œÉ : Ty) : *)
    (*   ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(ùïä AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 t knil kcons => *)
    (*     demonic_binary (assume_formulak (formula_eq (term_val (ty_list œÉ) []) t) knil) *)
    (*       (demonic x œÉ *)
    (*          (fun w1 œâ01 (th : Term w1 œÉ) => *)
    (*           demonic y (ty_list œÉ) *)
    (*             (fun w2 œâ12 (tt : Term w2 (ty_list œÉ)) => *)
    (*              assume_formulak *)
    (*                (formula_eq (term_binop binop_cons (subst th œâ12) tt) (subst t (wtrans œâ01 œâ12))) *)
    (*                (fun w3 œâ23 => *)
    (*                 four kcons (wtrans œâ01 œâ12) œâ23 (subst th (wtrans œâ12 œâ23)) (subst tt œâ23))))). *)

    Definition angelic_match_sum {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ Message -> STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SDijkstra A) -> ‚ñ°(STerm œÑ -> SDijkstra A) -> SDijkstra A.
    Proof.
      intros w0 msg t kinl kinr.
      apply angelic_binary.
      - eapply bind.
        apply (angelic (Some x) œÉ).
        intros w1 œâ01 t1.
        eapply bind.
        apply assert_formula. apply (persist (A := Message) msg œâ01).
        apply (formula_eq (term_inl t1) (persist__term t œâ01)).
        intros w2 œâ12 _.
        apply (four kinl œâ01). auto.
        apply (persist__term t1 œâ12).
      - eapply bind.
        apply (angelic (Some y) œÑ).
        intros w1 œâ01 t1.
        eapply bind.
        apply assert_formula. apply (persist (A := Message) msg œâ01).
        apply (formula_eq (term_inr t1) (persist__term t œâ01)).
        intros w2 œâ12 _.
        apply (four kinr œâ01). auto.
        apply (persist__term t1 œâ12).
    Defined.

    (* Definition angelic_match_sum {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) : *)
    (*   ‚ä¢ Message -> STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SDijkstra A) -> ‚ñ°(STerm œÑ -> SDijkstra A) -> SDijkstra A. *)
    (* Proof. *)
    (*   intros w0. *)
    (*   fun w0 msg t kinl kinr => *)
    (*     match term_get_sum t with *)
    (*     | Some (inl tœÉ) => T kinl tœÉ *)
    (*     | Some (inr tœÑ) => T kinr tœÑ *)
    (*     | None => angelic_match_sum' x y msg t kinl kinr *)
    (*     end. *)

    Definition demonic_match_sum' {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SDijkstra A) -> ‚ñ°(STerm œÑ -> SDijkstra A) -> SDijkstra A.
    Proof.
      intros w0 t kinl kinr.
      apply demonic_binary.
      - eapply bind.
        apply (demonic (Some x) œÉ).
        intros w1 œâ01 t1.
        eapply bind.
        apply assume_formula.
        apply (formula_eq (term_inl t1) (persist__term t œâ01)).
        intros w2 œâ12 _.
        apply (four kinl œâ01). auto.
        apply (persist__term t1 œâ12).
      - eapply bind.
        apply (demonic (Some y) œÑ).
        intros w1 œâ01 t1.
        eapply bind.
        apply assume_formula.
        apply (formula_eq (term_inr t1) (persist__term t œâ01)).
        intros w2 œâ12 _.
        apply (four kinr œâ01). auto.
        apply (persist__term t1 œâ12).
    Defined.

    Definition demonic_match_sum {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SDijkstra A) -> ‚ñ°(STerm œÑ -> SDijkstra A) -> SDijkstra A :=
      fun w0 t kinl kinr =>
        match term_get_sum t with
        | Some (inl tœÉ) => T kinl tœÉ
        | Some (inr tœÑ) => T kinr tœÑ
        | None => demonic_match_sum' x y t kinl kinr
        end.

    Definition angelic_match_prod {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ Message -> STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SDijkstra A) -> SDijkstra A.
    Proof.
      intros w0 msg t k.
      eapply bind.
      apply (angelic (Some x) œÉ).
      intros w1 œâ01 t1.
      eapply bind.
      apply (angelic (Some y) œÑ).
      intros w2 œâ12 t2.
      eapply bind.
      apply assert_formula. apply (persist (A := Message) msg (acc_trans œâ01 œâ12)).
      refine (formula_eq _ (persist__term t (acc_trans œâ01 œâ12))).
      eapply (term_binop binop_pair).
      apply (persist__term t1 œâ12).
      apply t2.
      intros w3 œâ23 _.
      apply (four k (acc_trans œâ01 œâ12)).
      auto.
      apply (persist__term t1 (acc_trans œâ12 œâ23)).
      apply (persist__term t2 œâ23).
    Defined.

    (* Definition angelic_match_prod {AT} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) : *)
    (*   ‚ä¢ Message -> STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 msg t k => *)
    (*     match term_get_pair t with *)
    (*     | Some (tœÉ,tœÑ) => T k tœÉ tœÑ *)
    (*     | None => angelic_match_prod' x y msg t k *)
    (*     end. *)

    Definition demonic_match_prod {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SDijkstra A) -> SDijkstra A.
    Proof.
      intros w0 t k.
      eapply bind.
      apply (demonic (Some x) œÉ).
      intros w1 œâ01 t1.
      eapply bind.
      apply (demonic (Some y) œÑ).
      intros w2 œâ12 t2.
      eapply bind.
      apply assume_formula.
      refine (formula_eq _ (persist__term t (acc_trans œâ01 œâ12))).
      eapply (term_binop binop_pair).
      apply (persist__term t1 œâ12).
      apply t2.
      intros w3 œâ23 _.
      apply (four k (acc_trans œâ01 œâ12)).
      auto.
      apply (persist__term t1 (acc_trans œâ12 œâ23)).
      apply (persist__term t2 œâ23).
    Defined.

    (* Definition demonic_match_prod {AT} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) : *)
    (*   ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 t k => *)
    (*     match term_get_pair t with *)
    (*     | Some (tœÉ,tœÑ) => T k tœÉ tœÑ *)
    (*     | None => demonic_match_prod' x y t k *)
    (*     end. *)

    (* Definition angelic_match_record' {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) : *)
    (*   ‚ä¢ Message -> STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 msg t k. *)
    (*   apply (angelic_freshen_ctx n Œî). *)
    (*   intros w1 œâ01 ts. *)
    (*   apply assert_formulak. *)
    (*   apply (subst msg œâ01). *)
    (*   apply (formula_eq (subst t œâ01)). *)
    (*   apply (term_record R (record_pattern_match_env_reverse p ts)). *)
    (*   intros w2 œâ12. *)
    (*   apply (k w2 (acc_trans œâ01 œâ12) (subst ts œâ12)). *)
    (* Defined. *)

    (* Definition angelic_match_record {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) : *)
    (*   ‚ä¢ Message -> STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 msg t k. *)
    (*   destruct (term_get_record t). *)
    (*   - apply (T k). *)
    (*     apply (record_pattern_match_env p n0). *)
    (*   - apply (angelic_match_record' n p msg t k). *)
    (* Defined. *)

    (* Definition demonic_match_record' {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) : *)
    (*   ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 t k. *)
    (*   apply (demonic_ctx n Œî). *)
    (*   intros w1 œâ01 ts. *)
    (*   apply assume_formulak. *)
    (*   apply (formula_eq (subst t œâ01)). *)
    (*   apply (term_record R (record_pattern_match_env_reverse p ts)). *)
    (*   intros w2 œâ12. *)
    (*   apply (k w2 (acc_trans œâ01 œâ12) (subst ts œâ12)). *)
    (* Defined. *)

    (* Definition demonic_match_record {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) : *)
    (*   ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 t k. *)
    (*   destruct (term_get_record t). *)
    (*   - apply (T k). *)
    (*     apply (record_pattern_match_env p n0). *)
    (*   - apply (demonic_match_record' n p t k). *)
    (* Defined. *)

    (* Definition angelic_match_tuple' {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) : *)
    (*   ‚ä¢ Message -> STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 msg t k. *)
    (*   apply (angelic_freshen_ctx n Œî). *)
    (*   intros w1 œâ01 ts. *)
    (*   apply assert_formulak. *)
    (*   apply (subst msg œâ01). *)
    (*   apply (formula_eq (subst t œâ01)). *)
    (*   apply (term_tuple (tuple_pattern_match_env_reverse p ts)). *)
    (*   intros w2 œâ12. *)
    (*   apply (k w2 (acc_trans œâ01 œâ12) (subst ts œâ12)). *)
    (* Defined. *)

    (* Definition angelic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) : *)
    (*   ‚ä¢ Message -> STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 msg t k. *)
    (*   destruct (term_get_tuple t). *)
    (*   - apply (T k). *)
    (*     apply (tuple_pattern_match_env p e). *)
    (*   - apply (angelic_match_tuple' n p msg t k). *)
    (* Defined. *)

    (* Definition demonic_match_tuple' {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) : *)
    (*   ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 t k. *)
    (*   apply (demonic_ctx n Œî). *)
    (*   intros w1 œâ01 ts. *)
    (*   apply assume_formulak. *)
    (*   apply (formula_eq (subst t œâ01)). *)
    (*   apply (term_tuple (tuple_pattern_match_env_reverse p ts)). *)
    (*   intros w2 œâ12. *)
    (*   apply (k w2 (acc_trans œâ01 œâ12) (subst ts œâ12)). *)
    (* Defined. *)

    (* Definition demonic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) : *)
    (*   ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 t k. *)
    (*   destruct (term_get_tuple t). *)
    (*   - apply (T k). *)
    (*     apply (tuple_pattern_match_env p e). *)
    (*   - apply (demonic_match_tuple' n p t k). *)
    (* Defined. *)

    (* (* TODO: move to Syntax *) *)
    (* Definition pattern_match_env_reverse {N : Set} {Œ£ : LCtx} {œÉ : Ty} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) : *)
    (*   NamedEnv (Term Œ£) Œî -> Term Œ£ œÉ := *)
    (*   match p with *)
    (*   | pat_var x    => fun Ex => match snocView Ex with isSnoc _ t => t end *)
    (*   | pat_unit     => fun _ => term_val ty_unit tt *)
    (*   | pat_pair x y => fun Exy => match snocView Exy with *)
    (*                                  isSnoc Ex ty => *)
    (*                                  match snocView Ex with *)
    (*                                    isSnoc _ tx => term_binop binop_pair tx ty *)
    (*                                  end *)
    (*                                end *)
    (*   | pat_tuple p  => fun EŒî => term_tuple (tuple_pattern_match_env_reverse p EŒî) *)
    (*   | pat_record p => fun EŒî => term_record _ (record_pattern_match_env_reverse p EŒî) *)
    (*   end. *)

    (* Definition angelic_match_pattern {N : Set} (n : N -> ùë∫) {AT œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) : *)
    (*   ‚ä¢ Message -> STerm œÉ -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 msg t k => *)
    (*     angelic_freshen_ctx n Œî *)
    (*       (fun w1 œâ01 (ts : (fun Œ£ : LCtx => NamedEnv (Term Œ£) Œî) w1) => *)
    (*        assert_formulak (subst msg œâ01) (formula_eq (subst t œâ01) (pattern_match_env_reverse p ts)) *)
    (*          (fun w2 œâ12 => k w2 (acc_trans œâ01 œâ12) (subst ts œâ12))). *)

    (* Definition demonic_match_pattern {N : Set} (n : N -> ùë∫) {AT œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) : *)
    (*   ‚ä¢ STerm œÉ -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 t k => *)
    (*     demonic_ctx n Œî *)
    (*       (fun w1 œâ01 (ts : (fun Œ£ : LCtx => NamedEnv (Term Œ£) Œî) w1) => *)
    (*        assume_formulak (formula_eq (subst t œâ01) (pattern_match_env_reverse p ts)) *)
    (*          (fun w2 œâ12 => k w2 (acc_trans œâ01 œâ12) (subst ts œâ12))). *)

    (* Definition angelic_match_union' {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty} *)
    (*   (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) : *)
    (*   ‚ä¢ Message -> STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> ùïä AT)) -> ùïä AT := *)
    (*   fun w0 msg t k => *)
    (*     angelic_finite msg *)
    (*       (fun K : ùëºùë≤ U => *)
    (*        angelic None (ùëºùë≤_Ty K) *)
    (*          (fun w1 œâ01 (t__field : Term w1 (ùëºùë≤_Ty K)) => *)
    (*           assert_formulak (subst msg œâ01) (formula_eq (term_union U K t__field) (subst t œâ01)) *)
    (*             (fun w2 œâ12 => *)
    (*              let œâ02 := wtrans œâ01 œâ12 in *)
    (*              angelic_match_pattern n (p K) (subst msg œâ02) (subst t__field œâ12) (four (k K) œâ02)))). *)

    (* Definition angelic_match_union {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty} *)
    (*   (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) : *)
    (*   ‚ä¢ Message -> STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> ùïä AT)) -> ùïä AT := *)
    (*   fun w0 msg t k => *)
    (*     match term_get_union t with *)
    (*     | Some (existT K t__field) => angelic_match_pattern n (p K) msg t__field (k K) *)
    (*     | None => angelic_match_union' n p msg t k *)
    (*     end. *)

    (* Definition demonic_match_union' {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty} *)
    (*   (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) : *)
    (*   ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> ùïä AT)) -> ùïä AT := *)
    (*   fun w0 t k => *)
    (*     demonic_finite *)
    (*       (fun K : ùëºùë≤ U => *)
    (*        demonic None (ùëºùë≤_Ty K) *)
    (*          (fun w1 œâ01 (t__field : Term w1 (ùëºùë≤_Ty K)) => *)
    (*           assume_formulak (formula_eq (term_union U K t__field) (subst t œâ01)) *)
    (*             (fun w2 œâ12 => *)
    (*              demonic_match_pattern n (p K) (subst t__field œâ12) (four (k K) (acc_trans œâ01 œâ12))))). *)

    (* Definition demonic_match_union {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty} *)
    (*   (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) : *)
    (*   ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> ùïä AT)) -> ùïä AT := *)
    (*   fun w0 t k => *)
    (*     match term_get_union t with *)
    (*     | Some (existT K t__field) => demonic_match_pattern n (p K) t__field (k K) *)
    (*     | None => demonic_match_union' n p t k *)
    (*     end. *)

    Global Instance proper_debug {B Œ£ b} : Proper (iff ==> iff) (@Debug B Œ£ b).
    Proof.
      intros P Q PQ.
      split; intros []; constructor; intuition.
    Qed.

    (* Ltac wsimpl := *)
    (*   repeat *)
    (*     (try change (wctx (wsnoc ?w ?b)) with (ctx_snoc (wctx w) b); *)
    (*      try change (sub_acc (@wred_sup ?w ?b ?t)) with (sub_snoc (sub_id (wctx w)) b t); *)
    (*      try change (wco (wsnoc ?w ?b)) with (subst (wco w) (sub_wk1 (b:=b))); *)
    (*      try change (sub_acc (@wrefl ?w)) with (sub_id (wctx w)); *)
    (*      try change (sub_acc (@wsnoc_sup ?w ?b)) with (@sub_wk1 (wctx w) b); *)
    (*      try change (wctx (wformula ?w ?fml)) with (wctx w); *)
    (*      try change (sub_acc (acc_trans ?œâ1 ?œâ2)) with (subst (sub_acc œâ1) (sub_acc œâ2)); *)
    (*      try change (sub_acc (@wformula_sup ?w ?fml)) with (sub_id (wctx w)); *)
    (*      try change (wco (wformula ?w ?fml)) with (cons fml (wco w)); *)
    (*      try change (wco (@wsubst ?w _ _ ?xIn ?t)) with (subst (wco w) (sub_single xIn t)); *)
    (*      try change (wctx (@wsubst ?w _ _ ?xIn ?t)) with (ctx_remove xIn); *)
    (*      try change (sub_acc (@acc_subst_right ?w _ _ ?xIn ?t)) with (sub_single xIn t); *)
    (*      rewrite <- ?sub_comp_wk1_tail, ?inst_subst, ?subst_sub_id, *)
    (*        ?inst_sub_id, ?inst_sub_wk1, ?inst_sub_snoc, *)
    (*        ?inst_lift, ?inst_sub_single, ?inst_pathcondition_cons; *)
    (*      repeat *)
    (*        match goal with *)
    (*        | |- Debug _ _ <-> Debug _ _ => apply proper_debug *)
    (*        | |- (?A /\ ?B) <-> (?A /\ ?C) => apply and_iff_compat_l'; intro *)
    (*        | |- (?A -> ?B) <-> (?A -> ?C) => apply imp_iff_compat_l'; intro *)
    (*        | |- (exists x : ?X, _) <-> (exists y : ?X, _) => apply base.exist_proper; intro *)
    (*        | |- (forall x : ?X, _) <-> (forall y : ?X, _) => apply base.forall_proper; intro *)
    (*        | |- wp ?m _ ?Œπ -> wp ?m _ ?Œπ => apply wp_monotonic; intro *)
    (*        | |- wp ?m _ ?Œπ <-> wp ?m _ ?Œπ => apply wp_equiv; intro *)
    (*        | |- ?w ‚äí ?w => apply wrefl *)
    (*        | |- ?POST (@inst _ _ _ ?Œ£1 ?x1 ?Œπ1) <-> ?POST (@inst _ _ _ ?Œ£2 ?x2 ?Œπ2) => *)
    (*          assert (@inst _ _ _ Œ£1 x1 Œπ1 = @inst _ _ _ Œ£2 x2 Œπ2) as ->; auto *)
    (*        | |- ?POST (?inst _ _ _ ?Œ£1 ?x1 ?Œπ1) -> ?POST (@inst _ _ _ ?Œ£2 ?x2 ?Œπ2) => *)
    (*          assert (@inst _ _ _ Œ£1 x1 Œπ1 = @inst _ _ _ Œ£2 x2 Œπ2) as ->; auto *)
    (*        | Hdcl : mapping_dcl ?f |- *)
    (*          inst (?f ?w ?œâ _) _ = inst (?f ?w ?œâ _) _ => *)
    (*          apply (Hdcl w œâ w œâ wrefl) *)
    (*        | Hdcl : mapping_dcl ?f |- *)
    (*          inst (?f ?w0 wrefl _) _ = inst (?f ?w1 ?œâ01 _) _ => *)
    (*          apply (Hdcl w0 wrefl w1 œâ01 œâ01) *)
    (*        | Hdcl : mapping_dcl ?f |- *)
    (*          inst (?f ?w1 ?œâ01 _) _ = inst (?f ?w0 wrefl _) _ => *)
    (*          symmetry; apply (Hdcl w0 wrefl w1 œâ01 œâ01) *)
    (*        | Hdcl : arrow_dcl ?f |- *)
    (*          wp (?f ?w ?œâ _) _ _ -> wp (?f ?w ?œâ _) _ _  => *)
    (*          apply (Hdcl w œâ w œâ wrefl) *)
    (*        end). *)

  End SDijk.

  Section Configuration.

    Record Config : Type :=
      MkConfig
        { config_debug_function : forall Œî œÑ, ùë≠ Œî œÑ -> bool;
        }.

    Definition default_config : Config :=
      {| config_debug_function _ _ f := false;
      |}.

  End Configuration.

  Definition SMut (Œì1 Œì2 : PCtx) (A : TYPE) : TYPE :=
    ‚ñ°(A -> SStore Œì2 -> SHeap -> ùïä) -> SStore Œì1 -> SHeap -> ùïä.
  Bind Scope mut_scope with SMut.

  Module SMut.

    Section Basic.

      Definition dijkstra {Œì} {A : TYPE} :
        ‚ä¢ SDijkstra A -> SMut Œì Œì A.
      Proof.
        intros w0 m POST Œ¥0 h0.
        apply m.
        intros w1 œâ01 a1.
        apply POST; auto.
        apply (persist (A := SStore Œì) Œ¥0 œâ01).
        apply (persist (A := SHeap) h0 œâ01).
      Defined.

      Definition pure {Œì} {A : TYPE} :
        ‚ä¢ A -> SMut Œì Œì A.
      Proof.
        intros w0 a k.
        apply k; auto. apply acc_refl.
      Defined.

      Definition bind {Œì1 Œì2 Œì3 A B} :
        ‚ä¢ SMut Œì1 Œì2 A -> ‚ñ°(A -> SMut Œì2 Œì3 B) -> SMut Œì1 Œì3 B.
      Proof.
        intros w0 ma f k.
        unfold SMut, Impl, Box in *.
        apply ma; auto.
        intros w1 œâ01 a1.
        apply f; auto.
        apply (four k œâ01).
      Defined.

      Definition bind_box {Œì1 Œì2 Œì3 A B} :
        ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(A -> SMut Œì2 Œì3 B) -> ‚ñ°(SMut Œì1 Œì3 B) :=
        fun w0 m f => bind <$> m <*> four f.

      (* Definition strength {Œì1 Œì2 A B Œ£} `{Subst A, Subst B} (ma : SMut Œì1 Œì2 A Œ£) (b : B Œ£) : *)
      (*   SMut Œì1 Œì2 (fun Œ£ => A Œ£ * B Œ£)%type Œ£ := *)
      (*   bind ma (fun _ Œ∂ a => pure (a, subst b Œ∂)). *)

      Definition bind_right {Œì1 Œì2 Œì3 A B} :
        ‚ä¢ SMut Œì1 Œì2 A -> ‚ñ°(SMut Œì2 Œì3 B) -> SMut Œì1 Œì3 B.
      Proof.
        intros w0 m k POST.
        apply m.
        intros w1 œâ01 a1.
        apply k. auto.
        intros w2 œâ12 b2.
        apply (four POST œâ01); auto.
      Defined.

      (* Definition bind_left {Œì1 Œì2 Œì3 A B} `{Subst A} : *)
      (*   ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(SMut Œì2 Œì3 B) -> ‚ñ°(SMut Œì1 Œì3 A). *)
      (* Proof. *)
      (*   intros w0 ma mb. *)
      (*   apply (bbind ma). *)
      (*   intros w1 œâ01 a1 Œ¥1 h1. *)
      (*   apply (bind (mb w1 œâ01 Œ¥1 h1)). *)
      (*   intros w2 œâ12 [_ Œ¥2 h2]. *)
      (*   apply (pure). *)
      (*   apply (subst a1 œâ12). *)
      (*   auto. *)
      (*   auto. *)
      (* Defined. *)

      (* Definition map {Œì1 Œì2 A B} `{Subst A, Subst B} : *)
      (*   ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(A -> B) -> ‚ñ°(SMut Œì1 Œì2 B) := *)
      (*   fun w0 ma f Œ£1 Œ∂01 pc1 Œ¥1 h1 => *)
      (*     map pc1 *)
      (*       (fun Œ£2 Œ∂12 pc2 '(MkSMutResult a2 Œ¥2 h2) => *)
      (*          MkSMutResult (f Œ£2 (subst Œ∂01 Œ∂12) pc2 a2) Œ¥2 h2) *)
      (*        (ma Œ£1 Œ∂01 pc1 Œ¥1 h1). *)

      Definition error {Œì1 Œì2 A D} (func : string) (msg : string) (data:D) :
        ‚ä¢ SMut Œì1 Œì2 A :=
        fun w _ Œ¥ h =>
          error
            (EMsgHere
               {| msg_function := func;
                  msg_message := msg;
                  msg_program_context := Œì1;
                  msg_localstore := Œ¥;
                  msg_heap := h;
                  msg_pathcondition := wco w
               |}).
      Global Arguments error {_ _ _ _} func msg data {w} _ _.

      Definition block {Œì1 Œì2 A} :
        ‚ä¢ SMut Œì1 Œì2 A.
      Proof.
        intros w0 POST Œ¥ h.
        apply block.
      Defined.

      Definition angelic_binary {Œì1 Œì2 A} :
        ‚ä¢ SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A :=
        fun w m1 m2 POST Œ¥1 h1 =>
          angelic_binary (m1 POST Œ¥1 h1) (m2 POST Œ¥1 h1).
      Definition demonic_binary {Œì1 Œì2 A} :
        ‚ä¢ SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A :=
        fun w m1 m2 POST Œ¥1 h1 =>
          demonic_binary (m1 POST Œ¥1 h1) (m2 POST Œ¥1 h1).

      Definition angelic_list {M} {subM : Subst M} {occM : OccursCheck M} {A Œì} :
        ‚ä¢ (SStore Œì -> SHeap -> M) -> List A -> SMut Œì Œì A :=
        fun w msg xs POST Œ¥ h => dijkstra (SDijk.angelic_list (msg Œ¥ h) xs) POST Œ¥ h.

      Definition angelic_finite {Œì} F `{finite.Finite F} :
        ‚ä¢ (SStore Œì -> SHeap -> Message) -> SMut Œì Œì ‚åúF‚åù :=
        fun w msg POST Œ¥ h => dijkstra (SDijk.angelic_finite (msg Œ¥ h)) POST Œ¥ h.

      Definition demonic_finite {Œì} F `{finite.Finite F} :
        ‚ä¢ SMut Œì Œì ‚åúF‚åù :=
        fun w => dijkstra (SDijk.demonic_finite (w:=w)).
      Global Arguments demonic_finite {Œì} [_] {_ _} {w}.

      Definition angelic {Œì} (x : option ùë∫) œÉ :
        ‚ä¢ SMut Œì Œì (STerm œÉ) :=
        fun w => dijkstra (SDijk.angelic x œÉ (w:=w)).
      Global Arguments angelic {Œì} x œÉ {w}.

      Definition demonic {Œì} (x : option ùë∫) œÉ :
        ‚ä¢ SMut Œì Œì (STerm œÉ) :=
        fun w => dijkstra (SDijk.demonic x œÉ (w:=w)).
      Global Arguments demonic {Œì} x œÉ {w}.

      Definition debug {AT DT} `{Subst DT, OccursCheck DT} {Œì1 Œì2} :
        ‚ä¢ (SStore Œì1 -> SHeap -> DT) -> (SMut Œì1 Œì2 AT) -> (SMut Œì1 Œì2 AT).
      Proof.
        intros w0 d m POST Œ¥ h.
        eapply debug. eauto.
        eauto. eauto.
        apply d. auto. auto.
        apply m; auto.
      Defined.

      Definition angelic_ctx {N : Set} (n : N -> ùë∫) {Œì} :
        ‚ä¢ ‚àÄ Œî : NCtx N Ty, SMut Œì Œì (fun w => NamedEnv (Term w) Œî).
      Proof.
        intros w0 Œî. apply dijkstra.
        apply (SDijk.angelic_ctx n Œî).
      Defined.
      Global Arguments angelic_ctx {N} n {Œì} [w] Œî : rename.

      Definition demonic_ctx {N : Set} (n : N -> ùë∫) {Œì} :
        ‚ä¢ ‚àÄ Œî : NCtx N Ty, SMut Œì Œì (fun w => NamedEnv (Term w) Œî).
      Proof.
        intros w0 Œî. apply dijkstra.
        apply (SDijk.demonic_ctx n Œî).
      Defined.
      Global Arguments demonic_ctx {N} n {Œì} [w] Œî : rename.

    End Basic.

    Module SMutNotations.

      (* Notation "'‚®Ç' x .. y => F" := *)
      (*   (smut_demonic (fun x => .. (smut_demonic (fun y => F)) .. )) : mut_scope. *)

      (* Notation "'‚®Å' x .. y => F" := *)
      (*   (smut_angelic (fun x => .. (smut_angelic (fun y => F)) .. )) : mut_scope. *)

      (* Infix "‚äó" := smut_demonic_binary (at level 40, left associativity) : mut_scope. *)
      (* Infix "‚äï" := smut_angelic_binary (at level 50, left associativity) : mut_scope. *)

      Notation "x <- ma ;; mb" := (bind ma (fun _ _ x => mb)) (at level 80, ma at level 90, mb at level 200, right associativity) : mut_scope.
      Notation "ma >>= f" := (bind ma f) (at level 50, left associativity, only parsing) : mut_scope.
      Notation "ma >> mb" := (bind_right ma mb) (at level 50, left associativity, only parsing) : mut_scope.
      (* Notation "m1 ;; m2" := (smut_bind_right m1 m2) : mut_scope. *)

      Notation "‚ü® œâ ‚ü© x <- ma ;; mb" :=
        (bind ma (fun _ œâ x => mb))
          (at level 80, x at next level,
            ma at next level, mb at level 200,
            right associativity) : mut_scope.

    End SMutNotations.
    Import SMutNotations.
    Local Open Scope mut_scope.

    Section AssumeAssert.

      (* Add the provided formula to the path condition. *)
      Definition assume_formula {Œì} :
        ‚ä¢ Formula -> SMut Œì Œì Unit.
      Proof.
        intros w0 fml. apply dijkstra.
        apply (SDijk.assume_formula fml).
      Defined.

      Definition box_assume_formula {Œì} :
        ‚ä¢ Formula -> ‚ñ°(SMut Œì Œì Unit) :=
        fun w0 fml => assume_formula <$> persist fml.

      Definition assert_formula {Œì} :
        ‚ä¢ Formula -> SMut Œì Œì Unit :=
        fun w0 fml POST Œ¥0 h0 =>
          dijkstra
            (SDijk.assert_formula
               {| msg_function := "smut_assert_formula";
                  msg_message := "Proof obligation";
                  msg_program_context := Œì;
                  msg_localstore := Œ¥0;
                  msg_heap := h0;
                  msg_pathcondition := wco w0
               |} fml)
            POST Œ¥0 h0.

      Definition box_assert_formula {Œì} :
        ‚ä¢ Formula -> ‚ñ°(SMut Œì Œì Unit) :=
        fun w0 fml => assert_formula <$> persist fml.

      Definition assert_formulas {Œì} :
        ‚ä¢ List Formula -> SMut Œì Œì Unit.
      Proof.
        intros w0 fmls POST Œ¥0 h0.
        eapply dijkstra.
        apply SDijk.assert_formulas.
        apply
          {| msg_function := "smut_assert_formula";
             msg_message := "Proof obligation";
             msg_program_context := Œì;
             msg_localstore := Œ¥0;
             msg_heap := h0;
             msg_pathcondition := wco w0
          |}.
        apply fmls.
        apply POST.
        apply Œ¥0.
        apply h0.
      Defined.

    End AssumeAssert.

    Section PatternMatching.

      (* Definition angelic_match_bool {Œì} : *)
      (*   ‚ä¢ STerm ty_bool -> SMut Œì Œì ‚åúbool‚åù := *)
      (*   fun w t POST Œ¥ h => *)
      (*     dijkstra *)
      (*       (SDijk.angelic_match_bool *)
      (*          {| msg_function := "SMut.angelic_match_bool"; *)
      (*             msg_message := "pattern match assertion"; *)
      (*             msg_program_context := Œì; *)
      (*             msg_localstore := Œ¥; *)
      (*             msg_heap := h; *)
      (*             msg_pathcondition := wco w *)
      (*          |} t) *)
      (*       POST Œ¥ h. *)

      (* Definition demonic_match_bool {Œì} : *)
      (*   ‚ä¢ STerm ty_bool -> SMut Œì Œì ‚åúbool‚åù := *)
      (*   fun w t => dijkstra (SDijk.demonic_match_bool t). *)

      Definition angelic_match_bool' {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kt kf.
        apply angelic_binary.
        - eapply bind_right.
          apply assert_formula.
          (* apply *)
          (*   {| msg_function        := "smut_angelic_match_bool"; *)
          (*      msg_message         := "pattern match assertion"; *)
          (*      msg_program_context := Œì1; *)
          (*      msg_localstore      := Œ¥0; *)
          (*      msg_heap            := h0; *)
          (*      msg_pathcondition   := wco w0; *)
          (*   |}. *)
          apply (formula_bool t).
          apply kt.
        - eapply bind_right.
          apply assert_formula.
          (* apply *)
          (*   {| msg_function        := "smut_angelic_match_bool"; *)
          (*      msg_message         := "pattern match assertion"; *)
          (*      msg_program_context := Œì1; *)
          (*      msg_localstore      := Œ¥0; *)
          (*      msg_heap            := h0; *)
          (*      msg_pathcondition   := wco w0; *)
          (*   |}. *)
          apply (formula_bool (term_not t)).
          apply kf.
      Defined.

      Definition angelic_match_bool {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT :=
        fun w0 t kt kf =>
          match term_get_val t with
          | Some true => T kt
          | Some false => T kf
          | None => angelic_match_bool' t kt kf
          end.

      Definition box_angelic_match_bool {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t kt kf =>
          angelic_match_bool <$> persist__term t <*> four kt <*> four kf.

      Definition demonic_match_bool' {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kt kf.
        apply demonic_binary.
        - eapply bind_right.
          apply assume_formula.
          apply (formula_bool t).
          apply kt.
        - eapply bind_right.
          apply assume_formula.
          apply (formula_bool (term_not t)).
          apply kf.
      Defined.

      Definition demonic_match_bool {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT :=
        fun w0 t kt kf =>
          match term_get_val t with
          | Some true => T kt
          | Some false => T kf
          | None => demonic_match_bool' t kt kf
          end.

      Definition box_demonic_match_bool {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t kt kf =>
          demonic_match_bool <$> persist__term t <*> four kt <*> four kf.

      Definition angelic_match_enum {AT E} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_enum E) -> (‚åúùë¨ùë≤ E‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t cont.
        eapply bind.
        apply (angelic_finite (F := ùë¨ùë≤ E)).
        intros Œ¥ h.
        apply
            {| msg_function        := "SMut.angelic_match_enum";
               msg_message         := "pattern match assertion";
               msg_program_context := Œì1;
               msg_localstore      := Œ¥;
               msg_heap            := h;
               msg_pathcondition   := wco w0;
            |}.
        intros w1 œâ01 EK.
        eapply bind_right.
        apply (assert_formula (formula_eq (persist__term t œâ01) (term_enum E EK))).
        apply (four (cont EK)). auto.
      Defined.

      Definition demonic_match_enum {A E} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_enum E) -> (‚åúùë¨ùë≤ E‚åù -> ‚ñ°(SMut Œì1 Œì2 A)) -> SMut Œì1 Œì2 A.
      Proof.
        intros w0 t cont.
        eapply bind.
        apply (demonic_finite (F := ùë¨ùë≤ E)).
        intros w1 œâ01 EK.
        eapply bind_right.
        apply (assume_formula (formula_eq (persist__term t œâ01) (term_enum E EK))).
        apply (four (cont EK)). auto.
      Defined.

      Definition box_demonic_match_enum {AT E} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_enum E) -> (‚åúùë¨ùë≤ E‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k =>
          demonic_match_enum
            <$> persist__term t
            <*> (fun (w1 : World) (œâ01 : w0 ‚äí w1) (EK : ùë¨ùë≤ E) => four (k EK) œâ01).

      Definition angelic_match_sum {AT Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kinl kinr.
        apply angelic_binary.
        - eapply bind.
          apply (angelic (Some x) œÉ).
          intros w1 œâ01 t1.
          eapply bind_right.
          apply assert_formula.
          apply (formula_eq (term_inl t1) (persist__term t œâ01)).
          intros w2 œâ12.
          apply (four kinl œâ01). auto.
          apply (persist__term t1 œâ12).
        - eapply bind.
          apply (angelic (Some y) œÑ).
          intros w1 œâ01 t1.
          eapply bind_right.
          apply assert_formula.
          apply (formula_eq (term_inr t1) (persist__term t œâ01)).
          intros w2 œâ12.
          apply (four kinr œâ01). auto.
          apply (persist__term t1 œâ12).
      Defined.

      Definition demonic_match_sum {AT Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kinl kinr.
        apply demonic_binary.
        - eapply bind.
          apply (demonic (Some x) œÉ).
          intros w1 œâ01 t1.
          eapply bind_right.
          apply assume_formula.
          apply (formula_eq (term_inl t1) (persist__term t œâ01)).
          intros w2 œâ12.
          apply (four kinl œâ01). auto.
          apply (persist__term t1 œâ12).
        - eapply bind.
          apply (demonic (Some y) œÑ).
          intros w1 œâ01 t1.
          eapply bind_right.
          apply assume_formula.
          apply (formula_eq (term_inr t1) (persist__term t œâ01)).
          intros w2 œâ12.
          apply (four kinr œâ01). auto.
          apply (persist__term t1 œâ12).
      Defined.

      Definition demonic_match_sum_lifted {AT Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kinl kinr POST Œ¥0 h0.
        eapply (SDijk.demonic_match_sum (A := fun w => SStore Œì2 w * SHeap w * AT w)%type x _ y _ _ t).
        - intros w1 œâ01 t' POSTl.
          apply kinl. auto. auto.
          intros w2 œâ12 a2 Œ¥2 h2.
          apply POSTl. auto. auto.
          apply (persist (A := SStore _) Œ¥0 œâ01).
          apply (persist (A := SHeap) h0 œâ01).
        - intros w1 œâ01 t' POSTr.
          apply kinr. auto. auto.
          intros w2 œâ12 a2 Œ¥2 h2.
          apply POSTr. auto. auto.
          apply (persist (A := SStore _) Œ¥0 œâ01).
          apply (persist (A := SHeap) h0 œâ01).
        - intros w1 œâ01 [ [Œ¥1 h1] a1]. apply POST. auto. auto. auto. auto.
      Defined.

      Definition angelic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
        ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t knil kcons.
        apply angelic_binary.
        - eapply bind_right.
          apply assert_formula.
          (* apply *)
          (*   {| msg_function        := "SMut.angelic_match_list"; *)
          (*      msg_message         := "pattern match assertion"; *)
          (*      msg_program_context := Œì1; *)
          (*      msg_localstore      := Œ¥0; *)
          (*      msg_heap            := h0; *)
          (*      msg_pathcondition   := wco w0; *)
          (*   |}. *)
          apply (formula_eq (term_val (ty_list œÉ) []%list) t).
          intros w1 œâ01.
          apply knil. auto.
        - eapply bind.
          apply (angelic (Some x) œÉ).
          intros w1 œâ01 thead.
          eapply bind.
          apply (angelic (Some y) (ty_list œÉ)).
          intros w2 œâ12 ttail.
          eapply bind_right.
          apply assert_formula.
          (* apply *)
          (*   {| msg_function        := "SMut.angelic_match_list"; *)
          (*      msg_message         := "pattern match assertion"; *)
          (*      msg_program_context := Œì1; *)
          (*      msg_localstore      := subst Œ¥0 (acc_trans œâ01 œâ12); *)
          (*      msg_heap            := subst h0 (acc_trans œâ01 œâ12); *)
          (*      msg_pathcondition   := wco w2; *)
          (*   |}. *)
          apply (formula_eq (term_binop binop_cons (persist__term thead œâ12) ttail) (persist__term t (acc_trans œâ01 œâ12))).
          intros w3 œâ23.
          apply (four kcons (acc_trans œâ01 œâ12)). auto.
          apply (persist__term thead (acc_trans œâ12 œâ23)).
          apply (persist__term ttail œâ23).
      Defined.

      Definition box_angelic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
        ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t knil kcons => angelic_match_list x y <$> persist__term t <*> four knil <*> four kcons.

      Definition demonic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
        ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t knil kcons.
        apply demonic_binary.
        - eapply bind_right.
          apply assume_formula.
          apply (formula_eq (term_val (ty_list œÉ) []%list) t).
          intros w1 œâ01.
          apply knil. auto.
        - eapply bind.
          apply (demonic (Some x) œÉ).
          intros w1 œâ01 thead.
          eapply bind.
          apply (demonic (Some y) (ty_list œÉ)).
          intros w2 œâ12 ttail.
          eapply bind_right.
          apply assume_formula.
          apply (formula_eq (term_binop binop_cons (persist__term thead œâ12) ttail) (persist__term t (acc_trans œâ01 œâ12))).
          intros w3 œâ23.
          apply (four kcons (acc_trans œâ01 œâ12)). auto.
          apply (persist__term thead (acc_trans œâ12 œâ23)).
          apply (persist__term ttail œâ23).
      Defined.

      Definition box_demonic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
        ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t knil kcons => demonic_match_list x y <$> persist__term t <*> four knil <*> four kcons.

      Definition angelic_match_prod {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        apply (bind (angelic (Some x) œÉ)).
        intros w1 œâ01 tœÉ.
        apply (bind (angelic (Some y) œÑ)).
        intros w2 œâ12 tœÑ.
        eapply bind_right.
        apply assert_formula.
          (* {| msg_function        := "SMut.angelic_match_prod"; *)
          (*    msg_message         := "pattern match assertion"; *)
          (*    msg_program_context := Œì1; *)
          (*    msg_localstore      := subst Œ¥0 (acc_trans œâ01 œâ12); *)
          (*    msg_heap            := subst h0 (acc_trans œâ01 œâ12); *)
          (*    msg_pathcondition   := wco w2; *)
          (* |}. *)
        apply (formula_eq (term_binop binop_pair (persist__term tœÉ œâ12) tœÑ) (persist__term t (acc_trans œâ01 œâ12))).
        intros w3 œâ23.
        apply (four k (acc_trans œâ01 œâ12)). auto.
        apply (persist__term tœÉ (acc_trans œâ12 œâ23)).
        apply (persist__term tœÑ œâ23).
      Defined.

      Definition box_angelic_match_prod {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => angelic_match_prod x y <$> persist__term t <*> four k.

      Definition demonic_match_prod {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        apply (bind (demonic (Some x) œÉ)).
        intros w1 œâ01 tœÉ.
        apply (bind (demonic (Some y) œÑ)).
        intros w2 œâ12 tœÑ.
        eapply bind_right.
        apply assume_formula.
        apply (formula_eq (term_binop binop_pair (persist__term tœÉ œâ12) tœÑ) (persist__term t (acc_trans œâ01 œâ12))).
        intros w3 œâ23.
        apply (four k (acc_trans œâ01 œâ12)). auto.
        apply (persist__term tœÉ (acc_trans œâ12 œâ23)).
        apply (persist__term tœÑ œâ23).
      Defined.

      Definition box_demonic_match_prod {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => demonic_match_prod x y <$> persist__term t <*> four k.

      Definition angelic_match_record' {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        eapply bind.
        apply (angelic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply bind_right.
        apply assert_formula.
          (* {| msg_function        := "SMut.angelic_match_record"; *)
          (*    msg_message         := "pattern match assertion"; *)
          (*    msg_program_context := Œì1; *)
          (*    msg_localstore      := subst Œ¥0 (acc_trans œâ01 œâ12); *)
          (*    msg_heap            := subst h0 (acc_trans œâ01 œâ12); *)
          (*    msg_pathcondition   := wco w2; *)
          (* |}. *)
        apply (formula_eq (term_record R (record_pattern_match_env_reverse p ts)) (persist__term t œâ01)).
        intros w2 œâ12.
        apply (four k œâ01). auto.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition angelic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        destruct (term_get_record t).
        - apply (T k).
          apply (record_pattern_match_env p n0).
        - apply (angelic_match_record' n p t k).
      Defined.

      Definition box_angelic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => angelic_match_record n p <$> persist__term t <*> four k.

      Definition demonic_match_record' {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        eapply bind.
        apply (demonic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply bind_right.
        apply assume_formula.
        apply (formula_eq (term_record R (record_pattern_match_env_reverse p ts)) (persist__term t œâ01)).
        intros w2 œâ12.
        apply (four k œâ01). auto.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition demonic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        destruct (term_get_record t).
        - apply (T k).
          apply (record_pattern_match_env p n0).
        - apply (demonic_match_record' n p t k).
      Defined.

      Definition box_demonic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => demonic_match_record n p <$> persist__term t <*> four k.

      Definition angelic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
        ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        eapply bind.
        apply (angelic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply bind_right.
        apply assert_formula.
          (* {| msg_function        := "SMut.angelic_match_tuple"; *)
          (*    msg_message         := "pattern match assertion"; *)
          (*    msg_program_context := Œì1; *)
          (*    msg_localstore      := subst Œ¥0 (acc_trans œâ01 œâ12); *)
          (*    msg_heap            := subst h0 (acc_trans œâ01 œâ12); *)
          (*    msg_pathcondition   := wco w2; *)
        (* |}. *)
        apply (formula_eq (term_tuple (tuple_pattern_match_env_reverse p ts)) (persist__term t œâ01)).
        intros w2 œâ12.
        apply (four k œâ01). auto.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition box_angelic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
        ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => angelic_match_tuple n p <$> persist__term t <*> four k.

      Definition demonic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
        ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        eapply bind.
        apply (demonic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply bind_right.
        apply assume_formula.
        apply (formula_eq (term_tuple (tuple_pattern_match_env_reverse p ts)) (persist__term t œâ01)).
        intros w2 œâ12.
        apply (four k œâ01). auto.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition box_demonic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
        ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => demonic_match_tuple n p <$> persist__term t <*> four k.

      Definition angelic_match_pattern {N : Set} (n : N -> ùë∫) {œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) {Œì} :
        ‚ä¢ (SStore Œì -> SHeap -> Message) -> STerm œÉ -> SMut Œì Œì (fun w => NamedEnv (Term w) Œî).
      Proof.
        intros w0 msg t.
        eapply (bind).
        apply (angelic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply (bind_right).
        apply assert_formula.
        apply (formula_eq (pattern_match_env_reverse p ts) (persist__term t œâ01)).
        intros w2 œâ12.
        apply pure.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition demonic_match_pattern {N : Set} (n : N -> ùë∫) {œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) {Œì} :
        ‚ä¢ STerm œÉ -> SMut Œì Œì (fun w => NamedEnv (Term w) Œî).
      Proof.
        intros w0 t.
        eapply (bind).
        apply (demonic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply (bind_right).
        apply assume_formula.
        apply (formula_eq (pattern_match_env_reverse p ts) (persist__term t œâ01)).
        intros w2 œâ12.
        apply pure.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition angelic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
        {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
        ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t cont.
        eapply bind.
        apply (angelic_finite (F := ùëºùë≤ U)).
        intros Œ¥ h.
        apply
            {| msg_function        := "SMut.angelic_match_union";
               msg_message         := "pattern match assertion";
               msg_program_context := Œì1;
               msg_localstore      := Œ¥;
               msg_heap            := h;
               msg_pathcondition   := wco w0;
            |}.
        intros w1 œâ01 UK.
        eapply bind.
        apply (angelic None (ùëºùë≤_Ty UK)).
        intros w2 œâ12 t__field.
        eapply bind_right.
        apply assert_formula.
        apply (formula_eq (term_union U UK t__field) (persist__term t (acc_trans œâ01 œâ12))).
        intros w3 œâ23.
        eapply bind.
        apply (angelic_match_pattern n (p UK)).
        intros Œ¥ h.
        apply
            {| msg_function        := "SMut.angelic_match_union";
               msg_message         := "pattern match assertion";
               msg_program_context := Œì1;
               msg_localstore      := Œ¥;
               msg_heap            := h;
               msg_pathcondition   := wco w3;
            |}.
        apply (persist__term t__field œâ23).
        apply (four (cont UK)).
        apply (acc_trans œâ01 (acc_trans œâ12 œâ23)).
      Defined.

      Definition box_angelic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
        {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
        ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT).
      Proof.
        refine (fun w0 t k => angelic_match_union n p <$> persist__term t <*> _).
        intros w1 œâ01 UK. apply (four (k UK) œâ01).
      Defined.

      Definition demonic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
        {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
        ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t cont.
        eapply bind.
        apply (demonic_finite (F := ùëºùë≤ U)).
        intros w1 œâ01 UK.
        eapply bind.
        apply (demonic None (ùëºùë≤_Ty UK)).
        intros w2 œâ12 t__field.
        eapply bind_right.
        apply assume_formula.
        apply (formula_eq (term_union U UK t__field) (persist__term t (acc_trans œâ01 œâ12))).
        intros w3 œâ23.
        eapply bind.
        apply (demonic_match_pattern n (p UK)).
        apply (persist__term t__field œâ23).
        apply (four (cont UK)).
        apply (acc_trans œâ01 (acc_trans œâ12 œâ23)).
      Defined.

      Definition box_demonic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
        {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
        ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT).
      Proof.
        refine (fun w0 t k => demonic_match_union n p <$> persist__term t <*> _).
        intros w1 œâ01 UK. apply (four (k UK) œâ01).
      Defined.

      Definition angelic_match_bvec' {AT n} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_bvec n) -> (‚åúbv n‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT :=
        fun w0 t k =>
          ‚ü® œâ1 ‚ü© b <- angelic_finite
                        (fun (Œ¥ : SStore Œì1 w0) (h : SHeap w0) =>
                           {| msg_function := "SMut.angelic_match_bvec";
                              msg_message := "pattern match assertion";
                              msg_program_context := Œì1;
                              msg_localstore := Œ¥;
                              msg_heap := h;
                              msg_pathcondition := wco w0
                           |}) ;;
          let t1 := persist__term t œâ1 in
          ‚ü® œâ2 ‚ü© _ <- assert_formula (formula_eq t1 (term_val (ty_bvec n) b)) ;;
          four (k b) œâ1 œâ2.

      Definition angelic_match_bvec {AT n} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_bvec n) -> (‚åúbv n‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT :=
        fun w0 t k =>
          match term_get_val t with
          | Some b => T (k b)
          | None   => angelic_match_bvec' t k
          end.

      Definition demonic_match_bvec' {AT n} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_bvec n) -> (‚åúbv n‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT :=
        fun w0 t k =>
          ‚ü® œâ1 ‚ü© b <- demonic_finite (F := bv n) ;;
          let s1 := term_val (ty_bvec n) b in
          let t1 := persist__term t œâ1 in
          ‚ü® œâ2 ‚ü© _ <- assume_formula (formula_eq s1 t1) ;;
          four (k b) œâ1 œâ2.

      Definition demonic_match_bvec {AT n} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_bvec n) -> (‚åúbv n‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT :=
        fun w0 t k =>
          match term_get_val t with
          | Some b => T (k b)
          | None   => demonic_match_bvec' t k
          end.

    End PatternMatching.

    Section State.

      Definition pushpop {AT Œì1 Œì2 x œÉ} :
        ‚ä¢ STerm œÉ -> SMut (Œì1 ‚ñª x‚à∑œÉ) (Œì2 ‚ñª x‚à∑œÉ) AT -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t m POST Œ¥ h.
        apply m.
        intros w1 œâ01 a1 Œ¥1 h1.
        apply POST. auto. auto. apply (env.tail Œ¥1). apply h1.
        apply env.snoc.
        apply Œ¥.
        apply t.
        apply h.
      Defined.

      Definition pushspops {AT Œì1 Œì2 Œî} :
        ‚ä¢ SStore Œî -> SMut (Œì1 ‚ñª‚ñª Œî) (Œì2 ‚ñª‚ñª Œî) AT -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 Œ¥Œî m POST Œ¥ h.
        apply m.
        intros w1 œâ01 a1 Œ¥1 h1.
        apply POST. auto. auto. apply (env.drop Œî Œ¥1). apply h1.
        apply env.cat.
        apply Œ¥.
        apply Œ¥Œî.
        apply h.
      Defined.

      Definition get_local {Œì} : ‚ä¢ SMut Œì Œì (SStore Œì) :=
        fun w0 POST Œ¥ => T POST Œ¥ Œ¥.
      Definition put_local {Œì1 Œì2} : ‚ä¢ SStore Œì2 -> SMut Œì1 Œì2 Unit :=
        fun w0 Œ¥ POST _ => T POST tt Œ¥.
      Definition get_heap {Œì} : ‚ä¢ SMut Œì Œì SHeap :=
        fun w0 POST Œ¥ h => T POST h Œ¥ h.
      Definition put_heap {Œì} : ‚ä¢ SHeap -> SMut Œì Œì Unit :=
        fun w0 h POST Œ¥ _ => T POST tt Œ¥ h.

      Definition eval_exp {Œì œÉ} (e : Exp Œì œÉ) :
        ‚ä¢ SMut Œì Œì (STerm œÉ).
        intros w POST Œ¥ h.
        apply (T POST).
        apply peval.
        apply (seval_exp Œ¥ e).
        auto.
        auto.
      Defined.

      Definition eval_exps {Œì} {œÉs : PCtx} (es : NamedEnv (Exp Œì) œÉs) :
        ‚ä¢ SMut Œì Œì (SStore œÉs).
        intros w POST Œ¥ h.
        apply (T POST).
        refine (env.map _ es).
        intros b e. apply peval. apply (seval_exp Œ¥ e).
        auto.
        auto.
      Defined.

      Definition assign {Œì} x {œÉ} {xIn : x‚à∑œÉ ‚àà Œì} : ‚ä¢ STerm œÉ -> SMut Œì Œì Unit :=
        fun w0 t POST Œ¥ => T POST tt (Œ¥ ‚ü™ x ‚Ü¶ t ‚ü´).
      Global Arguments assign {Œì} x {œÉ xIn w} v.

    End State.

    Section ProduceConsume.
      Import EqNotations.

      Definition produce_chunk {Œì} :
        ‚ä¢ Chunk -> SMut Œì Œì Unit :=
        fun w0 c k Œ¥ h => T k tt Œ¥ (cons (peval_chunk c) h).

      Fixpoint try_consume_chunk_exact {Œ£} (h : SHeap Œ£) (c : Chunk Œ£) {struct h} : option (SHeap Œ£) :=
        match h with
        | nil       => None
        | cons c' h =>
          if chunk_eqb c c'
          then Some (if is_duplicable c then (cons c h) else h)
          else option_map (cons c') (try_consume_chunk_exact h c)
        end.

      Equations(noeqns) match_chunk {Œ£ : LCtx} (c1 c2 : Chunk Œ£) : List Formula Œ£ :=
        match_chunk (chunk_user p1 vs1) (chunk_user p2 vs2)
        with eq_dec p1 p2 => {
          match_chunk (chunk_user p1 vs1) (chunk_user ?(p1) vs2) (left eq_refl) := formula_eqs_ctx vs1 vs2;
          match_chunk (chunk_user p1 vs1) (chunk_user p2 vs2) (right _) :=
            cons (formula_bool (term_val ty_bool false)) nil
        };
        match_chunk (chunk_ptsreg r1 t1) (chunk_ptsreg r2 t2)
        with eq_dec_het r1 r2 => {
          match_chunk (chunk_ptsreg r1 v1) (chunk_ptsreg ?(r1) v2) (left eq_refl) := cons (formula_eq v1 v2) nil;
          match_chunk (chunk_ptsreg r1 v1) (chunk_ptsreg r2 v2) (right _)      :=
            cons (formula_bool (term_val ty_bool false)) nil
        };
        match_chunk (chunk_conj c11 c12) (chunk_conj c21 c22) :=
          app (match_chunk c11 c21) (match_chunk c12 c22);
        match_chunk (chunk_wand c11 c12) (chunk_wand c21 c22) :=
          app (match_chunk c11 c21) (match_chunk c12 c22);
        match_chunk _ _  := cons (formula_bool (term_val ty_bool false)) nil.

      Lemma inst_match_chunk {Œ£ : LCtx} (c1 c2 : Chunk Œ£) (Œπ : Valuation Œ£) :
        instpc (match_chunk c1 c2) Œπ <-> inst c1 Œπ = inst c2 Œπ.
      Proof.
        revert c2.
        induction c1 as [p1 ts1|œÉ1 r1 t1|c11 IHc11 c12 IHc12|c11 IHc11 c12 IHc12];
          intros [p2 ts2|œÉ2 r2 t2|c21 c22|c21 c22]; cbn; rewrite ?inst_pathcondition_cons;
            try (split; intros Heq; cbn in Heq; destruct_conjs; discriminate);
            change (inst_chunk ?c ?Œπ) with (inst c Œπ).
        - split.
          + destruct (eq_dec p1 p2) as [Heqp|Hneqp].
            * destruct Heqp; cbn. rewrite inst_formula_eqs_ctx. intuition.
            * cbn. intros []. discriminate.
          + remember (inst ts1 Œπ) as vs1.
            remember (inst ts2 Œπ) as vs2.
            intros Heq. dependent elimination Heq.
            rewrite EqDec.eq_dec_refl. cbn.
            rewrite inst_formula_eqs_ctx.
            subst. auto.
        - split.
          + destruct (eq_dec_het r1 r2).
            * dependent elimination e; cbn.
              now intros [-> _].
            * cbn. intros []. discriminate.
          + remember (inst t1 Œπ) as v1.
            remember (inst t2 Œπ) as v2.
            intros Heq. dependent elimination Heq.
            unfold eq_dec_het.
            rewrite EqDec.eq_dec_refl. cbn.
            subst. split; auto.
        - rewrite inst_pathcondition_app, IHc11, IHc12.
          split; [intuition|].
          generalize (inst c11 Œπ), (inst c12 Œπ), (inst c21 Œπ), (inst c22 Œπ).
          clear. intros * Heq. dependent elimination Heq; auto.
        - rewrite inst_pathcondition_app, IHc11, IHc12.
          split; [intuition|].
          generalize (inst c11 Œπ), (inst c12 Œπ), (inst c21 Œπ), (inst c22 Œπ).
          clear. intros * Heq. dependent elimination Heq; auto.
      Qed.

      Section ConsumePreciseUser.

        Context {Œ£} (p : ùëØ) {ŒîI ŒîO : Ctx Ty} (prec : ùëØ_Ty p = ŒîI ‚ñª‚ñª ŒîO) (tsI : Env (Term Œ£) ŒîI) (tsO : Env (Term Œ£) ŒîO).

        Equations(noeqns) match_chunk_user_precise (c : Chunk Œ£) : option (List Formula Œ£) :=
        match_chunk_user_precise (chunk_user p' ts')
        with eq_dec p p' => {
          match_chunk_user_precise (chunk_user ?(p) ts') (left eq_refl) :=
            match env.catView (rew prec in ts') with
            | env.isCat tsI' tsO' =>
                if env.eqb_hom Term_eqb tsI tsI'
                then Some (formula_eqs_ctx tsO tsO')
                else None
            end;
          match_chunk_user_precise (chunk_user p' ts') (right _) := None
        };
        match_chunk_user_precise _ := None.

        Fixpoint find_chunk_user_precise (h : SHeap Œ£) : option (SHeap Œ£ * List Formula Œ£) :=
          match h with
          | nil => None
          | cons c h' =>
              match match_chunk_user_precise c with
              | Some eqs => Some (if is_duplicable p then cons c h' else h', eqs)
              | None => option_map (base.prod_map (cons c) id) (find_chunk_user_precise h')
              end
          end.

      End ConsumePreciseUser.

      Section ConsumePrecisePtsreg.

        Context {Œ£ œÉ} (r : ùëπùë¨ùëÆ œÉ) (t : Term Œ£ œÉ).

        Equations(noeqns) match_chunk_ptsreg_precise (c : Chunk Œ£) : option (Formula Œ£) :=
        match_chunk_ptsreg_precise (chunk_ptsreg r' t')
        with eq_dec_het r r' => {
          match_chunk_ptsreg_precise (chunk_ptsreg ?(r) t') (left eq_refl) := Some (formula_eq t t');
          match_chunk_ptsreg_precise (chunk_ptsreg r' t') (right _) := None
        };
        match_chunk_ptsreg_precise _ := None.

        Fixpoint find_chunk_ptsreg_precise (h : SHeap Œ£) : option (SHeap Œ£ * List Formula Œ£) :=
          match h with
          | nil => None
          | cons c h' =>
              match match_chunk_ptsreg_precise c with
              | Some fml => Some (h', cons fml nil)
              | None => option_map (base.prod_map (cons c) id) (find_chunk_ptsreg_precise h')
              end
          end.

      End ConsumePrecisePtsreg.

      Definition try_consume_chunk_precise {Œ£} (h : SHeap Œ£) (c : Chunk Œ£) : option (SHeap Œ£ * List Formula Œ£) :=
        match c with
        | chunk_user p ts =>
            match ùëØ_precise p with
            | Some (MkPrecise ŒîI ŒîO Œîeq) =>
                match env.catView (rew Œîeq in ts) with
                | env.isCat tsI tsO => find_chunk_user_precise Œîeq tsI tsO h
                end
            | None => None
            end
        | chunk_ptsreg r t => find_chunk_ptsreg_precise r t h
        | _ => None
        end.

      Definition consume_chunk {Œì} :
        ‚ä¢ Chunk -> SMut Œì Œì Unit.
      Proof.
        intros w0 c.
        eapply bind.
        apply get_heap.
        intros w1 œâ01 h.
        pose proof (peval_chunk (persist c œâ01)) as c1. clear c.
        destruct (try_consume_chunk_exact h c1) as [h'|].
        { apply put_heap. apply h'. }
        destruct (try_consume_chunk_precise h c1) as [[h' eqs]|].
        { eapply bind_right.
          apply put_heap. apply h'.
          intros w2 œâ12.
          apply assert_formulas.
          apply (persist (A := List Formula) eqs œâ12).
        }
        { intros _ Œ¥1 h1.
          apply
            (SymProp.error
               (EMsgHere
                  {| debug_consume_chunk_program_context := Œì;
                     debug_consume_chunk_pathcondition := wco w1;
                     debug_consume_chunk_localstore := Œ¥1;
                     debug_consume_chunk_heap := h1;
                     debug_consume_chunk_chunk := c1
                  |})).
        }
      Defined.

      Definition consume_chunk_angelic {Œì} :
        ‚ä¢ Chunk -> SMut Œì Œì Unit.
      Proof.
        intros w0 c.
        eapply bind.
        apply get_heap.
        intros w1 œâ01 h.
        pose proof (peval_chunk (persist c œâ01)) as c1. clear c.
        destruct (try_consume_chunk_exact h c1) as [h'|].
        { apply put_heap. apply h'. }
        destruct (try_consume_chunk_precise h c1) as [[h' eqs]|].
        { eapply bind_right.
          apply put_heap. apply h'.
          intros w2 œâ12.
          apply assert_formulas.
          apply (persist (A := List Formula) eqs œâ12).
        }
        { eapply bind.
          refine (angelic_list
                    (A := Pair Chunk SHeap)
                    (fun Œ¥ h =>
                       {| debug_consume_chunk_program_context := Œì;
                          debug_consume_chunk_pathcondition := wco w1;
                          debug_consume_chunk_localstore := Œ¥;
                          debug_consume_chunk_heap := h;
                          debug_consume_chunk_chunk := c1
                        |})
                    (heap_extractions h)).
          intros w2 œâ12 [c' h'].
          eapply bind_right.
          apply assert_formulas.
          apply (match_chunk (persist c1 œâ12) c').
          intros w3 œâ23.
          apply put_heap.
          apply (persist (A := SHeap) h' œâ23).
        }
      Defined.

      (* Definition smut_leakcheck {Œì Œ£} : SMut Œì Œì Unit Œ£ := *)
      (*   smut_get_heap >>= fun _ _ h => *)
      (*   match h with *)
      (*   | nil => smut_pure tt *)
      (*   | _   => smut_error "SMut.leakcheck" "Heap leak" h *)
      (*   end. *)

      Definition produce {Œì} :
        ‚ä¢ Assertion -> ‚ñ°(SMut Œì Œì Unit).
      Proof.
        refine (fix produce w0 asn {struct asn} := _).
        destruct asn.
        - apply (box_assume_formula fml).
        - apply (produce_chunk <$> persist c).
        - apply (produce_chunk <$> persist c).
        - apply (demonic_match_bool <$> persist__term b <*> four (produce _ asn1) <*> four (produce _ asn2)).
        - intros w1 œâ01.
          apply (demonic_match_enum
                    (persist__term k œâ01)
                    (fun EK : ùë¨ùë≤ E => four (produce w0 (alts EK)) œâ01)).
        - refine (demonic_match_sum (AT := Unit) (Œì1 := Œì) (Œì2 := Œì) xl xr <$> persist__term s <*> four _ <*> four _).
          intros w1 œâ01 t1.
          apply (produce (wsnoc w0 (xl‚à∑œÉ)) asn1).
          apply (acc_snoc_left œâ01 (xl‚à∑œÉ) t1).
          intros w1 œâ01 t1.
          apply (produce (wsnoc w0 (xr‚à∑œÑ)) asn2).
          apply (acc_snoc_left œâ01 (xr‚à∑œÑ) t1).
        - apply (box_demonic_match_list xh xt s).
          + apply (produce _ asn1).
          + intros w1 œâ01 thead ttail.
            apply (produce (wsnoc (wsnoc w0 (xh‚à∑_)) (xt‚à∑_)) asn2 w1).
            apply (acc_snoc_left (acc_snoc_left œâ01 (xh‚à∑_) thead) (xt‚à∑_) ttail).
        - apply (box_demonic_match_prod xl xr s).
          intros w1 œâ01 t1 t2.
          apply (produce (wsnoc (wsnoc w0 (xl‚à∑œÉ1)) (xr‚à∑œÉ2)) asn w1).
          apply (acc_snoc_left (acc_snoc_left œâ01 (xl‚à∑œÉ1) t1) (xr‚à∑œÉ2) t2).
        - apply (box_demonic_match_tuple id p s).
          intros w1 œâ01 ts.
          apply (produce (wcat w0 Œî) asn w1).
          apply acc_cat_left; auto.
        - apply (box_demonic_match_record id p s).
          intros w1 œâ01 ts.
          apply (produce (wcat w0 Œî) asn w1).
          apply acc_cat_left; auto.
        - apply (box_demonic_match_union id alt__pat s).
          intros UK w1 œâ01 ts.
          apply (produce (wcat w0 (alt__ctx UK)) (alt__rhs UK) w1).
          apply acc_cat_left; auto.
        - apply (bind_right <$> produce _ asn1 <*> four (produce _ asn2)).
        - apply (demonic_binary <$> produce _ asn1 <*> produce _ asn2).
        - intros w1 œâ01.
          eapply bind.
          apply (@demonic _ (Some œÇ) œÑ).
          intros w2 œâ12 t2.
          apply (produce (wsnoc w0 (œÇ‚à∑œÑ)) asn w2).
          apply (acc_snoc_left (acc_trans œâ01 œâ12) (œÇ‚à∑œÑ) t2).
        - intros w1 œâ01.
          apply (debug (DT := DebugAsn)).
          intros Œ¥ h.
          apply (MkDebugAsn (wco w1) Œ¥ h).
          apply pure.
          constructor.
      Defined.

      Definition consume {Œì} :
        ‚ä¢ Assertion -> ‚ñ°(SMut Œì Œì Unit).
      Proof.
        refine (fix consume w0 asn {struct asn} := _).
        destruct asn.
        - apply (box_assert_formula fml).
        - apply (consume_chunk <$> persist c).
        - apply (consume_chunk_angelic <$> persist c).
        - apply (angelic_match_bool <$> persist__term b <*> four (consume _ asn1) <*> four (consume _ asn2)).
        - intros w1 œâ01.
          apply (angelic_match_enum
                    (persist__term k œâ01)
                    (fun EK : ùë¨ùë≤ E => four (consume w0 (alts EK)) œâ01)).
        - refine (angelic_match_sum (AT := Unit) (Œì1 := Œì) (Œì2 := Œì) xl xr <$> persist__term s <*> four _ <*> four _).
          intros w1 œâ01 t1.
          apply (consume (wsnoc w0 (xl‚à∑œÉ)) asn1).
          apply (acc_snoc_left œâ01 (xl‚à∑œÉ) t1).
          intros w1 œâ01 t1.
          apply (consume (wsnoc w0 (xr‚à∑œÑ)) asn2).
          apply (acc_snoc_left œâ01 (xr‚à∑œÑ) t1).
        - apply (box_angelic_match_list xh xt s).
          + apply (consume _ asn1).
          + intros w1 œâ01 thead ttail.
            apply (consume (wsnoc (wsnoc w0 (xh‚à∑_)) (xt‚à∑_)) asn2 w1).
            apply (acc_snoc_left (acc_snoc_left œâ01 (xh‚à∑_) thead) (xt‚à∑_) ttail).
        - apply (box_angelic_match_prod xl xr s).
          intros w1 œâ01 t1 t2.
          apply (consume (wsnoc (wsnoc w0 (xl‚à∑œÉ1)) (xr‚à∑œÉ2)) asn w1).
          apply (acc_snoc_left (acc_snoc_left œâ01 (xl‚à∑œÉ1) t1) (xr‚à∑œÉ2) t2).
        - apply (box_angelic_match_tuple id p s).
          intros w1 œâ01 ts.
          apply (consume (wcat w0 Œî) asn w1).
          apply acc_cat_left; auto.
        - apply (box_angelic_match_record id p s).
          intros w1 œâ01 ts.
          apply (consume (wcat w0 Œî) asn w1).
          apply acc_cat_left; auto.
        - apply (box_angelic_match_union id alt__pat s).
          intros UK w1 œâ01 ts.
          apply (consume (wcat w0 (alt__ctx UK)) (alt__rhs UK) w1).
          apply acc_cat_left; auto.
        - apply (bind_right <$> consume _ asn1 <*> four (consume _ asn2)).
        - apply (angelic_binary <$> consume _ asn1 <*> consume _ asn2).
        - intros w1 œâ01.
          eapply bind.
          apply (@angelic _ (Some œÇ) œÑ).
          intros w2 œâ12 t2.
          apply (consume (wsnoc w0 (œÇ‚à∑œÑ)) asn w2).
          apply (acc_snoc_left (acc_trans œâ01 œâ12) (œÇ‚à∑œÑ) t2).
        - intros w1 œâ01.
          apply (debug (DT := DebugAsn)).
          intros Œ¥ h.
          apply (MkDebugAsn (wco w1) Œ¥ h).
          apply pure.
          constructor.
      Defined.

    End ProduceConsume.

    Section Exec.

      Variable cfg : Config.

      Definition call_contract {Œì Œî œÑ} (c : SepContract Œî œÑ) :
        ‚ä¢ SStore Œî -> SMut Œì Œì (STerm œÑ).
      Proof.
        destruct c as [Œ£e Œ¥e req result ens].
        intros w0 args.
        eapply bind.
        apply (angelic_ctx id Œ£e).
        intros w1 œâ01 evars.
        eapply bind_right.
        apply (assert_formulas
                 (* {| *)
                 (*   msg_function := "SMut.call"; *)
                 (*   msg_message := "argument pattern match"; *)
                 (*   msg_program_context := Œì; *)
                 (*   msg_localstore := subst Œ¥0 œâ01; *)
                 (*   msg_heap := subst h0 œâ01; *)
                 (*   msg_pathcondition := wco w1; *)
                 (* |} *) (formula_eqs_nctx (subst Œ¥e evars) (persist args œâ01))).
        intros w2 œâ12.
        eapply bind_right.
        apply (consume (w := @MkWorld Œ£e nil) req).
        refine (acc_trans _ œâ12).
        constructor 2 with evars. cbn. constructor.
        intros w3 œâ23.
        eapply bind.
        apply (demonic (Some result)).
        intros w4 œâ34 res.
        eapply bind_right.
        apply (produce
                 (w := @MkWorld (Œ£e ‚ñª result‚à∑œÑ) nil)
                 ens).
        constructor 2 with (sub_snoc (persist (A := Sub _) evars (acc_trans œâ12 (acc_trans œâ23 œâ34))) (result‚à∑œÑ) res).
        cbn. constructor.
        intros w5 œâ45. clear - res œâ45.
        apply pure.
        apply (persist__term res œâ45).
      Defined.

      Definition call_lemma {Œì Œî} (lem : Lemma Œî) :
        ‚ä¢ SStore Œî -> SMut Œì Œì Unit.
      Proof.
        destruct lem as [Œ£e Œ¥e req ens].
        intros w0 args.
        eapply bind.
        apply (angelic_ctx id Œ£e).
        intros w1 œâ01 evars.
        eapply bind_right.
        apply (assert_formulas
                 (* {| *)
                 (*   msg_function := "SMut.call"; *)
                 (*   msg_message := "argument pattern match"; *)
                 (*   msg_program_context := Œì; *)
                 (*   msg_localstore := subst Œ¥0 œâ01; *)
                 (*   msg_heap := subst h0 œâ01; *)
                 (*   msg_pathcondition := wco w1; *)
                 (* |} *) (formula_eqs_nctx (subst Œ¥e evars) (persist args œâ01))).
        intros w2 œâ12.
        eapply bind_right.
        apply (consume (w := @MkWorld Œ£e nil) req).
        refine (acc_trans _ œâ12).
        constructor 2 with evars. cbn. constructor.
        intros w3 œâ23.
        apply (produce
                 (w := @MkWorld Œ£e nil)
                 ens).
        constructor 2 with (persist (A := Sub _) evars (acc_trans œâ12 œâ23)).
        cbn. constructor.
      Defined.

      Definition call_contract_debug {Œì Œî œÑ} (f : ùë≠ Œî œÑ) (c : SepContract Œî œÑ) :
        ‚ä¢ SStore Œî -> SMut Œì Œì (STerm œÑ) :=
        fun w0 Œ¥Œî =>
          let o := call_contract c Œ¥Œî in
          if config_debug_function cfg f
          then
            debug
              (fun Œ¥ h => {| debug_call_function_parameters := Œî;
                             debug_call_function_result_type := œÑ;
                             debug_call_function_name := f;
                             debug_call_function_contract := c;
                             debug_call_function_arguments := Œ¥Œî;
                             debug_call_program_context := Œì;
                             debug_call_pathcondition := wco w0;
                             debug_call_localstore := Œ¥;
                             debug_call_heap := h|})
              o
          else o.

      Definition Exec := forall Œì œÑ (s : Stm Œì œÑ), ‚ä¢ SMut Œì Œì (STerm œÑ).

      Section ExecAux.

        Variable rec : Exec.

        Fixpoint exec_aux {Œì œÑ} (s : Stm Œì œÑ) {struct s} :
          ‚ä¢ SMut Œì Œì (STerm œÑ).
        Proof.
          intros w0; destruct s.
          - apply pure. apply (term_val œÑ v).
          - apply (eval_exp e).
          - eapply bind. apply (exec_aux _ _ s1).
            intros w1 œâ01 t1.
            eapply (pushpop t1).
            apply (exec_aux _ _ s2).
          - eapply (pushspops (lift Œ¥)).
            apply (exec_aux _ _ s).
          - eapply bind.
            apply (exec_aux _ _ s).
            intros w1 œâ01 t.
            eapply bind_right.
            apply (assign x t).
            intros w2 œâ12.
            apply pure.
            apply (subst (T := STerm œÑ) t (sub_acc œâ12)).
          - eapply bind.
            apply (eval_exps es).
            intros w1 œâ01 args.
            destruct (CEnv f) as [c|].
            + apply (call_contract_debug f c args).
            + intros POST Œ¥Œì. refine (rec (FunDef f) _ args).
              intros w2 œâ12 res _. apply POST. apply œâ12.
              apply res. refine (persist Œ¥Œì œâ12).
          - rename Œ¥ into Œ¥Œî.
            eapply bind.
            apply get_local.
            intros w1 œâ01 Œ¥1.
            eapply bind_right.
            apply (put_local (lift Œ¥Œî)).
            intros w2 œâ12.
            eapply bind.
            apply (exec_aux _ _ s).
            intros w3 œâ23 t.
            eapply bind_right.
            apply put_local.
            apply (persist (A := SStore _) Œ¥1 (acc_trans œâ12 œâ23)).
            intros w4 œâ34.
            apply pure.
            apply (persist__term t œâ34).
          - eapply bind.
            apply (eval_exps es).
            intros w1 œâ01 args.
            apply (call_contract (CEnvEx f) args).
          - eapply bind_right.
            eapply bind.
            apply (eval_exps es).
            intros w1 œâ01 args.
            apply (call_lemma (LEnv l) args).
            intros w2 œâ12.
            apply (exec_aux _ _ s).
          - eapply bind. apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_bool t).
            + intros w2 œâ12.
              apply (exec_aux _ _ s1).
            + intros w2 œâ12.
              apply (exec_aux _ _ s2).
          - eapply bind_right.
            apply (exec_aux _ _ s1).
            intros w1 œâ01.
            apply (exec_aux _ _ s2).
          - eapply bind. apply (eval_exp e1).
            intros w1 œâ01 t.
            eapply bind_right.
            apply (assume_formula (formula_bool t)).
            intros w2 œâ12.
            apply (exec_aux _ _ s).
          - apply block.
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_list (ùëøtoùë∫ xh) (ùëøtoùë∫ xt) t).
            + intros w2 œâ12.
              apply (exec_aux _ _ s1).
            + intros w2 œâ12 thead ttail.
              eapply (pushspops (env.snoc (env.snoc env.nil (xh‚à∑_) thead) (xt‚à∑_) ttail)).
              apply (exec_aux _ _ s2).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_sum (ùëøtoùë∫ xinl) (ùëøtoùë∫ xinr) t).
            + intros w2 œâ12 tl.
              eapply (pushpop tl).
              apply (exec_aux _ _ s1).
            + intros w2 œâ12 tr.
              eapply (pushpop tr).
              apply (exec_aux _ _ s2).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_prod (ùëøtoùë∫ xl) (ùëøtoùë∫ xr) t).
            intros w2 œâ12 t1 t2.
            eapply (pushspops (env.snoc (env.snoc env.nil (_‚à∑_) t1) (_‚à∑_) t2)).
            apply (exec_aux _ _ s).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_enum t).
            intros EK.
            intros w2 œâ12.
            apply (exec_aux _ _ (alts EK)).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_tuple ùëøtoùë∫ p t).
            intros w2 œâ12 ts.
            eapply (pushspops ts).
            apply (exec_aux _ _ s).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_union ùëøtoùë∫ alt__pat t).
            intros UK w2 œâ12 ts.
            eapply (pushspops ts).
            apply (exec_aux _ _ (alt__rhs UK)).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_record ùëøtoùë∫ p t).
            intros w2 œâ12 ts.
            eapply (pushspops ts).
            apply (exec_aux _ _ s).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_bvec t).
            intros bs w2 œâ12.
            apply (exec_aux _ _ (rhs bs)).
          - eapply bind.
            apply (angelic None œÑ).
            intros w1 œâ01 t.
            eapply bind_right.
            apply (T (consume (asn_chunk (chunk_ptsreg reg t)))).
            intros w2 œâ12.
            eapply bind_right.
            apply (T (produce (asn_chunk (chunk_ptsreg reg (persist__term t œâ12))))).
            intros w3 œâ23.
            apply pure.
            apply (persist__term t (acc_trans œâ12 œâ23)).
          - eapply bind.
            eapply (angelic None œÑ).
            intros w1 œâ01 told.
            eapply bind_right.
            apply (T (consume (asn_chunk (chunk_ptsreg reg told)))).
            intros w2 œâ12.
            eapply bind.
            apply (eval_exp e).
            intros w3 œâ23 tnew.
            eapply bind_right.
            apply (T (produce (asn_chunk (chunk_ptsreg reg tnew)))).
            intros w4 œâ34.
            apply pure.
            apply (persist__term tnew œâ34).
          - apply (error "SMut.exec" "stm_bind not supported" tt).
          - apply (debug (DT := DebugStm)).
            intros Œ¥0 h0.
            econstructor.
            apply s.
            apply (wco w0).
            apply Œ¥0.
            apply h0.
            apply (exec_aux _ _ s).
        Defined.

      End ExecAux.

      Fixpoint exec (inline_fuel : nat) : Exec :=
        match inline_fuel with
        | O   => fun _ _ _ _ => error "SMut.exec" "out of fuel for inlining" tt
        | S n => @exec_aux (@exec n)
        end.
      Global Arguments exec _ {_ _} _ {w} _ _ _.

      Import Notations.

      Variable inline_fuel : nat.

      Definition exec_contract {Œî œÑ} (c : SepContract Œî œÑ) (s : Stm Œî œÑ) :
        SMut Œî Œî Unit {| wctx := sep_contract_logic_variables c; wco := [] |} :=
        match c with
        | MkSepContract _ _ _ _ req result ens =>
          produce (w:=@MkWorld _ _) req acc_refl >> fun w1 œâ01 =>
          exec inline_fuel s >>= fun w2 œâ12 res =>
          consume
            (w:=wsnoc (@MkWorld _ []) (result‚à∑œÑ)%ctx)
            ens
            (acc_snoc_left (acc_trans œâ01 œâ12) (result‚à∑œÑ)%ctx res)
        end.

      Definition exec_contract_path {Œî : PCtx} {œÑ : Ty} (c : SepContract Œî œÑ) (s : Stm Œî œÑ) : ùïä wnil :=
        demonic_close (exec_contract c s (fun w1 œâ01 _ Œ¥1 h1 => SymProp.block) (sep_contract_localstore c) nil).

      Definition ValidContractWithConfig {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) : Prop :=
        VerificationCondition (prune (solve_uvars (prune (solve_evars (prune (exec_contract_path c body)))))).

    End Exec.

    Definition ok {Œ£} (p : ùïä Œ£) : bool :=
      match prune p with
      | SymProp.block => true
      | _           => false
      end.

    Lemma ok_sound {Œ£} (p : ùïä Œ£) (Œπ : Valuation Œ£) :
      is_true (ok p) -> safe p Œπ.
    Proof.
      rewrite <- prune_sound. unfold ok.
      generalize (prune p) as q. clear. intros q.
      destruct q; try discriminate; cbn; auto.
    Qed.

    Definition ValidContract {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) : Prop :=
      VerificationCondition (prune (solve_uvars (prune (solve_evars (prune (exec_contract_path default_config 1 c body)))))).

    Definition ValidContractReflect {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) : Prop :=
      is_true (ok (prune (solve_uvars (prune (solve_evars (prune (exec_contract_path default_config 1 c body))))))).

    Lemma validcontract_reflect_sound {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) :
      ValidContractReflect c body ->
      ValidContract c body.
    Proof.
      unfold ValidContractReflect, ValidContract. intros Hok.
      apply (ok_sound _ env.nil) in Hok. now constructor.
    Qed.

  End SMut.

End MutatorsOn.

Module MakeExecutor
  (Import B    : Base)
  (Import SPEC : Specification B)
  (Import SOLV : SolverKit B SPEC).

  Include MutatorsOn B SPEC SOLV.

End MakeExecutor.
