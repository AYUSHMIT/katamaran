(******************************************************************************)
(* Copyright (c) 2020 Dominique Devriese, Georgy Lukyanov,                    *)
(*   Sander Huyghebaert, Steven Keuchel                                       *)
(* All rights reserved.                                                       *)
(*                                                                            *)
(* Redistribution and use in source and binary forms, with or without         *)
(* modification, are permitted provided that the following conditions are     *)
(* met:                                                                       *)
(*                                                                            *)
(* 1. Redistributions of source code must retain the above copyright notice,  *)
(*    this list of conditions and the following disclaimer.                   *)
(*                                                                            *)
(* 2. Redistributions in binary form must reproduce the above copyright       *)
(*    notice, this list of conditions and the following disclaimer in the     *)
(*    documentation and/or other materials provided with the distribution.    *)
(*                                                                            *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  *)
(* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR *)
(* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR          *)
(* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,      *)
(* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *)
(* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *)
(* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *)
(* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *)
(* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *)
(* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               *)
(******************************************************************************)

From Coq Require Import
     Arith.PeanoNat
     Bool.Bool
     Classes.Morphisms
     Classes.Morphisms_Prop
     Classes.Morphisms_Relations
     Classes.RelationClasses
     Relations.Relation_Definitions
     Lists.List
     Program.Tactics
     Strings.String
     ZArith.ZArith
     micromega.Lia.
From Coq Require
     Classes.CRelationClasses.
From Equations Require Import Equations.

From Katamaran Require Import
     Sep.Spec
     Syntax.

From stdpp Require
     base.

Import CtxNotations.
Import EnvNotations.
Import ListNotations.

Set Implicit Arguments.

Delimit Scope mutator_scope with mut.
Delimit Scope smut_scope with smut.

Module Mutators
       (termkit : TermKit)
       (progkit : ProgramKit termkit)
       (assertkit : AssertionKit termkit progkit)
       (symcontractkit : SymbolicContractKit termkit progkit assertkit).

  Export symcontractkit.
  Import Entailment.
  Import ModalNotations.
  Open Scope modal.

  Module WorldInstance.

    Record WInstance (w : World) : Set :=
      MkWInstance
        { Œπassign :> SymInstance w;
          Œπvalid  : instpc (wco w) Œπassign;
        }.

    Program Definition winstance_formula {w} (Œπ : WInstance w) (fml : Formula w) (p : inst (A := Prop) fml Œπ) :
      WInstance (wformula w fml) :=
      {| Œπassign := Œπ; |}.
    Next Obligation.
    Proof.
      intros. cbn.
      apply inst_pathcondition_cons. split; auto.
      apply Œπvalid.
    Qed.

    Program Definition winstance_snoc {w} (Œπ : WInstance w) {b : ùë∫ ‚à∑ Ty} (v : Lit (type b)) :
      WInstance (wsnoc w b) :=
      {| Œπassign := env_snoc (Œπassign Œπ) b v; |}.
    Next Obligation.
    Proof.
      intros. unfold wsnoc. cbn [wctx wco].
      rewrite inst_subst, inst_sub_wk1.
      apply Œπvalid.
    Qed.

    (* Fixpoint winstance_cat {Œ£} (Œπ : WInstance Œ£) {Œî} (ŒπŒî : SymInstance Œî) : *)
    (*   WInstance (wcat Œ£ Œî). *)
    (* Proof. *)
    (*   destruct ŒπŒî; cbn. *)
    (*   - apply Œπ. *)
    (*   - apply winstance_snoc. *)
    (*     apply winstance_cat. *)
    (*     apply Œπ. *)
    (*     apply ŒπŒî. *)
    (*     apply db. *)
    (* Defined. *)

    Program Definition winstance_subst {w} (Œπ : WInstance w) {x œÉ} {xIn : x‚à∑œÉ ‚àà w}
      (t : Term (w - x‚à∑œÉ) œÉ) (p : inst t (env_remove (x‚à∑œÉ) (Œπassign Œπ) xIn) = env_lookup (Œπassign Œπ) xIn) :
      WInstance (wsubst w x t) :=
      @MkWInstance (wsubst w x t) (env_remove _ (Œπassign Œπ) xIn) _.
    Next Obligation.
      intros * p. cbn. rewrite inst_subst, <- inst_sub_shift in *.
      rewrite inst_sub_single_shift; auto using Œπvalid.
    Qed.

    Program Definition instacc {w0 w1} (œâ01 : w0 ‚äí w1) : WInstance w1 -> WInstance w0 :=
      match œâ01 in (_ ‚äí w) return (WInstance w -> WInstance w0) with
      | acc_refl            => fun Œπ => Œπ
      | @acc_sub _ w1 Œ∂ ent => fun Œπ1 => {| Œπassign := inst Œ∂ Œπ1; |}
      end.
    Next Obligation.
    Proof.
      intros. specialize (ent Œπ1).
      rewrite <- inst_subst.
      apply ent.
      apply Œπvalid.
    Qed.

  End WorldInstance.

  Definition valid_box {A} :
    (‚ä¢ A) -> (‚ä¢ ‚ñ°A) :=
    fun a w0 w1 œâ01 => a w1.
  Global Arguments valid_box {A} a {w} [w1].

  Definition PROP : TYPE :=
    fun _ => Prop.


  Import SymProp.

  Module Postprocessing.

    Definition angelic_binary_prune {Œ£} (p1 p2 : ùïä Œ£) : ùïä Œ£ :=
      match p1 , p2 with
      | block   , _       => block
      | _       , block   => block
      | error _ , _       => p2
      | _       , error _ => p1
      | _       , _       => angelic_binary p1 p2
      end.

    Definition demonic_binary_prune {Œ£} (p1 p2 : ùïä Œ£) : ùïä Œ£ :=
      match p1 , p2 with
      | block   , _       => p2
      | _       , block   => p1
      | error s , _       => error s
      | _       , error s => error s
      | _       , _       => demonic_binary p1 p2
      end.

    Definition assertk_prune {Œ£} (fml : Formula Œ£) (msg : Message Œ£) (p : ùïä Œ£) : ùïä Œ£ :=
      match p with
      | error s => @error Œ£ s
      | _       => assertk fml msg p
      end.
    Global Arguments assertk_prune {Œ£} fml msg p.

    Definition assumek_prune {Œ£} (fml : Formula Œ£) (p : ùïä Œ£) : ùïä Œ£ :=
      match p with
      | block => block
      | _     => assumek fml p
      end.
    Global Arguments assumek_prune {Œ£} fml p.

    Definition angelicv_prune {Œ£} b (p : ùïä (Œ£ ‚ñª b)) : ùïä Œ£ :=
      match p with
      | error msg => error (EMsgThere msg)
      | _         => angelicv b p
      end.

    Definition demonicv_prune {Œ£} b (p : ùïä (Œ£ ‚ñª b)) : ùïä Œ£ :=
      (* match @occurs_check_spath AT _ (Œ£ ‚ñª b) b inctx_zero o with *)
      (* | Some o => o *)
      (* | None   => demonicv b o *)
      (* end. *)
      match p with
      | block => block
      | _     => demonicv b p
      end.

    Definition assume_vareq_prune {Œ£} {x œÉ} {xIn : x‚à∑œÉ ‚àà Œ£}
      (t : Term (Œ£ - x‚à∑œÉ) œÉ) (k : ùïä (Œ£ - x‚à∑œÉ)) : ùïä Œ£ :=
      match k with
      | block => block
      | _     => assume_vareq x t k
      end.
    Global Arguments assume_vareq_prune {Œ£} x {œÉ xIn} t k.

    Definition assert_vareq_prune {Œ£} {x œÉ} {xIn : x‚à∑œÉ ‚àà Œ£}
      (t : Term (Œ£ - x‚à∑œÉ) œÉ) (msg : Message (Œ£ - x‚à∑œÉ)) (k : ùïä (Œ£ - x‚à∑œÉ)) : ùïä Œ£ :=
      match k with
      | error emsg => error (shift_emsg xIn emsg)
      | _          => assert_vareq x t msg k
      end.
    Global Arguments assert_vareq_prune {Œ£} x {œÉ xIn} t msg k.

    Fixpoint prune {Œ£} (p : ùïä Œ£) : ùïä Œ£ :=
      match p with
      | error msg => error msg
      | block => block
      | angelic_binary o1 o2 =>
        angelic_binary_prune (prune o1) (prune o2)
      | demonic_binary o1 o2 =>
        demonic_binary_prune (prune o1) (prune o2)
      | assertk fml msg o =>
        assertk_prune fml msg (prune o)
      | assumek fml o =>
        assumek_prune fml (prune o)
      | angelicv b o =>
        angelicv_prune (prune o)
      | demonicv b o =>
        demonicv_prune (prune o)
      | assert_vareq x t msg k =>
        assert_vareq_prune x t msg (prune k)
      | assume_vareq x t k =>
        assume_vareq_prune x t (prune k)
      | debug d k =>
        debug d (prune k)
      end.

    Lemma prune_angelic_binary_sound {Œ£} (p1 p2 : ùïä Œ£) (Œπ : SymInstance Œ£) :
      safe (angelic_binary_prune p1 p2) Œπ <-> safe (angelic_binary p1 p2) Œπ.
    Proof.
      destruct p1; cbn; auto.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
      - intuition.
      - destruct p2; cbn; auto;
          rewrite ?obligation_equiv; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto;
          rewrite ?obligation_equiv; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
    Qed.

    Lemma prune_demonic_binary_sound {Œ£} (p1 p2 : ùïä Œ£) (Œπ : SymInstance Œ£) :
      safe (demonic_binary_prune p1 p2) Œπ <-> safe (demonic_binary p1 p2) Œπ.
    Proof.
      destruct p1; cbn; auto.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
      - intuition.
      - destruct p2; cbn; auto;
          rewrite ?obligation_equiv; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto;
          rewrite ?obligation_equiv; intuition.
      - destruct p2; cbn; auto; intuition.
      - destruct p2; cbn; auto; intuition.
    Qed.

    Lemma prune_assertk_sound {Œ£} fml msg (p : ùïä Œ£) (Œπ : SymInstance Œ£) :
      safe (assertk_prune fml msg p) Œπ <-> safe (assertk fml msg p) Œπ.
    Proof. destruct p; cbn; rewrite ?obligation_equiv; auto; intuition. Qed.

    Lemma prune_assumek_sound {Œ£} fml (p : ùïä Œ£) (Œπ : SymInstance Œ£) :
      safe (assumek_prune fml p) Œπ <-> safe (assumek fml p) Œπ.
    Proof. destruct p; cbn; auto; intuition. Qed.

    Lemma prune_angelicv_sound {Œ£ b} (p : ùïä (Œ£ ‚ñª b)) (Œπ : SymInstance Œ£) :
      safe (angelicv_prune p) Œπ <-> safe (angelicv b p) Œπ.
    Proof. destruct p; cbn; auto; firstorder. Qed.

    Lemma prune_demonicv_sound {Œ£ b} (p : ùïä (Œ£ ‚ñª b)) (Œπ : SymInstance Œ£) :
      safe (demonicv_prune p) Œπ <-> safe (demonicv b p) Œπ.
    Proof. destruct p; cbn; auto; intuition. Qed.

    Lemma prune_assert_vareq_sound {Œ£ x œÉ} {xIn : x‚à∑œÉ ‚àà Œ£}
      (t : Term (Œ£ - x‚à∑œÉ) œÉ) (msg : Message (Œ£ - x‚à∑œÉ)) (p : ùïä (Œ£ - x‚à∑œÉ)) (Œπ : SymInstance Œ£) :
      safe (assert_vareq_prune x t msg p) Œπ <-> safe (assert_vareq x t msg p) Œπ.
    Proof. destruct p; cbn; auto; intuition. Qed.

    Lemma prune_assume_vareq_sound {Œ£ x œÉ} {xIn : x‚à∑œÉ ‚àà Œ£}
      (t : Term (Œ£ - x‚à∑œÉ) œÉ) (p : ùïä (Œ£ - x‚à∑œÉ)) (Œπ : SymInstance Œ£) :
      safe (assume_vareq_prune x t p) Œπ <-> safe (assume_vareq x t p) Œπ.
    Proof. destruct p; cbn; auto; intuition. Qed.

    Lemma prune_sound {Œ£} (p : ùïä Œ£) (Œπ : SymInstance Œ£) :
      safe (prune p) Œπ <-> safe p Œπ.
    Proof.
      induction p; cbn [prune safe].
      - rewrite prune_angelic_binary_sound; cbn.
        now rewrite IHp1, IHp2.
      - rewrite prune_demonic_binary_sound; cbn.
        now rewrite IHp1, IHp2.
      - auto.
      - auto.
      - rewrite prune_assertk_sound; cbn.
        now rewrite IHp.
      - rewrite prune_assumek_sound; cbn.
        now rewrite IHp.
      - rewrite prune_angelicv_sound; cbn.
        apply base.exist_proper; intros.
        now rewrite IHp.
      - rewrite prune_demonicv_sound; cbn.
        apply base.forall_proper; intros.
        now rewrite IHp.
      - rewrite prune_assert_vareq_sound; cbn.
        now rewrite IHp.
      - rewrite prune_assume_vareq_sound; cbn.
        now rewrite IHp.
      - now rewrite ?debug_equiv.
    Qed.

    Section Util.

      Arguments InCtx_rect [_ _].
      Lemma ctx_remove_inctx_right {B : Set} {Œì Œî : Ctx B} {b : B} (bIn : InCtx b Œî) :
        @ctx_remove B (@ctx_cat B Œì Œî) b (@inctx_cat_right B b Œì Œî bIn) =
        @ctx_cat B Œì (@ctx_remove B Œî b bIn).
      Proof.
        induction bIn using InCtx_rect; cbn.
        - reflexivity.
        - f_equal. auto.
      Defined.

      Lemma exists_and {A : Type} {P : A -> Prop} {Q : Prop} :
        (exists (x : A), P x /\ Q) <-> ((exists (x : A), P x) /\ Q).
      Proof. firstorder. Qed.

      Lemma safe_eq_rect {Œ£ Œ£'} (eq : Œ£ = Œ£') (p : ùïä Œ£) (Œπ : SymInstance Œ£') :
        safe (eq_rect Œ£ ùïä p Œ£' eq) Œπ = safe p (eq_rect Œ£' (fun Œ£ => SymInstance Œ£) Œπ Œ£ (eq_sym eq)).
      Proof.
        now destruct eq.
      Qed.

      (* Lemma env_insert_remove {x : ùë∫} {œÉ : Ty} {Œ£0 Œ£e : LCtx} *)
      (*       (bIn : x :: œÉ ‚àà Œ£e) : *)
      (*   env_insert bIn *)
      (*     (inst t *)
      (*        (eq_rect (Œ£0 ‚ñª‚ñª Œ£e - (x :: œÉ)) (fun Œ£ : LCtx => SymInstance Œ£) (Œπ ‚ñ∫‚ñ∫ env_remove (x :: œÉ) Œπe bIn) *)
      (*           ((Œ£0 ‚ñª‚ñª Œ£e) - (x :: œÉ)) (eq_sym (ctx_remove_inctx_right bIn)))) (env_remove (x :: œÉ) Œπe bIn)) *)
      Lemma inst_eq_rect `{Inst AT A} {Œ£ Œ£'} (t : AT Œ£) (eq : Œ£ = Œ£') (Œπ : SymInstance Œ£'):
        inst (eq_rect Œ£ AT t Œ£' eq) Œπ = inst t (eq_rect Œ£' (fun Œ£ => SymInstance Œ£) Œπ Œ£ (eq_sym eq)).
      Proof.
        now subst.
      Qed.

      Lemma eq_rect_sym1 {A : Type} {P : A -> Type} {a a' : A} (eq : a = a') (v : P a) :
        eq_rect a' P (eq_rect a P v a' eq) a (eq_sym eq) = v.
      Proof.
        now subst.
      Qed.

      Lemma eq_rect_sym2 {A : Type} {P : A -> Type} {a a' : A} (eq : a' = a) (v : P a) :
        eq_rect a' P (eq_rect a P v a' (eq_sym eq)) a eq = v.
      Proof.
        now subst.
      Qed.

      Lemma match_snocView_eq_rect {Œ£1 Œ£2 b} {R : Type} (eq : Œ£1 = Œ£2) (E : SymInstance (Œ£1 ‚ñª b))
        (f : SymInstance Œ£2 -> Lit (type b) -> R) :
        match snocView (eq_rect Œ£1 (fun Œ£ => SymInstance (Œ£ ‚ñª b)) E Œ£2 eq) with
        | isSnoc E v => f E v
        end =
        match snocView E with
        | isSnoc E v => f (eq_rect Œ£1 (fun Œ£ => SymInstance Œ£) E Œ£2 eq) v
        end.
      Proof.
        now destruct eq.
      Qed.

      Lemma snoc_eq_rect {Œ£1 Œ£2 b v} (eq : Œ£1 = Œ£2) (E : SymInstance Œ£1) :
        eq_rect Œ£1 (fun Œ£ => SymInstance Œ£) E Œ£2 eq ‚ñ∫ (b ‚Ü¶ v) =
        eq_rect Œ£1 (fun Œ£ => SymInstance (Œ£ ‚ñª b)) (E ‚ñ∫ (b ‚Ü¶ v)) Œ£2 eq.
      Proof.
        now destruct eq.
      Qed.

      Lemma env_insert_app {x : ùë∫} {œÉ : Ty} {Œ£0 Œ£e : LCtx}
            (bIn : x‚à∑œÉ ‚àà Œ£e) (v : Lit œÉ)
            {Œπ : SymInstance Œ£0} {Œπe : SymInstance (Œ£e - x‚à∑œÉ)} :
            (Œπ ‚ñ∫‚ñ∫ env_insert bIn v Œπe) = env_insert (inctx_cat_right bIn) v (eq_rect (Œ£0 ‚ñª‚ñª Œ£e - x‚à∑œÉ) (fun Œ£ => SymInstance Œ£) (Œπ ‚ñ∫‚ñ∫ Œπe) ((Œ£0 ‚ñª‚ñª Œ£e) - x‚à∑œÉ) (eq_sym (ctx_remove_inctx_right bIn))).
      Proof.
        revert bIn Œπe.
        induction Œ£e; intros bIn Œπe;
          try destruct (Context.nilView bIn).
        cbn [env_insert ctx_remove_inctx_right].
        (* can't destruct Contxt.snocView bIn?*)
        destruct bIn as ([|n] & eq).
        - cbn in eq.
          now subst.
        - cbn in Œπe.
          destruct (snocView Œπe) as (Œπe & v').
          change (ctx_remove_inctx_right {| inctx_at := S n; inctx_valid := eq |})
                 with (f_equal (fun f => f b) (eq_trans eq_refl (f_equal ctx_snoc (@ctx_remove_inctx_right _ Œ£0 Œ£e _ {| inctx_at := n; inctx_valid := eq |})))).
          rewrite eq_trans_refl_l.
          cbn.
          rewrite (eq_sym_map_distr (fun f : ùë∫ ‚à∑ Ty -> LCtx => f b)).
          rewrite eq_sym_map_distr.
          rewrite f_equal_compose.
          rewrite (map_subst_map (P := fun x => SymInstance (ctx_snoc x b)) (fun a : LCtx => a ‚ñª b) (fun _ x => x) ).
          rewrite match_snocView_eq_rect.
          now rewrite IHŒ£e.
      Qed.

      Lemma env_remove_app {x : ùë∫} {œÉ : Ty} {Œ£0 Œ£e : LCtx} (bIn : x‚à∑œÉ ‚àà Œ£e)
        (Œπ : SymInstance Œ£0) (Œπe : SymInstance Œ£e) :
        env_remove (x‚à∑œÉ) (Œπ ‚ñ∫‚ñ∫ Œπe) (inctx_cat_right bIn) =
        eq_rect (Œ£0 ‚ñª‚ñª Œ£e - x‚à∑œÉ) (fun Œ£ : LCtx => SymInstance Œ£) (Œπ ‚ñ∫‚ñ∫ env_remove (x‚à∑œÉ) Œπe bIn)
                 ((Œ£0 ‚ñª‚ñª Œ£e) - x‚à∑œÉ) (eq_sym (ctx_remove_inctx_right bIn)).
      Proof.
        revert bIn Œπe.
        induction Œ£e; intros bIn Œπe; try destruct (Context.nilView bIn).
        destruct (Context.snocView bIn).
        - now destruct (snocView Œπe).
        - destruct (snocView Œπe) as (Œπe & v).
          change (ctx_remove_inctx_right (inctx_succ i))
                 with (f_equal (fun f => f b) (eq_trans eq_refl (f_equal ctx_snoc (@ctx_remove_inctx_right _ Œ£0 Œ£e _ i)))).
          rewrite eq_trans_refl_l.
          cbn.
          rewrite (eq_sym_map_distr (fun f : ùë∫ ‚à∑ Ty -> LCtx => f b)).
          rewrite eq_sym_map_distr.
          rewrite f_equal_compose.
          rewrite (map_subst_map (P := fun x => SymInstance (ctx_snoc x b)) (fun a : LCtx => a ‚ñª b) (fun _ x => x) ).
          rewrite IHŒ£e.
          now rewrite snoc_eq_rect.
      Qed.

    End Util.

    Module SolveEvars.

      Fixpoint assert_msgs_formulas {Œ£} (mfs : List (Pair Message Formula) Œ£) (p : ùïä Œ£) : ùïä Œ£ :=
        match mfs with
        | nil => p
        | cons (msg,fml) mfs =>
          assert_msgs_formulas mfs (assertk fml msg p)
        end.

      Lemma safe_assert_msgs_formulas {Œ£} {mfs : List (Pair Message Formula) Œ£} {p : ùïä Œ£} {Œπ : SymInstance Œ£} :
        (safe (assert_msgs_formulas mfs p) Œπ <-> instpc (map snd mfs) Œπ /\ safe p Œπ).
      Proof.
        revert p.
        induction mfs; intros p; cbn.
        - now unfold inst_pathcondition.
        - rewrite inst_pathcondition_cons.
          destruct a; cbn.
          rewrite IHmfs.
          cbn.
          now rewrite obligation_equiv.
      Qed.

      Inductive ECtx (Œ£ : LCtx) : LCtx -> Type :=
      | ectx Œ£e (mfs : List (Pair Message Formula) (Œ£ ‚ñª‚ñª Œ£e)) : ECtx Œ£ (Œ£ ‚ñª‚ñª Œ£e).
      Arguments ectx {Œ£} Œ£e mfs.

      Definition ectx_refl {Œ£ : LCtx} : ECtx Œ£ Œ£ := @ectx Œ£ ctx_nil nil.

      Definition ectx_formula {Œ£1 Œ£2} (e: ECtx Œ£1 Œ£2) : Message Œ£2 -> Formula Œ£2 -> ECtx Œ£1 Œ£2 :=
        match e with ectx Œ£e mfs => fun msg fml => ectx Œ£e (cons (msg,fml) mfs) end.
      Definition ectx_snoc {Œ£1 Œ£2} (e: ECtx Œ£1 Œ£2) b : ECtx Œ£1 (Œ£2 ‚ñª b) :=
        match e with ectx Œ£e mfs => ectx (Œ£e ‚ñª b) (subst mfs sub_wk1) end.
      Definition ectx_subst {Œ£1 Œ£2} (e : ECtx Œ£1 Œ£2) :
        forall x œÉ (xIn : x‚à∑œÉ ‚àà Œ£2) (t : Term (Œ£2 - x‚à∑œÉ) œÉ),
          option (ECtx Œ£1 (Œ£2 - x‚à∑œÉ)) :=
        match e with
        | ectx Œ£e mfs =>
            fun x œÉ xIn =>
              match Context.catView xIn with
              | isCatLeft bIn  => fun _ => None
              | isCatRight bIn =>
                  fun t =>
                    let e  := ctx_remove_inctx_right bIn in
                    let Œ∂  := sub_single (inctx_cat_right bIn) t in
                    let Œ∂' := eq_rect _ (Sub (Œ£1 ‚ñª‚ñª Œ£e)) Œ∂ _ e in
                    Some (eq_rect_r _ (ectx _ (subst mfs Œ∂')) e)
              end
        end.

      Definition plug {Œ£1 Œ£2} (e : ECtx Œ£1 Œ£2) : ùïä Œ£2 -> ùïä Œ£1 :=
        match e with ectx Œ£e mfs => fun p => angelic_close0 Œ£e (assert_msgs_formulas mfs p) end.

      Definition plug_msg {Œ£1 Œ£2} (ec : ECtx Œ£1 Œ£2) : EMessage Œ£2 -> EMessage Œ£1 :=
        match ec with ectx _ _ => emsg_close end.

      Fixpoint push {Œ£1 Œ£2} (ec : ECtx Œ£1 Œ£2) (p : ùïä Œ£2) {struct p} : ùïä Œ£1 :=
        match p with
        | angelic_binary p1 p2   => angelic_binary (push ec p1) (push ec p2)
        | demonic_binary p1 p2   => plug ec (demonic_binary (push ectx_refl p1) (push ectx_refl p2))
        | error msg              => error (plug_msg ec msg)
        | block                  => plug ec block
        | assertk fml msg p      => push (ectx_formula ec msg fml) p
        | assumek fml p          => plug ec (assumek fml (push ectx_refl p))
        | angelicv b p           => push (ectx_snoc ec b) p
        | demonicv b p           => plug ec (demonicv b (push ectx_refl p))
        | assert_vareq x t msg p =>
            match ectx_subst ec _ t with
            | Some e' => push e' p
            | None    => plug ec (assert_vareq x t msg (push ectx_refl p))
            end
        | assume_vareq x t p     => plug ec (assume_vareq x t (push ectx_refl p))
        | debug b p              => plug ec (debug b (push ectx_refl p))
        end.

      Instance proper_assert_msgs_formulas {Œ£} (mfs : List (Pair Message Formula) Œ£) :
        Proper (sequiv Œ£ ==> sequiv Œ£) (assert_msgs_formulas mfs).
      Proof. intros p q pq Œπ. rewrite ?safe_assert_msgs_formulas. intuition. Qed.

      Instance proper_plug {Œ£1 Œ£2} (ec : ECtx Œ£1 Œ£2) :
        Proper (sequiv Œ£2 ==> sequiv Œ£1) (plug ec).
      Proof.
        intros p q pq. destruct ec; cbn.
        now apply proper_angelic_close0, proper_assert_msgs_formulas.
      Qed.

      Lemma assert_msgs_formulas_angelic_binary {Œ£} (mfs : List (Pair Message Formula) Œ£) (p1  p2 : ùïä Œ£) :
        assert_msgs_formulas mfs (angelic_binary p1 p2) <=>
        angelic_binary (assert_msgs_formulas mfs p1) (assert_msgs_formulas mfs p2).
      Proof.
        intros Œπ; cbn.
        rewrite ?safe_assert_msgs_formulas.
        cbn. intuition.
      Qed.

      Lemma map_snd_subst {Œ£ Œ£' : LCtx} {Œ∂ : Sub Œ£ Œ£'}
            {mfs : List (Pair Message Formula) Œ£} :
            map snd (subst mfs Œ∂) = subst (map snd mfs) Œ∂.
      Proof.
        induction mfs.
        - easy.
        - cbn.
          rewrite IHmfs.
          now destruct a.
      Qed.

      Lemma assert_msgs_formulas_angelicv {b Œ£} (mfs : List (Pair Message Formula) Œ£) (p : ùïä (Œ£ ‚ñª b)) :
        assert_msgs_formulas mfs (angelicv b p) <=>
        angelicv b (assert_msgs_formulas (subst mfs sub_wk1) p).
      Proof.
        intros Œπ; cbn.
        rewrite safe_assert_msgs_formulas. cbn.
        rewrite and_comm, <- exists_and.
        apply base.exist_proper. intros v.
        rewrite safe_assert_msgs_formulas.
        rewrite map_snd_subst.
        rewrite inst_subst.
        rewrite inst_sub_wk1.
        apply and_comm.
      Qed.

      Lemma plug_eq_rect {Œ£1 Œ£2 Œ£2'} (eq : Œ£2 = Œ£2') (ec : ECtx Œ£1 Œ£2) (p : ùïä Œ£2') :
        plug (eq_rect Œ£2 (ECtx Œ£1) ec Œ£2' eq) p = plug ec (eq_rect_r (fun Œ£3 : LCtx => ùïä Œ£3) p eq).
      Proof. now destruct eq. Qed.

      Lemma ectx_subst_spec {Œ£1 Œ£2} (ec : ECtx Œ£1 Œ£2) {x œÉ} (xIn : x‚à∑œÉ ‚àà Œ£2) (t : Term (Œ£2 - x‚à∑œÉ) œÉ) (msg : Message _) :
        OptionSpec
          (fun e => forall p, plug e p <=> plug ec (assert_vareq x t msg p))
          True
          (ectx_subst ec xIn t).
      Proof.
        destruct ec; cbn. destruct (Context.catView xIn); constructor; auto.
        intros p Œπ. unfold eq_rect_r. rewrite plug_eq_rect. cbn.
        rewrite ?safe_angelic_close0.
        split; intros [Œπe HYP].
        - rewrite safe_assert_msgs_formulas in HYP. destruct HYP as [Hpc Hp].
          unfold eq_rect_r in Hp. rewrite safe_eq_rect, eq_sym_involutive in Hp.
          exists (env_insert bIn (inst (eq_rect ((Œ£1 ‚ñª‚ñª Œ£e) - x‚à∑œÉ) (fun Œ£ => Term Œ£ œÉ) t (Œ£1 ‚ñª‚ñª Œ£e - x‚à∑œÉ) (ctx_remove_inctx_right bIn)) (Œπ ‚ñ∫‚ñ∫ Œπe)) Œπe).
          rewrite safe_assert_msgs_formulas. cbn. rewrite obligation_equiv. cbn.
          rewrite env_insert_app, env_remove_insert, env_insert_lookup.
          rewrite inst_subst, inst_sub_shift, env_remove_insert, ?inst_eq_rect.
          split; auto.
          rewrite map_snd_subst, inst_subst, inst_eq_rect in Hpc.
          now rewrite inst_sub_single2 in Hpc.
        - rewrite safe_assert_msgs_formulas in HYP. destruct HYP as [Hpc Hp].
          cbn in Hp. rewrite obligation_equiv in Hp. cbn in Hp. destruct Hp as [Ht Hp].
          rewrite env_remove_app in Hp.
          exists (env_remove (x‚à∑œÉ) Œπe bIn).
          rewrite safe_assert_msgs_formulas.
          rewrite map_snd_subst, inst_subst.
          unfold eq_rect_r. rewrite safe_eq_rect.
          rewrite eq_sym_involutive. split; auto.
          rewrite inst_subst in Ht.
          rewrite inst_eq_rect.
          rewrite <- env_remove_app.
          rewrite <- inst_sub_shift.
          now rewrite inst_sub_single_shift.
      Qed.

      Lemma error_plug_msg {Œ£1 Œ£2} (ec : ECtx Œ£1 Œ£2) (msg : EMessage Œ£2) :
        error (plug_msg ec msg) <=> plug ec (error msg).
      Proof.
        destruct ec; intros Œπ; cbn.
        split; try contradiction.
        rewrite safe_angelic_close0.
        intros [Œπe HYP].
        rewrite safe_assert_msgs_formulas in HYP.
        destruct HYP as [? []].
      Qed.

      Lemma push_plug {Œ£1 Œ£2} (ec : ECtx Œ£1 Œ£2) (p : ùïä Œ£2) :
        push ec p <=> plug ec p.
      Proof.
        revert Œ£1 ec; induction p; cbn; intros Œ£1 ec.
        - rewrite IHp1, IHp2. clear IHp1 IHp2.
          destruct ec. cbn [plug].
          rewrite <- angelic_close0_angelic_binary.
          apply proper_angelic_close0.
          now rewrite <- assert_msgs_formulas_angelic_binary.
        - apply proper_plug, proper_demonic_binary;
           [now rewrite IHp1 | now rewrite IHp2].
        - apply error_plug_msg.
        - reflexivity.
        - rewrite IHp. clear IHp.
          destruct ec; cbn. reflexivity.
        - apply proper_plug, proper_assumek, IHp.
        - rewrite IHp. clear IHp.
          destruct ec; cbn.
          apply proper_angelic_close0.
          rewrite assert_msgs_formulas_angelicv.
          reflexivity.
        - apply proper_plug, proper_demonicv, IHp.
        - destruct (ectx_subst_spec ec xIn t msg).
          + rewrite IHp. rewrite H. reflexivity.
          + apply proper_plug, proper_assert_vareq, IHp.
        - apply proper_plug, proper_assume_vareq, IHp.
        - apply proper_plug, proper_debug, IHp.
      Qed.

    End SolveEvars.

    Definition solve_evars {Œ£} (p : ùïä Œ£) : ùïä Œ£ :=
      SolveEvars.push SolveEvars.ectx_refl p.

    Lemma solve_evars_sound {Œ£} (p : ùïä Œ£) :
      forall Œπ, safe (solve_evars p) Œπ <-> safe p Œπ.
    Proof. apply (SolveEvars.push_plug SolveEvars.ectx_refl). Qed.

    Module SolveUvars.

      Fixpoint assume_formulas {Œ£} (fs : List Formula Œ£) (p : ùïä Œ£) : ùïä Œ£ :=
        match fs with
        | nil => p
        | cons fml mfs =>
          assume_formulas mfs (assumek fml p)
        end.

      Lemma safe_assume_formulas {Œ£} {fs : List Formula Œ£} {p : ùïä Œ£} {Œπ : SymInstance Œ£} :
        safe (assume_formulas fs p) Œπ <-> (instpc fs Œπ -> safe p Œπ).
      Proof.
        revert p.
        induction fs; intros p; cbn.
        - unfold inst_pathcondition; cbn; intuition.
        - rewrite inst_pathcondition_cons.
          rewrite IHfs. cbn. intuition.
      Qed.

      Inductive UCtx (Œ£ : LCtx) : LCtx -> Type :=
      | uctx Œ£u (mfs : List Formula (Œ£ ‚ñª‚ñª Œ£u)) : UCtx Œ£ (Œ£ ‚ñª‚ñª Œ£u).
      Arguments uctx {Œ£} Œ£u mfs.

      Definition uctx_refl {Œ£ : LCtx} : UCtx Œ£ Œ£ := @uctx Œ£ ctx_nil nil.

      Definition uctx_formula {Œ£1 Œ£2} (e : UCtx Œ£1 Œ£2) : Formula Œ£2 -> UCtx Œ£1 Œ£2 :=
        match e with uctx Œ£u mfs => fun fml => uctx Œ£u (cons fml mfs) end.
      Definition uctx_snoc {Œ£1 Œ£2} (e: UCtx Œ£1 Œ£2) b : UCtx Œ£1 (Œ£2 ‚ñª b) :=
        match e with uctx Œ£u mfs => uctx (Œ£u ‚ñª b) (subst mfs sub_wk1) end.
      Definition uctx_subst {Œ£1 Œ£2} (e : UCtx Œ£1 Œ£2) :
        forall x œÉ (xIn : x‚à∑œÉ ‚àà Œ£2) (t : Term (Œ£2 - x‚à∑œÉ) œÉ),
          option (UCtx Œ£1 (Œ£2 - x‚à∑œÉ)) :=
        match e with
        | uctx Œ£u mfs =>
            fun x œÉ xIn =>
              match Context.catView xIn with
              | isCatLeft bIn  => fun _ => None
              | isCatRight bIn =>
                  fun t =>
                    let e  := ctx_remove_inctx_right bIn in
                    let Œ∂  := sub_single (inctx_cat_right bIn) t in
                    let Œ∂' := eq_rect _ (Sub (Œ£1 ‚ñª‚ñª Œ£u)) Œ∂ _ e in
                    Some (eq_rect_r _ (uctx _ (subst mfs Œ∂')) e)
              end
        end.

      Definition plug {Œ£1 Œ£2} (e : UCtx Œ£1 Œ£2) : ùïä Œ£2 -> ùïä Œ£1 :=
        match e with uctx Œ£u mfs => fun p => demonic_close0 Œ£u (assume_formulas mfs p) end.

      Fixpoint push {Œ£1 Œ£2} (ec : UCtx Œ£1 Œ£2) (p : ùïä Œ£2) {struct p} : ùïä Œ£1 :=
        match p with
        | angelic_binary p1 p2   => plug ec (angelic_binary (push uctx_refl p1) (push uctx_refl p2))
        | demonic_binary p1 p2   => plug ec (demonic_binary (push uctx_refl p1) (push uctx_refl p2))
            (* demonic_binary (push ec p1) (push ec p2) *)
        | error msg              => plug ec (error msg)
        | block                  => block
        | assertk fml msg p      => plug ec (assertk fml msg (push uctx_refl p))
        | assumek fml p          => push (uctx_formula ec fml) p
        | angelicv b p           => plug ec (angelicv b (push uctx_refl p))
        | demonicv b p           => push (uctx_snoc ec b) p
        | assert_vareq x t msg p => plug ec (assert_vareq x t msg (push uctx_refl p))
        | assume_vareq x t p     =>
            match uctx_subst ec _ t with
            | Some e' => push e' p
            | None    => plug ec (assume_vareq x t (push uctx_refl p))
            end
        | debug b p              => plug ec (debug b (push uctx_refl p))
        end.

      Instance proper_assume_formulas {Œ£} (mfs : List Formula Œ£) :
        Proper (sequiv Œ£ ==> sequiv Œ£) (assume_formulas mfs).
      Proof. intros p q pq Œπ. rewrite ?safe_assume_formulas. intuition. Qed.

      Instance proper_plug {Œ£1 Œ£2} (ec : UCtx Œ£1 Œ£2) :
        Proper (sequiv Œ£2 ==> sequiv Œ£1) (plug ec).
      Proof.
        intros p q pq. destruct ec; cbn.
        now apply proper_demonic_close0, proper_assume_formulas.
      Qed.

      Lemma assume_formulas_demonic_binary {Œ£} (fmls : List Formula Œ£) (p1 p2 : ùïä Œ£) :
        assume_formulas fmls (demonic_binary p1 p2) <=>
        demonic_binary (assume_formulas fmls p1) (assume_formulas fmls p2).
      Proof.
        intros Œπ; cbn.
        rewrite ?safe_assume_formulas.
        cbn. intuition.
      Qed.

      Lemma forall_impl {A : Type} {P : A -> Prop} {Q : Prop} :
        (Q -> forall (x : A), P x) <-> (forall (x : A), Q -> P x).
      Proof. firstorder. Qed.

      Lemma assume_formulas_demonicv {b Œ£} (fmls : List Formula Œ£) (p : ùïä (Œ£ ‚ñª b)) :
        assume_formulas fmls (demonicv b p) <=>
        demonicv b (assume_formulas (subst fmls sub_wk1) p).
      Proof.
        intros Œπ; cbn.
        rewrite safe_assume_formulas. cbn.
        rewrite forall_impl.
        apply base.forall_proper. intros v.
        rewrite safe_assume_formulas.
        rewrite inst_subst.
        rewrite inst_sub_wk1.
        reflexivity.
      Qed.

      Lemma plug_eq_rect {Œ£1 Œ£2 Œ£2'} (eq : Œ£2 = Œ£2') (ec : UCtx Œ£1 Œ£2) (p : ùïä Œ£2') :
        plug (eq_rect Œ£2 (UCtx Œ£1) ec Œ£2' eq) p = plug ec (eq_rect_r (fun Œ£3 : LCtx => ùïä Œ£3) p eq).
      Proof. now destruct eq. Qed.

      Lemma uctx_subst_spec {Œ£1 Œ£2} (ec : UCtx Œ£1 Œ£2) {x œÉ} (xIn : x‚à∑œÉ ‚àà Œ£2) (t : Term (Œ£2 - x‚à∑œÉ) œÉ) :
        OptionSpec
          (fun e => forall p, plug e p <=> plug ec (assume_vareq x t p))
          True
          (uctx_subst ec xIn t).
      Proof.
        destruct ec; cbn. destruct (Context.catView xIn); constructor; auto.
        intros p Œπ. unfold eq_rect_r. rewrite plug_eq_rect. cbn.
        rewrite ?safe_demonic_close0.
        split; intros HYP Œπu.
        - specialize (HYP (env_remove (x‚à∑œÉ) Œπu bIn)).
          rewrite safe_assume_formulas. intros Hpc Heq.
          rewrite <- inst_sub_shift in Heq.
          rewrite safe_assume_formulas in HYP.
          rewrite inst_subst in HYP.
          rewrite inst_eq_rect in HYP.
          unfold eq_rect_r in HYP. rewrite safe_eq_rect, eq_sym_involutive in HYP.
          rewrite <- env_remove_app in HYP. apply HYP.
          rewrite <- inst_sub_shift.
          rewrite inst_sub_single_shift; auto.
        - specialize (HYP (env_insert bIn (inst (eq_rect ((Œ£1 ‚ñª‚ñª Œ£u) - x‚à∑œÉ) (fun Œ£ => Term Œ£ œÉ) t (Œ£1 ‚ñª‚ñª Œ£u - x‚à∑œÉ) (ctx_remove_inctx_right bIn)) (Œπ ‚ñ∫‚ñ∫ Œπu)) Œπu)).
          rewrite safe_assume_formulas, inst_subst, inst_eq_rect. intros Hpc.
          unfold eq_rect_r. rewrite safe_eq_rect, eq_sym_involutive.
          rewrite safe_assume_formulas in HYP. cbn in HYP.
          rewrite env_insert_app, env_remove_insert, env_insert_lookup in HYP.
          rewrite inst_eq_rect in HYP.
          rewrite inst_sub_single2 in Hpc.
          now apply HYP.
      Qed.

      Lemma push_plug {Œ£1 Œ£2} (ec : UCtx Œ£1 Œ£2) (p : ùïä Œ£2) :
        push ec p <=> plug ec p.
      Proof.
        revert Œ£1 ec; induction p; cbn; intros Œ£1 ec.
        - apply proper_plug, proper_angelic_binary;
           [now rewrite IHp1 | now rewrite IHp2].
        - rewrite IHp1, IHp2. clear IHp1 IHp2.
          reflexivity.
          (* destruct ec. cbn [plug]. *)
          (* rewrite <- demonic_close0_demonic_binary. *)
          (* apply proper_demonic_close0. *)
          (* now rewrite <- assume_formulas_demonic_binary. *)
        - reflexivity.
        - intros Œπ; cbn; split; auto. intros _.
          destruct ec; cbn.
          rewrite safe_demonic_close0; intros Œπu.
          rewrite safe_assume_formulas; cbn; auto.
        - apply proper_plug, proper_assertk, IHp.
        - rewrite IHp. clear IHp.
          destruct ec; cbn. reflexivity.
        - apply proper_plug, proper_angelicv, IHp.
        - rewrite IHp. clear IHp.
          destruct ec; cbn.
          apply proper_demonic_close0.
          rewrite assume_formulas_demonicv.
          reflexivity.
        - apply proper_plug, proper_assert_vareq, IHp.
        - destruct (uctx_subst_spec ec xIn t).
          + rewrite IHp. rewrite H. reflexivity.
          + apply proper_plug, proper_assume_vareq, IHp.
        - apply proper_plug, proper_debug, IHp.
      Qed.

    End SolveUvars.

    Definition solve_uvars {Œ£} (p : ùïä Œ£) : ùïä Œ£ :=
      SolveUvars.push SolveUvars.uctx_refl p.

    Lemma solve_uvars_sound {Œ£} (p : ùïä Œ£) :
      forall Œπ, safe (solve_uvars p) Œπ <-> safe p Œπ.
    Proof. apply (SolveUvars.push_plug SolveUvars.uctx_refl). Qed.

    Module Experimental.

      Definition Ephemeral (Œ£1 Œ£2 : LCtx) : Type :=
        SolveEvars.ECtx Œ£1 Œ£2 + SolveUvars.UCtx Œ£1 Œ£2.

      Definition EProp : LCtx -> Type :=
        fun Œ£ : LCtx => forall Œ£0, Ephemeral Œ£0 Œ£ -> ùïä Œ£0.

      Definition angelic_binary {Œ£} (p q : EProp Œ£) : EProp Œ£ :=
        fun Œ£0 eph =>
          match eph with
          | inl ec => SymProp.angelic_binary (p Œ£0 eph) (q Œ£0 eph)
          | inr uc => let eph' : Ephemeral _ _ := inl SolveEvars.ectx_refl in
                      SolveUvars.plug uc (SymProp.angelic_binary (p Œ£ eph') (q Œ£ eph'))
          end.

      Definition angelicv {Œ£} (b : ùë∫ ‚à∑ Ty) (p : EProp (Œ£ ‚ñª b)) : EProp Œ£ :=
        fun Œ£0 eph =>
          match eph with
          | inl ec => p Œ£0 (inl (SolveEvars.ectx_snoc ec b))
          | inr uc => let eph' : Ephemeral _ _ := inl SolveEvars.ectx_refl in
                      SolveUvars.plug uc (angelicv b (p (Œ£ ‚ñª b) eph'))
          end.

      Definition demonic_binary {Œ£} (p q : EProp Œ£) : EProp Œ£ :=
        fun Œ£0 eph =>
          match eph with
          | inl ec => let eph' : Ephemeral _ _ := inr SolveUvars.uctx_refl in
                      SolveEvars.plug ec (SymProp.demonic_binary (p Œ£ eph') (q Œ£ eph'))
          | inr uc => SymProp.demonic_binary (p Œ£0 eph) (q Œ£0 eph)
          end.

      Definition error {Œ£} (msg : EMessage Œ£) : EProp Œ£ :=
        fun Œ£0 eph =>
          match eph with
          | inl ec => error (SolveEvars.plug_msg ec msg)
          | inr uc => SolveUvars.plug uc (error msg)
          end.

    End Experimental.

  End Postprocessing.
  Import Postprocessing.

  Section VerificationConditions.

    Inductive VerificationCondition (p : ùïä wnil) : Prop :=
    | vc (P : safe p env_nil).

  End VerificationConditions.

  Definition SDijkstra (A : TYPE) : TYPE :=
    ‚ñ°(A -> ùïä) -> SymProp.

  Module SDijk.

    Definition pure {A : TYPE} :
      ‚ä¢ A -> SDijkstra A :=
      fun w0 a POST => T POST a.

    Definition map {A B} :
      ‚ä¢ ‚ñ°(A -> B) -> SDijkstra A -> SDijkstra B :=
      fun w0 f m POST => m (comp <$> POST <*> f).

    Definition bind {A B} :
      ‚ä¢ SDijkstra A -> ‚ñ°(A -> SDijkstra B) -> SDijkstra B :=
      fun w0 m f POST => m (fun w1 œâ01 a1 => f w1 œâ01 a1 (four POST œâ01)).

    Definition angelic (x : option ùë∫) œÉ :
      ‚ä¢ SDijkstra (STerm œÉ) :=
      fun w k =>
        let y := fresh w x in
        angelicv
          (y‚à∑œÉ) (k (wsnoc w (y‚à∑œÉ)) acc_snoc_right (@term_var _ y œÉ inctx_zero)).
    Global Arguments angelic x œÉ [w] k.

    Definition angelic_ctx {N : Set} (n : N -> ùë∫) :
      ‚ä¢ ‚àÄ Œî : NCtx N Ty, SDijkstra (fun w => NamedEnv (Term w) Œî) :=
      fix rec {w} Œî {struct Œî} :=
        match Œî with
        | ctx_nil          => fun k => T k env_nil
        | ctx_snoc Œî (x‚à∑œÉ) =>
          fun k =>
            angelic (Some (n x)) œÉ (fun w1 œâ01 t =>
              rec Œî (fun w2 œâ12 EŒî =>
                k w2 (acc_trans œâ01 œâ12) (EŒî ‚ñ∫ (x‚à∑œÉ ‚Ü¶ persist__term t œâ12))))
        end.
    Global Arguments angelic_ctx {N} n [w] Œî : rename.

    Definition demonic (x : option ùë∫) œÉ :
      ‚ä¢ SDijkstra (STerm œÉ) :=
      fun w k =>
        let y := fresh w x in
        demonicv
          (y‚à∑œÉ) (k (wsnoc w (y‚à∑œÉ)) acc_snoc_right (@term_var _ y œÉ inctx_zero)).
    Global Arguments demonic x œÉ [w] k.

    Definition demonic_ctx {N : Set} (n : N -> ùë∫) :
      ‚ä¢ ‚àÄ Œî : NCtx N Ty, SDijkstra (fun w => NamedEnv (Term w) Œî) :=
      fix demonic_ctx {w} Œî {struct Œî} :=
        match Œî with
        | ctx_nil          => fun k => T k env_nil
        | ctx_snoc Œî (x‚à∑œÉ) =>
          fun k =>
            demonic (Some (n x)) œÉ (fun w1 œâ01 t =>
              demonic_ctx Œî (fun w2 œâ12 EŒî =>
                k w2 (acc_trans œâ01 œâ12) (EŒî ‚ñ∫ (x‚à∑œÉ ‚Ü¶ persist__term t œâ12))))
        end.
    Global Arguments demonic_ctx {_} n [w] Œî : rename.

    Definition assume_formulas :
      ‚ä¢ List Formula -> SDijkstra Unit :=
      fun w0 fmls0 POST =>
        match Solver.generic solver_user fmls0 with
        | Some (existT w1 (ŒΩ , fmls1)) =>
          (* Assume variable equalities and the residual constraints *)
          assume_triangular ŒΩ
            (assume_formulas_without_solver fmls1
               (* Run POST in the world with the variable and residual
                  formulas included. This is a critical piece of code since
                  this is the place where we really meaningfully change the
                  world. We changed the type of assume_formulas_without_solver
                  just to not forget adding the formulas to the path constraints.
               *)
               (four POST (acc_triangular ŒΩ) (acc_formulas_right w1 fmls1) tt))
        | None =>
          (* The formulas are inconsistent with the path constraints. *)
          block
        end.

    Definition assume_formula :
      ‚ä¢ Formula -> SDijkstra Unit :=
      fun w0 fml0 =>
        assume_formulas (cons fml0 nil).

    Definition assert_formulas :
      ‚ä¢ Message -> List Formula -> SDijkstra Unit :=
      fun w0 msg fmls0 POST =>
        match Solver.generic solver_user fmls0 with
        | Some (existT w1 (ŒΩ , fmls1)) =>
          (* Assert variable equalities and the residual constraints *)
          assert_triangular msg ŒΩ
            (fun msg' =>
               assert_formulas_without_solver msg' fmls1
                 (* Critical code. Like for assume_formulas. *)
                 (four POST (acc_triangular ŒΩ) (acc_formulas_right w1 fmls1) tt))
        | None =>
          (* The formulas are inconsistent with the path constraints. *)
          error (EMsgHere msg)
        end.

    Definition assert_formula :
      ‚ä¢ Message -> Formula -> SDijkstra Unit :=
      fun w0 msg fml0 =>
        assert_formulas msg (cons fml0 nil).

    Definition angelic_binary {A} :
      ‚ä¢ SDijkstra A -> SDijkstra A -> SDijkstra A :=
      fun w m1 m2 POST =>
        angelic_binary (m1 POST) (m2 POST).
    Definition demonic_binary {A} :
      ‚ä¢ SDijkstra A -> SDijkstra A -> SDijkstra A :=
      fun w m1 m2 POST =>
        demonic_binary (m1 POST) (m2 POST).

    Definition angelic_list {A} :
      ‚ä¢ Message -> List A -> SDijkstra A :=
      fun w msg =>
        fix rec xs :=
        match xs with
        | nil        => fun POST => error (EMsgHere msg)
        | cons x xs  => angelic_binary (pure x) (rec xs)
        end.

    Definition demonic_list {A} :
      ‚ä¢ List A -> SDijkstra A :=
      fun w =>
        fix rec xs :=
        match xs with
        | nil        => fun POST => block
        | cons x xs  => demonic_binary (pure x) (rec xs)
        end.

    Definition angelic_finite F `{finite.Finite F} :
      ‚ä¢ Message -> SDijkstra ‚åúF‚åù :=
      fun w msg => angelic_list msg (finite.enum F).

    Definition demonic_finite F `{finite.Finite F} :
      ‚ä¢ SDijkstra ‚åúF‚åù :=
      fun w => demonic_list (finite.enum F).

    Definition angelic_match_bool' :
      ‚ä¢ Message -> STerm ty_bool -> SDijkstra ‚åúbool‚åù :=
      fun _ msg t =>
        angelic_binary
          (fun POST => assert_formula msg (formula_bool t) (fun w1 œâ01 _ => POST w1 œâ01 true))
          (fun POST => assert_formula msg (formula_bool (term_not t)) (fun w1 œâ01 _ => POST w1 œâ01 false)).

    Definition angelic_match_bool :
      ‚ä¢ Message -> STerm ty_bool -> SDijkstra ‚åúbool‚åù :=
      fun w msg t =>
        let t' := peval t in
        match term_get_lit t' with
        | Some l => pure  l
        | None   => angelic_match_bool' msg t'
        end.

    Definition demonic_match_bool' :
      ‚ä¢ STerm ty_bool -> SDijkstra ‚åúbool‚åù :=
      fun _ t =>
        demonic_binary
          (fun POST => assume_formula (formula_bool t) (fun w1 œâ01 _ => POST w1 œâ01 true))
          (fun POST => assume_formula (formula_bool (term_not t)) (fun w1 œâ01 _ => POST w1 œâ01 false)).

    Definition demonic_match_bool :
      ‚ä¢ STerm ty_bool -> SDijkstra ‚åúbool‚åù :=
      fun w t =>
        let t' := peval t in
        match term_get_lit t' with
        | Some l => pure  l
        | None   => demonic_match_bool' t'
        end.


    (* Definition angelic_match_enum {AT E} : *)
    (*   ‚ä¢ Message -> STerm (ty_enum E) -> (‚åúLit (ty_enum E)‚åù -> ‚ñ°(ùïä AT)) -> ùïä AT := *)
    (*   fun w msg t k => *)
    (*     match term_get_lit t with *)
    (*     | Some v => T (k v) *)
    (*     | None => angelic_finite *)
    (*                 msg (fun v => assert_formulak msg (formula_eq t (term_enum E v)) (k v)) *)
    (*     end. *)

    (* Definition demonic_match_enum {AT E} : *)
    (*   ‚ä¢ STerm (ty_enum E) -> (‚åúLit (ty_enum E)‚åù -> ‚ñ°(ùïä AT)) -> ùïä AT := *)
    (*   fun w t k => *)
    (*     match term_get_lit t with *)
    (*     | Some v => T (k v) *)
    (*     | None => demonic_finite *)
    (*                 (fun v => assume_formulak (formula_eq t (term_enum E v)) (k v)) *)
    (*     end. *)

    (* Definition angelic_match_list {AT} (x y : ùë∫) (œÉ : Ty) : *)
    (*   ‚ä¢ Message -> STerm (ty_list œÉ) -> ‚ñ°(ùïä AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 msg t knil kcons => *)
    (*     angelic_binary (assert_formulak msg (formula_eq (term_lit (ty_list œÉ) []) t) knil) *)
    (*       (angelic x œÉ *)
    (*          (fun w1 œâ01 (th : Term w1 œÉ) => *)
    (*           angelic y (ty_list œÉ) *)
    (*             (fun w2 œâ12 (tt : Term w2 (ty_list œÉ)) => *)
    (*              assert_formulak (subst msg (wtrans œâ01 œâ12)) *)
    (*                (formula_eq (term_binop binop_cons (subst th œâ12) tt) (subst t (wtrans œâ01 œâ12))) *)
    (*                (fun w3 œâ23 => *)
    (*                 four kcons (wtrans œâ01 œâ12) œâ23 (subst th (wtrans œâ12 œâ23)) (subst tt œâ23))))). *)

    (* Definition demonic_match_list {AT} (x y : ùë∫) (œÉ : Ty) : *)
    (*   ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(ùïä AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 t knil kcons => *)
    (*     demonic_binary (assume_formulak (formula_eq (term_lit (ty_list œÉ) []) t) knil) *)
    (*       (demonic x œÉ *)
    (*          (fun w1 œâ01 (th : Term w1 œÉ) => *)
    (*           demonic y (ty_list œÉ) *)
    (*             (fun w2 œâ12 (tt : Term w2 (ty_list œÉ)) => *)
    (*              assume_formulak *)
    (*                (formula_eq (term_binop binop_cons (subst th œâ12) tt) (subst t (wtrans œâ01 œâ12))) *)
    (*                (fun w3 œâ23 => *)
    (*                 four kcons (wtrans œâ01 œâ12) œâ23 (subst th (wtrans œâ12 œâ23)) (subst tt œâ23))))). *)

    Definition angelic_match_sum {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ Message -> STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SDijkstra A) -> ‚ñ°(STerm œÑ -> SDijkstra A) -> SDijkstra A.
    Proof.
      intros w0 msg t kinl kinr.
      apply angelic_binary.
      - eapply bind.
        apply (angelic (Some x) œÉ).
        intros w1 œâ01 t1.
        eapply bind.
        apply assert_formula. apply (persist (A := Message) msg œâ01).
        apply (formula_eq (term_inl t1) (persist__term t œâ01)).
        intros w2 œâ12 _.
        apply (four kinl œâ01). auto.
        apply (persist__term t1 œâ12).
      - eapply bind.
        apply (angelic (Some y) œÑ).
        intros w1 œâ01 t1.
        eapply bind.
        apply assert_formula. apply (persist (A := Message) msg œâ01).
        apply (formula_eq (term_inr t1) (persist__term t œâ01)).
        intros w2 œâ12 _.
        apply (four kinr œâ01). auto.
        apply (persist__term t1 œâ12).
    Defined.

    (* Definition angelic_match_sum {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) : *)
    (*   ‚ä¢ Message -> STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SDijkstra A) -> ‚ñ°(STerm œÑ -> SDijkstra A) -> SDijkstra A. *)
    (* Proof. *)
    (*   intros w0. *)
    (*   fun w0 msg t kinl kinr => *)
    (*     match term_get_sum t with *)
    (*     | Some (inl tœÉ) => T kinl tœÉ *)
    (*     | Some (inr tœÑ) => T kinr tœÑ *)
    (*     | None => angelic_match_sum' x y msg t kinl kinr *)
    (*     end. *)

    Definition demonic_match_sum' {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SDijkstra A) -> ‚ñ°(STerm œÑ -> SDijkstra A) -> SDijkstra A.
    Proof.
      intros w0 t kinl kinr.
      apply demonic_binary.
      - eapply bind.
        apply (demonic (Some x) œÉ).
        intros w1 œâ01 t1.
        eapply bind.
        apply assume_formula.
        apply (formula_eq (term_inl t1) (persist__term t œâ01)).
        intros w2 œâ12 _.
        apply (four kinl œâ01). auto.
        apply (persist__term t1 œâ12).
      - eapply bind.
        apply (demonic (Some y) œÑ).
        intros w1 œâ01 t1.
        eapply bind.
        apply assume_formula.
        apply (formula_eq (term_inr t1) (persist__term t œâ01)).
        intros w2 œâ12 _.
        apply (four kinr œâ01). auto.
        apply (persist__term t1 œâ12).
    Defined.

    Definition demonic_match_sum {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SDijkstra A) -> ‚ñ°(STerm œÑ -> SDijkstra A) -> SDijkstra A :=
      fun w0 t kinl kinr =>
        match term_get_sum t with
        | Some (inl tœÉ) => T kinl tœÉ
        | Some (inr tœÑ) => T kinr tœÑ
        | None => demonic_match_sum' x y t kinl kinr
        end.

    Definition angelic_match_prod {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ Message -> STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SDijkstra A) -> SDijkstra A.
    Proof.
      intros w0 msg t k.
      eapply bind.
      apply (angelic (Some x) œÉ).
      intros w1 œâ01 t1.
      eapply bind.
      apply (angelic (Some y) œÑ).
      intros w2 œâ12 t2.
      eapply bind.
      apply assert_formula. apply (persist (A := Message) msg (acc_trans œâ01 œâ12)).
      refine (formula_eq _ (persist__term t (acc_trans œâ01 œâ12))).
      eapply (term_binop binop_pair).
      apply (persist__term t1 œâ12).
      apply t2.
      intros w3 œâ23 _.
      apply (four k (acc_trans œâ01 œâ12)).
      auto.
      apply (persist__term t1 (acc_trans œâ12 œâ23)).
      apply (persist__term t2 œâ23).
    Defined.

    (* Definition angelic_match_prod {AT} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) : *)
    (*   ‚ä¢ Message -> STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 msg t k => *)
    (*     match term_get_pair t with *)
    (*     | Some (tœÉ,tœÑ) => T k tœÉ tœÑ *)
    (*     | None => angelic_match_prod' x y msg t k *)
    (*     end. *)

    Definition demonic_match_prod {A} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) :
      ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SDijkstra A) -> SDijkstra A.
    Proof.
      intros w0 t k.
      eapply bind.
      apply (demonic (Some x) œÉ).
      intros w1 œâ01 t1.
      eapply bind.
      apply (demonic (Some y) œÑ).
      intros w2 œâ12 t2.
      eapply bind.
      apply assume_formula.
      refine (formula_eq _ (persist__term t (acc_trans œâ01 œâ12))).
      eapply (term_binop binop_pair).
      apply (persist__term t1 œâ12).
      apply t2.
      intros w3 œâ23 _.
      apply (four k (acc_trans œâ01 œâ12)).
      auto.
      apply (persist__term t1 (acc_trans œâ12 œâ23)).
      apply (persist__term t2 œâ23).
    Defined.

    (* Definition demonic_match_prod {AT} (x : ùë∫) (œÉ : Ty) (y : ùë∫) (œÑ : Ty) : *)
    (*   ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 t k => *)
    (*     match term_get_pair t with *)
    (*     | Some (tœÉ,tœÑ) => T k tœÉ tœÑ *)
    (*     | None => demonic_match_prod' x y t k *)
    (*     end. *)

    (* Definition angelic_match_record' {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) : *)
    (*   ‚ä¢ Message -> STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 msg t k. *)
    (*   apply (angelic_freshen_ctx n Œî). *)
    (*   intros w1 œâ01 ts. *)
    (*   apply assert_formulak. *)
    (*   apply (subst msg œâ01). *)
    (*   apply (formula_eq (subst t œâ01)). *)
    (*   apply (term_record R (record_pattern_match_env_reverse p ts)). *)
    (*   intros w2 œâ12. *)
    (*   apply (k w2 (acc_trans œâ01 œâ12) (subst ts œâ12)). *)
    (* Defined. *)

    (* Definition angelic_match_record {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) : *)
    (*   ‚ä¢ Message -> STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 msg t k. *)
    (*   destruct (term_get_record t). *)
    (*   - apply (T k). *)
    (*     apply (record_pattern_match_env p n0). *)
    (*   - apply (angelic_match_record' n p msg t k). *)
    (* Defined. *)

    (* Definition demonic_match_record' {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) : *)
    (*   ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 t k. *)
    (*   apply (demonic_ctx n Œî). *)
    (*   intros w1 œâ01 ts. *)
    (*   apply assume_formulak. *)
    (*   apply (formula_eq (subst t œâ01)). *)
    (*   apply (term_record R (record_pattern_match_env_reverse p ts)). *)
    (*   intros w2 œâ12. *)
    (*   apply (k w2 (acc_trans œâ01 œâ12) (subst ts œâ12)). *)
    (* Defined. *)

    (* Definition demonic_match_record {N : Set} (n : N -> ùë∫) {AT R} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) : *)
    (*   ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 t k. *)
    (*   destruct (term_get_record t). *)
    (*   - apply (T k). *)
    (*     apply (record_pattern_match_env p n0). *)
    (*   - apply (demonic_match_record' n p t k). *)
    (* Defined. *)

    (* Definition angelic_match_tuple' {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) : *)
    (*   ‚ä¢ Message -> STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 msg t k. *)
    (*   apply (angelic_freshen_ctx n Œî). *)
    (*   intros w1 œâ01 ts. *)
    (*   apply assert_formulak. *)
    (*   apply (subst msg œâ01). *)
    (*   apply (formula_eq (subst t œâ01)). *)
    (*   apply (term_tuple (tuple_pattern_match_env_reverse p ts)). *)
    (*   intros w2 œâ12. *)
    (*   apply (k w2 (acc_trans œâ01 œâ12) (subst ts œâ12)). *)
    (* Defined. *)

    (* Definition angelic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) : *)
    (*   ‚ä¢ Message -> STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 msg t k. *)
    (*   destruct (term_get_tuple t). *)
    (*   - apply (T k). *)
    (*     apply (tuple_pattern_match_env p e). *)
    (*   - apply (angelic_match_tuple' n p msg t k). *)
    (* Defined. *)

    (* Definition demonic_match_tuple' {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) : *)
    (*   ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 t k. *)
    (*   apply (demonic_ctx n Œî). *)
    (*   intros w1 œâ01 ts. *)
    (*   apply assume_formulak. *)
    (*   apply (formula_eq (subst t œâ01)). *)
    (*   apply (term_tuple (tuple_pattern_match_env_reverse p ts)). *)
    (*   intros w2 œâ12. *)
    (*   apply (k w2 (acc_trans œâ01 œâ12) (subst ts œâ12)). *)
    (* Defined. *)

    (* Definition demonic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) : *)
    (*   ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT. *)
    (* Proof. *)
    (*   intros w0 t k. *)
    (*   destruct (term_get_tuple t). *)
    (*   - apply (T k). *)
    (*     apply (tuple_pattern_match_env p e). *)
    (*   - apply (demonic_match_tuple' n p t k). *)
    (* Defined. *)

    (* (* TODO: move to Syntax *) *)
    (* Definition pattern_match_env_reverse {N : Set} {Œ£ : LCtx} {œÉ : Ty} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) : *)
    (*   NamedEnv (Term Œ£) Œî -> Term Œ£ œÉ := *)
    (*   match p with *)
    (*   | pat_var x    => fun Ex => match snocView Ex with isSnoc _ t => t end *)
    (*   | pat_unit     => fun _ => term_lit ty_unit tt *)
    (*   | pat_pair x y => fun Exy => match snocView Exy with *)
    (*                                  isSnoc Ex ty => *)
    (*                                  match snocView Ex with *)
    (*                                    isSnoc _ tx => term_binop binop_pair tx ty *)
    (*                                  end *)
    (*                                end *)
    (*   | pat_tuple p  => fun EŒî => term_tuple (tuple_pattern_match_env_reverse p EŒî) *)
    (*   | pat_record p => fun EŒî => term_record _ (record_pattern_match_env_reverse p EŒî) *)
    (*   end. *)

    (* Definition angelic_match_pattern {N : Set} (n : N -> ùë∫) {AT œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) : *)
    (*   ‚ä¢ Message -> STerm œÉ -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 msg t k => *)
    (*     angelic_freshen_ctx n Œî *)
    (*       (fun w1 œâ01 (ts : (fun Œ£ : LCtx => NamedEnv (Term Œ£) Œî) w1) => *)
    (*        assert_formulak (subst msg œâ01) (formula_eq (subst t œâ01) (pattern_match_env_reverse p ts)) *)
    (*          (fun w2 œâ12 => k w2 (acc_trans œâ01 œâ12) (subst ts œâ12))). *)

    (* Definition demonic_match_pattern {N : Set} (n : N -> ùë∫) {AT œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) : *)
    (*   ‚ä¢ STerm œÉ -> ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) Œî) -> ùïä AT) -> ùïä AT := *)
    (*   fun w0 t k => *)
    (*     demonic_ctx n Œî *)
    (*       (fun w1 œâ01 (ts : (fun Œ£ : LCtx => NamedEnv (Term Œ£) Œî) w1) => *)
    (*        assume_formulak (formula_eq (subst t œâ01) (pattern_match_env_reverse p ts)) *)
    (*          (fun w2 œâ12 => k w2 (acc_trans œâ01 œâ12) (subst ts œâ12))). *)

    (* Definition angelic_match_union' {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty} *)
    (*   (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) : *)
    (*   ‚ä¢ Message -> STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> ùïä AT)) -> ùïä AT := *)
    (*   fun w0 msg t k => *)
    (*     angelic_finite msg *)
    (*       (fun K : ùëºùë≤ U => *)
    (*        angelic None (ùëºùë≤_Ty K) *)
    (*          (fun w1 œâ01 (t__field : Term w1 (ùëºùë≤_Ty K)) => *)
    (*           assert_formulak (subst msg œâ01) (formula_eq (term_union U K t__field) (subst t œâ01)) *)
    (*             (fun w2 œâ12 => *)
    (*              let œâ02 := wtrans œâ01 œâ12 in *)
    (*              angelic_match_pattern n (p K) (subst msg œâ02) (subst t__field œâ12) (four (k K) œâ02)))). *)

    (* Definition angelic_match_union {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty} *)
    (*   (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) : *)
    (*   ‚ä¢ Message -> STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> ùïä AT)) -> ùïä AT := *)
    (*   fun w0 msg t k => *)
    (*     match term_get_union t with *)
    (*     | Some (existT K t__field) => angelic_match_pattern n (p K) msg t__field (k K) *)
    (*     | None => angelic_match_union' n p msg t k *)
    (*     end. *)

    (* Definition demonic_match_union' {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty} *)
    (*   (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) : *)
    (*   ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> ùïä AT)) -> ùïä AT := *)
    (*   fun w0 t k => *)
    (*     demonic_finite *)
    (*       (fun K : ùëºùë≤ U => *)
    (*        demonic None (ùëºùë≤_Ty K) *)
    (*          (fun w1 œâ01 (t__field : Term w1 (ùëºùë≤_Ty K)) => *)
    (*           assume_formulak (formula_eq (term_union U K t__field) (subst t œâ01)) *)
    (*             (fun w2 œâ12 => *)
    (*              demonic_match_pattern n (p K) (subst t__field œâ12) (four (k K) (acc_trans œâ01 œâ12))))). *)

    (* Definition demonic_match_union {N : Set} (n : N -> ùë∫) {AT U} {Œî : ùëºùë≤ U -> NCtx N Ty} *)
    (*   (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) : *)
    (*   ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun Œ£ => NamedEnv (Term Œ£) (Œî K)) -> ùïä AT)) -> ùïä AT := *)
    (*   fun w0 t k => *)
    (*     match term_get_union t with *)
    (*     | Some (existT K t__field) => demonic_match_pattern n (p K) t__field (k K) *)
    (*     | None => demonic_match_union' n p t k *)
    (*     end. *)

    Global Instance proper_debug {B} : Proper (eq ==> iff ==> iff) (@Debug B).
    Proof.
      unfold Proper, respectful.
      intros ? ? -> P Q PQ.
      split; intros []; constructor; intuition.
    Qed.

    (* Ltac wsimpl := *)
    (*   repeat *)
    (*     (try change (wctx (wsnoc ?w ?b)) with (ctx_snoc (wctx w) b); *)
    (*      try change (sub_acc (@wred_sup ?w ?b ?t)) with (sub_snoc (sub_id (wctx w)) b t); *)
    (*      try change (wco (wsnoc ?w ?b)) with (subst (wco w) (sub_wk1 (b:=b))); *)
    (*      try change (sub_acc (@wrefl ?w)) with (sub_id (wctx w)); *)
    (*      try change (sub_acc (@wsnoc_sup ?w ?b)) with (@sub_wk1 (wctx w) b); *)
    (*      try change (wctx (wformula ?w ?fml)) with (wctx w); *)
    (*      try change (sub_acc (acc_trans ?œâ1 ?œâ2)) with (subst (sub_acc œâ1) (sub_acc œâ2)); *)
    (*      try change (sub_acc (@wformula_sup ?w ?fml)) with (sub_id (wctx w)); *)
    (*      try change (wco (wformula ?w ?fml)) with (cons fml (wco w)); *)
    (*      try change (wco (@wsubst ?w _ _ ?xIn ?t)) with (subst (wco w) (sub_single xIn t)); *)
    (*      try change (wctx (@wsubst ?w _ _ ?xIn ?t)) with (ctx_remove xIn); *)
    (*      try change (sub_acc (@acc_subst_right ?w _ _ ?xIn ?t)) with (sub_single xIn t); *)
    (*      rewrite <- ?sub_comp_wk1_tail, ?inst_subst, ?subst_sub_id, *)
    (*        ?inst_sub_id, ?inst_sub_wk1, ?inst_sub_snoc, *)
    (*        ?inst_lift, ?inst_sub_single, ?inst_pathcondition_cons; *)
    (*      repeat *)
    (*        match goal with *)
    (*        | |- Debug _ _ <-> Debug _ _ => apply proper_debug *)
    (*        | |- (?A /\ ?B) <-> (?A /\ ?C) => apply and_iff_compat_l'; intro *)
    (*        | |- (?A -> ?B) <-> (?A -> ?C) => apply imp_iff_compat_l'; intro *)
    (*        | |- (exists x : ?X, _) <-> (exists y : ?X, _) => apply base.exist_proper; intro *)
    (*        | |- (forall x : ?X, _) <-> (forall y : ?X, _) => apply base.forall_proper; intro *)
    (*        | |- wp ?m _ ?Œπ -> wp ?m _ ?Œπ => apply wp_monotonic; intro *)
    (*        | |- wp ?m _ ?Œπ <-> wp ?m _ ?Œπ => apply wp_equiv; intro *)
    (*        | |- ?w ‚äí ?w => apply wrefl *)
    (*        | |- ?POST (@inst _ _ _ ?Œ£1 ?x1 ?Œπ1) <-> ?POST (@inst _ _ _ ?Œ£2 ?x2 ?Œπ2) => *)
    (*          assert (@inst _ _ _ Œ£1 x1 Œπ1 = @inst _ _ _ Œ£2 x2 Œπ2) as ->; auto *)
    (*        | |- ?POST (?inst _ _ _ ?Œ£1 ?x1 ?Œπ1) -> ?POST (@inst _ _ _ ?Œ£2 ?x2 ?Œπ2) => *)
    (*          assert (@inst _ _ _ Œ£1 x1 Œπ1 = @inst _ _ _ Œ£2 x2 Œπ2) as ->; auto *)
    (*        | Hdcl : mapping_dcl ?f |- *)
    (*          inst (?f ?w ?œâ _) _ = inst (?f ?w ?œâ _) _ => *)
    (*          apply (Hdcl w œâ w œâ wrefl) *)
    (*        | Hdcl : mapping_dcl ?f |- *)
    (*          inst (?f ?w0 wrefl _) _ = inst (?f ?w1 ?œâ01 _) _ => *)
    (*          apply (Hdcl w0 wrefl w1 œâ01 œâ01) *)
    (*        | Hdcl : mapping_dcl ?f |- *)
    (*          inst (?f ?w1 ?œâ01 _) _ = inst (?f ?w0 wrefl _) _ => *)
    (*          symmetry; apply (Hdcl w0 wrefl w1 œâ01 œâ01) *)
    (*        | Hdcl : arrow_dcl ?f |- *)
    (*          wp (?f ?w ?œâ _) _ _ -> wp (?f ?w ?œâ _) _ _  => *)
    (*          apply (Hdcl w œâ w œâ wrefl) *)
    (*        end). *)

  End SDijk.

  Section Configuration.

    Record Config : Type :=
      MkConfig
        { config_debug_function : forall Œî œÑ, ùë≠ Œî œÑ -> bool;
        }.

    Definition default_config : Config :=
      {| config_debug_function _ _ f := false;
      |}.

  End Configuration.

  Definition SMut (Œì1 Œì2 : PCtx) (A : TYPE) : TYPE :=
    ‚ñ°(A -> SStore Œì2 -> SHeap -> ùïä) -> SStore Œì1 -> SHeap -> ùïä.
  Bind Scope smut_scope with SMut.

  Module SMut.

    Section Basic.

      Definition dijkstra {Œì} {A : TYPE} :
        ‚ä¢ SDijkstra A -> SMut Œì Œì A.
      Proof.
        intros w0 m POST Œ¥0 h0.
        apply m.
        intros w1 œâ01 a1.
        apply POST; auto.
        apply (persist (A := SStore Œì) Œ¥0 œâ01).
        apply (persist (A := SHeap) h0 œâ01).
      Defined.

      Definition pure {Œì} {A : TYPE} :
        ‚ä¢ A -> SMut Œì Œì A.
      Proof.
        intros w0 a k.
        apply k; auto. apply acc_refl.
      Defined.

      Definition bind {Œì1 Œì2 Œì3 A B} :
        ‚ä¢ SMut Œì1 Œì2 A -> ‚ñ°(A -> SMut Œì2 Œì3 B) -> SMut Œì1 Œì3 B.
      Proof.
        intros w0 ma f k.
        unfold SMut, Impl, Box in *.
        apply ma; auto.
        intros w1 œâ01 a1.
        apply f; auto.
        apply (four k œâ01).
      Defined.

      Definition bind_box {Œì1 Œì2 Œì3 A B} :
        ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(A -> SMut Œì2 Œì3 B) -> ‚ñ°(SMut Œì1 Œì3 B) :=
        fun w0 m f => bind <$> m <*> four f.

      (* Definition strength {Œì1 Œì2 A B Œ£} `{Subst A, Subst B} (ma : SMut Œì1 Œì2 A Œ£) (b : B Œ£) : *)
      (*   SMut Œì1 Œì2 (fun Œ£ => A Œ£ * B Œ£)%type Œ£ := *)
      (*   bind ma (fun _ Œ∂ a => pure (a, subst b Œ∂)). *)

      Definition bind_right {Œì1 Œì2 Œì3 A B} :
        ‚ä¢ SMut Œì1 Œì2 A -> ‚ñ°(SMut Œì2 Œì3 B) -> SMut Œì1 Œì3 B.
      Proof.
        intros w0 m k POST.
        apply m.
        intros w1 œâ01 a1.
        apply k. auto.
        intros w2 œâ12 b2.
        apply (four POST œâ01); auto.
      Defined.

      (* Definition bind_left {Œì1 Œì2 Œì3 A B} `{Subst A} : *)
      (*   ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(SMut Œì2 Œì3 B) -> ‚ñ°(SMut Œì1 Œì3 A). *)
      (* Proof. *)
      (*   intros w0 ma mb. *)
      (*   apply (bbind ma). *)
      (*   intros w1 œâ01 a1 Œ¥1 h1. *)
      (*   apply (bind (mb w1 œâ01 Œ¥1 h1)). *)
      (*   intros w2 œâ12 [_ Œ¥2 h2]. *)
      (*   apply (pure). *)
      (*   apply (subst a1 œâ12). *)
      (*   auto. *)
      (*   auto. *)
      (* Defined. *)

      (* Definition map {Œì1 Œì2 A B} `{Subst A, Subst B} : *)
      (*   ‚ä¢ ‚ñ°(SMut Œì1 Œì2 A) -> ‚ñ°(A -> B) -> ‚ñ°(SMut Œì1 Œì2 B) := *)
      (*   fun w0 ma f Œ£1 Œ∂01 pc1 Œ¥1 h1 => *)
      (*     map pc1 *)
      (*       (fun Œ£2 Œ∂12 pc2 '(MkSMutResult a2 Œ¥2 h2) => *)
      (*          MkSMutResult (f Œ£2 (subst Œ∂01 Œ∂12) pc2 a2) Œ¥2 h2) *)
      (*        (ma Œ£1 Œ∂01 pc1 Œ¥1 h1). *)

      Definition error {Œì1 Œì2 A D} (func : string) (msg : string) (data:D) :
        ‚ä¢ SMut Œì1 Œì2 A :=
        fun w _ Œ¥ h =>
          error
            (EMsgHere
               {| msg_function := func;
                  msg_message := msg;
                  msg_program_context := Œì1;
                  msg_localstore := Œ¥;
                  msg_heap := h;
                  msg_pathcondition := wco w
               |}).
      Global Arguments error {_ _ _ _} func msg data {w} _ _.

      Definition block {Œì1 Œì2 A} :
        ‚ä¢ SMut Œì1 Œì2 A.
      Proof.
        intros w0 POST Œ¥ h.
        apply block.
      Defined.

      Definition angelic_binary {Œì1 Œì2 A} :
        ‚ä¢ SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A :=
        fun w m1 m2 POST Œ¥1 h1 =>
          angelic_binary (m1 POST Œ¥1 h1) (m2 POST Œ¥1 h1).
      Definition demonic_binary {Œì1 Œì2 A} :
        ‚ä¢ SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A -> SMut Œì1 Œì2 A :=
        fun w m1 m2 POST Œ¥1 h1 =>
          demonic_binary (m1 POST Œ¥1 h1) (m2 POST Œ¥1 h1).

      Definition angelic_list {A Œì} :
        ‚ä¢ (SStore Œì -> SHeap -> Message) -> List A -> SMut Œì Œì A :=
        fun w msg xs POST Œ¥ h => dijkstra (SDijk.angelic_list (msg Œ¥ h) xs) POST Œ¥ h.

      Definition angelic_finite {Œì} F `{finite.Finite F} :
        ‚ä¢ (SStore Œì -> SHeap -> Message) -> SMut Œì Œì ‚åúF‚åù :=
        fun w msg POST Œ¥ h => dijkstra (SDijk.angelic_finite (msg Œ¥ h)) POST Œ¥ h.

      Definition demonic_finite {Œì} F `{finite.Finite F} :
        ‚ä¢ SMut Œì Œì ‚åúF‚åù :=
        fun w => dijkstra (SDijk.demonic_finite (w:=w)).

      Definition angelic {Œì} (x : option ùë∫) œÉ :
        ‚ä¢ SMut Œì Œì (STerm œÉ) :=
        fun w => dijkstra (SDijk.angelic x œÉ (w:=w)).
      Global Arguments angelic {Œì} x œÉ {w}.

      Definition demonic {Œì} (x : option ùë∫) œÉ :
        ‚ä¢ SMut Œì Œì (STerm œÉ) :=
        fun w => dijkstra (SDijk.demonic x œÉ (w:=w)).
      Global Arguments demonic {Œì} x œÉ {w}.

      Definition debug {AT DT D} `{Subst DT, Inst DT D, OccursCheck DT} {Œì1 Œì2} :
        ‚ä¢ (SStore Œì1 -> SHeap -> DT) -> (SMut Œì1 Œì2 AT) -> (SMut Œì1 Œì2 AT).
      Proof.
        intros w0 d m POST Œ¥ h.
        eapply debug. eauto.
        eauto. eauto.
        apply d. auto. auto.
        apply m; auto.
      Defined.

      Definition angelic_ctx {N : Set} (n : N -> ùë∫) {Œì} :
        ‚ä¢ ‚àÄ Œî : NCtx N Ty, SMut Œì Œì (fun w => NamedEnv (Term w) Œî).
      Proof.
        intros w0 Œî. apply dijkstra.
        apply (SDijk.angelic_ctx n Œî).
      Defined.
      Global Arguments angelic_ctx {N} n {Œì} [w] Œî : rename.

      Definition demonic_ctx {N : Set} (n : N -> ùë∫) {Œì} :
        ‚ä¢ ‚àÄ Œî : NCtx N Ty, SMut Œì Œì (fun w => NamedEnv (Term w) Œî).
      Proof.
        intros w0 Œî. apply dijkstra.
        apply (SDijk.demonic_ctx n Œî).
      Defined.
      Global Arguments demonic_ctx {N} n {Œì} [w] Œî : rename.

    End Basic.

    Module SMutNotations.

      (* Notation "'‚®Ç' x .. y => F" := *)
      (*   (smut_demonic (fun x => .. (smut_demonic (fun y => F)) .. )) : smut_scope. *)

      (* Notation "'‚®Å' x .. y => F" := *)
      (*   (smut_angelic (fun x => .. (smut_angelic (fun y => F)) .. )) : smut_scope. *)

      (* Infix "‚äó" := smut_demonic_binary (at level 40, left associativity) : smut_scope. *)
      (* Infix "‚äï" := smut_angelic_binary (at level 50, left associativity) : smut_scope. *)

      Notation "x <- ma ;; mb" := (bind ma (fun _ _ x => mb)) (at level 80, ma at level 90, mb at level 200, right associativity) : smut_scope.
      Notation "ma >>= f" := (bind ma f) (at level 50, left associativity) : smut_scope.
      Notation "ma >> mb" := (bind_right ma mb) (at level 50, left associativity) : smut_scope.
      (* Notation "m1 ;; m2" := (smut_bind_right m1 m2) : smut_scope. *)

    End SMutNotations.
    Import SMutNotations.
    Local Open Scope smut_scope.

    Section AssumeAssert.

      (* Add the provided formula to the path condition. *)
      Definition assume_formula {Œì} :
        ‚ä¢ Formula -> SMut Œì Œì Unit.
      Proof.
        intros w0 fml. apply dijkstra.
        apply (SDijk.assume_formula fml).
      Defined.

      Definition box_assume_formula {Œì} :
        ‚ä¢ Formula -> ‚ñ°(SMut Œì Œì Unit) :=
        fun w0 fml => assume_formula <$> persist fml.

      Definition assert_formula {Œì} :
        ‚ä¢ Formula -> SMut Œì Œì Unit :=
        fun w0 fml POST Œ¥0 h0 =>
          dijkstra
            (SDijk.assert_formula
               {| msg_function := "smut_assert_formula";
                  msg_message := "Proof obligation";
                  msg_program_context := Œì;
                  msg_localstore := Œ¥0;
                  msg_heap := h0;
                  msg_pathcondition := wco w0
               |} fml)
            POST Œ¥0 h0.

      Definition box_assert_formula {Œì} :
        ‚ä¢ Formula -> ‚ñ°(SMut Œì Œì Unit) :=
        fun w0 fml => assert_formula <$> persist fml.

      Definition assert_formulas {Œì} :
        ‚ä¢ List Formula -> SMut Œì Œì Unit.
      Proof.
        intros w0 fmls POST Œ¥0 h0.
        eapply dijkstra.
        apply SDijk.assert_formulas.
        apply
          {| msg_function := "smut_assert_formula";
             msg_message := "Proof obligation";
             msg_program_context := Œì;
             msg_localstore := Œ¥0;
             msg_heap := h0;
             msg_pathcondition := wco w0
          |}.
        apply fmls.
        apply POST.
        apply Œ¥0.
        apply h0.
      Defined.

    End AssumeAssert.

    Section PatternMatching.

      (* Definition angelic_match_bool {Œì} : *)
      (*   ‚ä¢ STerm ty_bool -> SMut Œì Œì ‚åúbool‚åù := *)
      (*   fun w t POST Œ¥ h => *)
      (*     dijkstra *)
      (*       (SDijk.angelic_match_bool *)
      (*          {| msg_function := "SMut.angelic_match_bool"; *)
      (*             msg_message := "pattern match assertion"; *)
      (*             msg_program_context := Œì; *)
      (*             msg_localstore := Œ¥; *)
      (*             msg_heap := h; *)
      (*             msg_pathcondition := wco w *)
      (*          |} t) *)
      (*       POST Œ¥ h. *)

      (* Definition demonic_match_bool {Œì} : *)
      (*   ‚ä¢ STerm ty_bool -> SMut Œì Œì ‚åúbool‚åù := *)
      (*   fun w t => dijkstra (SDijk.demonic_match_bool t). *)

      Definition angelic_match_bool' {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kt kf.
        apply angelic_binary.
        - eapply bind_right.
          apply assert_formula.
          (* apply *)
          (*   {| msg_function        := "smut_angelic_match_bool"; *)
          (*      msg_message         := "pattern match assertion"; *)
          (*      msg_program_context := Œì1; *)
          (*      msg_localstore      := Œ¥0; *)
          (*      msg_heap            := h0; *)
          (*      msg_pathcondition   := wco w0; *)
          (*   |}. *)
          apply (formula_bool t).
          apply kt.
        - eapply bind_right.
          apply assert_formula.
          (* apply *)
          (*   {| msg_function        := "smut_angelic_match_bool"; *)
          (*      msg_message         := "pattern match assertion"; *)
          (*      msg_program_context := Œì1; *)
          (*      msg_localstore      := Œ¥0; *)
          (*      msg_heap            := h0; *)
          (*      msg_pathcondition   := wco w0; *)
          (*   |}. *)
          apply (formula_bool (term_not t)).
          apply kf.
      Defined.

      Definition angelic_match_bool {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT :=
        fun w0 t kt kf =>
          match term_get_lit t with
          | Some true => T kt
          | Some false => T kf
          | None => angelic_match_bool' t kt kf
          end.

      Definition box_angelic_match_bool {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t kt kf =>
          angelic_match_bool <$> persist__term t <*> four kt <*> four kf.

      Definition demonic_match_bool' {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kt kf.
        apply demonic_binary.
        - eapply bind_right.
          apply assume_formula.
          apply (formula_bool t).
          apply kt.
        - eapply bind_right.
          apply assume_formula.
          apply (formula_bool (term_not t)).
          apply kf.
      Defined.

      Definition demonic_match_bool {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT :=
        fun w0 t kt kf =>
          match term_get_lit t with
          | Some true => T kt
          | Some false => T kf
          | None => demonic_match_bool' t kt kf
          end.

      Definition box_demonic_match_bool {AT} {Œì1 Œì2} :
        ‚ä¢ STerm ty_bool -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t kt kf =>
          demonic_match_bool <$> persist__term t <*> four kt <*> four kf.

      Definition angelic_match_enum {AT E} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_enum E) -> (‚åúùë¨ùë≤ E‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t cont.
        eapply bind.
        apply (angelic_finite (F := ùë¨ùë≤ E)).
        intros Œ¥ h.
        apply
            {| msg_function        := "SMut.angelic_match_enum";
               msg_message         := "pattern match assertion";
               msg_program_context := Œì1;
               msg_localstore      := Œ¥;
               msg_heap            := h;
               msg_pathcondition   := wco w0;
            |}.
        intros w1 œâ01 EK.
        eapply bind_right.
        apply (assert_formula (formula_eq (persist__term t œâ01) (term_enum E EK))).
        apply (four (cont EK)). auto.
      Defined.

      Definition demonic_match_enum {A E} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_enum E) -> (‚åúùë¨ùë≤ E‚åù -> ‚ñ°(SMut Œì1 Œì2 A)) -> SMut Œì1 Œì2 A.
      Proof.
        intros w0 t cont.
        eapply bind.
        apply (demonic_finite (F := ùë¨ùë≤ E)).
        intros w1 œâ01 EK.
        eapply bind_right.
        apply (assume_formula (formula_eq (persist__term t œâ01) (term_enum E EK))).
        apply (four (cont EK)). auto.
      Defined.

      Definition box_demonic_match_enum {AT E} {Œì1 Œì2} :
        ‚ä¢ STerm (ty_enum E) -> (‚åúùë¨ùë≤ E‚åù -> ‚ñ°(SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k =>
          demonic_match_enum
            <$> persist__term t
            <*> (fun (w1 : World) (œâ01 : w0 ‚äí w1) (EK : ùë¨ùë≤ E) => four (k EK) œâ01).

      Definition angelic_match_sum {AT Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kinl kinr.
        apply angelic_binary.
        - eapply bind.
          apply (angelic (Some x) œÉ).
          intros w1 œâ01 t1.
          eapply bind_right.
          apply assert_formula.
          apply (formula_eq (term_inl t1) (persist__term t œâ01)).
          intros w2 œâ12.
          apply (four kinl œâ01). auto.
          apply (persist__term t1 œâ12).
        - eapply bind.
          apply (angelic (Some y) œÑ).
          intros w1 œâ01 t1.
          eapply bind_right.
          apply assert_formula.
          apply (formula_eq (term_inr t1) (persist__term t œâ01)).
          intros w2 œâ12.
          apply (four kinr œâ01). auto.
          apply (persist__term t1 œâ12).
      Defined.

      Definition demonic_match_sum {AT Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kinl kinr.
        apply demonic_binary.
        - eapply bind.
          apply (demonic (Some x) œÉ).
          intros w1 œâ01 t1.
          eapply bind_right.
          apply assume_formula.
          apply (formula_eq (term_inl t1) (persist__term t œâ01)).
          intros w2 œâ12.
          apply (four kinl œâ01). auto.
          apply (persist__term t1 œâ12).
        - eapply bind.
          apply (demonic (Some y) œÑ).
          intros w1 œâ01 t1.
          eapply bind_right.
          apply assume_formula.
          apply (formula_eq (term_inr t1) (persist__term t œâ01)).
          intros w2 œâ12.
          apply (four kinr œâ01). auto.
          apply (persist__term t1 œâ12).
      Defined.

      Definition demonic_match_sum_lifted {AT Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_sum œÉ œÑ) -> ‚ñ°(STerm œÉ -> SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t kinl kinr POST Œ¥0 h0.
        eapply (SDijk.demonic_match_sum (A := fun w => SStore Œì2 w * SHeap w * AT w)%type x _ y _ _ t).
        - intros w1 œâ01 t' POSTl.
          apply kinl. auto. auto.
          intros w2 œâ12 a2 Œ¥2 h2.
          apply POSTl. auto. auto.
          apply (persist (A := SStore _) Œ¥0 œâ01).
          apply (persist (A := SHeap) h0 œâ01).
        - intros w1 œâ01 t' POSTr.
          apply kinr. auto. auto.
          intros w2 œâ12 a2 Œ¥2 h2.
          apply POSTr. auto. auto.
          apply (persist (A := SStore _) Œ¥0 œâ01).
          apply (persist (A := SHeap) h0 œâ01).
        - intros w1 œâ01 [[Œ¥1 h1] a1]. apply POST. auto. auto. auto. auto.
      Defined.

      Definition angelic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
        ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t knil kcons.
        apply angelic_binary.
        - eapply bind_right.
          apply assert_formula.
          (* apply *)
          (*   {| msg_function        := "SMut.angelic_match_list"; *)
          (*      msg_message         := "pattern match assertion"; *)
          (*      msg_program_context := Œì1; *)
          (*      msg_localstore      := Œ¥0; *)
          (*      msg_heap            := h0; *)
          (*      msg_pathcondition   := wco w0; *)
          (*   |}. *)
          apply (formula_eq (term_lit (ty_list œÉ) []) t).
          intros w1 œâ01.
          apply knil. auto.
        - eapply bind.
          apply (angelic (Some x) œÉ).
          intros w1 œâ01 thead.
          eapply bind.
          apply (angelic (Some y) (ty_list œÉ)).
          intros w2 œâ12 ttail.
          eapply bind_right.
          apply assert_formula.
          (* apply *)
          (*   {| msg_function        := "SMut.angelic_match_list"; *)
          (*      msg_message         := "pattern match assertion"; *)
          (*      msg_program_context := Œì1; *)
          (*      msg_localstore      := subst Œ¥0 (acc_trans œâ01 œâ12); *)
          (*      msg_heap            := subst h0 (acc_trans œâ01 œâ12); *)
          (*      msg_pathcondition   := wco w2; *)
          (*   |}. *)
          apply (formula_eq (term_binop binop_cons (persist__term thead œâ12) ttail) (persist__term t (acc_trans œâ01 œâ12))).
          intros w3 œâ23.
          apply (four kcons (acc_trans œâ01 œâ12)). auto.
          apply (persist__term thead (acc_trans œâ12 œâ23)).
          apply (persist__term ttail œâ23).
      Defined.

      Definition box_angelic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
        ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t knil kcons => angelic_match_list x y <$> persist__term t <*> four knil <*> four kcons.

      Definition demonic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
        ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t knil kcons.
        apply demonic_binary.
        - eapply bind_right.
          apply assume_formula.
          apply (formula_eq (term_lit (ty_list œÉ) []) t).
          intros w1 œâ01.
          apply knil. auto.
        - eapply bind.
          apply (demonic (Some x) œÉ).
          intros w1 œâ01 thead.
          eapply bind.
          apply (demonic (Some y) (ty_list œÉ)).
          intros w2 œâ12 ttail.
          eapply bind_right.
          apply assume_formula.
          apply (formula_eq (term_binop binop_cons (persist__term thead œâ12) ttail) (persist__term t (acc_trans œâ01 œâ12))).
          intros w3 œâ23.
          apply (four kcons (acc_trans œâ01 œâ12)). auto.
          apply (persist__term thead (acc_trans œâ12 œâ23)).
          apply (persist__term ttail œâ23).
      Defined.

      Definition box_demonic_match_list {AT Œì1 Œì2} (x y : ùë∫) {œÉ} :
        ‚ä¢ STerm (ty_list œÉ) -> ‚ñ°(SMut Œì1 Œì2 AT) -> ‚ñ°(STerm œÉ -> STerm (ty_list œÉ) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t knil kcons => demonic_match_list x y <$> persist__term t <*> four knil <*> four kcons.

      Definition angelic_match_prod {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        apply (bind (angelic (Some x) œÉ)).
        intros w1 œâ01 tœÉ.
        apply (bind (angelic (Some y) œÑ)).
        intros w2 œâ12 tœÑ.
        eapply bind_right.
        apply assert_formula.
          (* {| msg_function        := "SMut.angelic_match_prod"; *)
          (*    msg_message         := "pattern match assertion"; *)
          (*    msg_program_context := Œì1; *)
          (*    msg_localstore      := subst Œ¥0 (acc_trans œâ01 œâ12); *)
          (*    msg_heap            := subst h0 (acc_trans œâ01 œâ12); *)
          (*    msg_pathcondition   := wco w2; *)
          (* |}. *)
        apply (formula_eq (term_binop binop_pair (persist__term tœÉ œâ12) tœÑ) (persist__term t (acc_trans œâ01 œâ12))).
        intros w3 œâ23.
        apply (four k (acc_trans œâ01 œâ12)). auto.
        apply (persist__term tœÉ (acc_trans œâ12 œâ23)).
        apply (persist__term tœÑ œâ23).
      Defined.

      Definition box_angelic_match_prod {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => angelic_match_prod x y <$> persist__term t <*> four k.

      Definition demonic_match_prod {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        apply (bind (demonic (Some x) œÉ)).
        intros w1 œâ01 tœÉ.
        apply (bind (demonic (Some y) œÑ)).
        intros w2 œâ12 tœÑ.
        eapply bind_right.
        apply assume_formula.
        apply (formula_eq (term_binop binop_pair (persist__term tœÉ œâ12) tœÑ) (persist__term t (acc_trans œâ01 œâ12))).
        intros w3 œâ23.
        apply (four k (acc_trans œâ01 œâ12)). auto.
        apply (persist__term tœÉ (acc_trans œâ12 œâ23)).
        apply (persist__term tœÑ œâ23).
      Defined.

      Definition box_demonic_match_prod {AT} {Œì1 Œì2} (x y : ùë∫) {œÉ œÑ} :
        ‚ä¢ STerm (ty_prod œÉ œÑ) -> ‚ñ°(STerm œÉ -> STerm œÑ -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => demonic_match_prod x y <$> persist__term t <*> four k.

      Definition angelic_match_record' {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        eapply bind.
        apply (angelic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply bind_right.
        apply assert_formula.
          (* {| msg_function        := "SMut.angelic_match_record"; *)
          (*    msg_message         := "pattern match assertion"; *)
          (*    msg_program_context := Œì1; *)
          (*    msg_localstore      := subst Œ¥0 (acc_trans œâ01 œâ12); *)
          (*    msg_heap            := subst h0 (acc_trans œâ01 œâ12); *)
          (*    msg_pathcondition   := wco w2; *)
          (* |}. *)
        apply (formula_eq (term_record R (record_pattern_match_env_reverse p ts)) (persist__term t œâ01)).
        intros w2 œâ12.
        apply (four k œâ01). auto.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition angelic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        destruct (term_get_record t).
        - apply (T k).
          apply (record_pattern_match_env p n0).
        - apply (angelic_match_record' n p t k).
      Defined.

      Definition box_angelic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => angelic_match_record n p <$> persist__term t <*> four k.

      Definition demonic_match_record' {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        eapply bind.
        apply (demonic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply bind_right.
        apply assume_formula.
        apply (formula_eq (term_record R (record_pattern_match_env_reverse p ts)) (persist__term t œâ01)).
        intros w2 œâ12.
        apply (four k œâ01). auto.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition demonic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        destruct (term_get_record t).
        - apply (T k).
          apply (record_pattern_match_env p n0).
        - apply (demonic_match_record' n p t k).
      Defined.

      Definition box_demonic_match_record {N : Set} (n : N -> ùë∫) {AT R Œì1 Œì2} {Œî : NCtx N Ty} (p : RecordPat (ùëπùë≠_Ty R) Œî) :
        ‚ä¢ STerm (ty_record R) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => demonic_match_record n p <$> persist__term t <*> four k.

      Definition angelic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
        ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        eapply bind.
        apply (angelic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply bind_right.
        apply assert_formula.
          (* {| msg_function        := "SMut.angelic_match_tuple"; *)
          (*    msg_message         := "pattern match assertion"; *)
          (*    msg_program_context := Œì1; *)
          (*    msg_localstore      := subst Œ¥0 (acc_trans œâ01 œâ12); *)
          (*    msg_heap            := subst h0 (acc_trans œâ01 œâ12); *)
          (*    msg_pathcondition   := wco w2; *)
        (* |}. *)
        apply (formula_eq (term_tuple (tuple_pattern_match_env_reverse p ts)) (persist__term t œâ01)).
        intros w2 œâ12.
        apply (four k œâ01). auto.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition box_angelic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
        ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => angelic_match_tuple n p <$> persist__term t <*> four k.

      Definition demonic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
        ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t k.
        eapply bind.
        apply (demonic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply bind_right.
        apply assume_formula.
        apply (formula_eq (term_tuple (tuple_pattern_match_env_reverse p ts)) (persist__term t œâ01)).
        intros w2 œâ12.
        apply (four k œâ01). auto.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition box_demonic_match_tuple {N : Set} (n : N -> ùë∫) {AT œÉs Œì1 Œì2} {Œî : NCtx N Ty} (p : TuplePat œÉs Œî) :
        ‚ä¢ STerm (ty_tuple œÉs) -> ‚ñ°((fun w => NamedEnv (Term w) Œî) -> SMut Œì1 Œì2 AT) -> ‚ñ°(SMut Œì1 Œì2 AT) :=
        fun w0 t k => demonic_match_tuple n p <$> persist__term t <*> four k.

      Definition angelic_match_pattern {N : Set} (n : N -> ùë∫) {œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) {Œì} :
        ‚ä¢ (SStore Œì -> SHeap -> Message) -> STerm œÉ -> SMut Œì Œì (fun w => NamedEnv (Term w) Œî).
      Proof.
        intros w0 msg t.
        eapply (bind).
        apply (angelic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply (bind_right).
        apply assert_formula.
        apply (formula_eq (pattern_match_env_reverse p ts) (persist__term t œâ01)).
        intros w2 œâ12.
        apply pure.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition demonic_match_pattern {N : Set} (n : N -> ùë∫) {œÉ} {Œî : NCtx N Ty} (p : Pattern Œî œÉ) {Œì} :
        ‚ä¢ STerm œÉ -> SMut Œì Œì (fun w => NamedEnv (Term w) Œî).
      Proof.
        intros w0 t.
        eapply (bind).
        apply (demonic_ctx n Œî).
        intros w1 œâ01 ts.
        eapply (bind_right).
        apply assume_formula.
        apply (formula_eq (pattern_match_env_reverse p ts) (persist__term t œâ01)).
        intros w2 œâ12.
        apply pure.
        apply (persist (A := fun w => (fun Œ£ => NamedEnv (Term Œ£) Œî) (wctx w)) ts œâ12).
      Defined.

      Definition angelic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
        {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
        ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t cont.
        eapply bind.
        apply (angelic_finite (F := ùëºùë≤ U)).
        intros Œ¥ h.
        apply
            {| msg_function        := "SMut.angelic_match_union";
               msg_message         := "pattern match assertion";
               msg_program_context := Œì1;
               msg_localstore      := Œ¥;
               msg_heap            := h;
               msg_pathcondition   := wco w0;
            |}.
        intros w1 œâ01 UK.
        eapply bind.
        apply (angelic None (ùëºùë≤_Ty UK)).
        intros w2 œâ12 t__field.
        eapply bind_right.
        apply assert_formula.
        apply (formula_eq (term_union U UK t__field) (persist__term t (acc_trans œâ01 œâ12))).
        intros w3 œâ23.
        eapply bind.
        apply (angelic_match_pattern n (p UK)).
        intros Œ¥ h.
        apply
            {| msg_function        := "SMut.angelic_match_union";
               msg_message         := "pattern match assertion";
               msg_program_context := Œì1;
               msg_localstore      := Œ¥;
               msg_heap            := h;
               msg_pathcondition   := wco w3;
            |}.
        apply (persist__term t__field œâ23).
        apply (four (cont UK)).
        apply (acc_trans œâ01 (acc_trans œâ12 œâ23)).
      Defined.

      Definition box_angelic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
        {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
        ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT).
      Proof.
        refine (fun w0 t k => angelic_match_union n p <$> persist__term t <*> _).
        intros w1 œâ01 UK. apply (four (k UK) œâ01).
      Defined.

      Definition demonic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
        {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
        ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t cont.
        eapply bind.
        apply (demonic_finite (F := ùëºùë≤ U)).
        intros w1 œâ01 UK.
        eapply bind.
        apply (demonic None (ùëºùë≤_Ty UK)).
        intros w2 œâ12 t__field.
        eapply bind_right.
        apply assume_formula.
        apply (formula_eq (term_union U UK t__field) (persist__term t (acc_trans œâ01 œâ12))).
        intros w3 œâ23.
        eapply bind.
        apply (demonic_match_pattern n (p UK)).
        apply (persist__term t__field œâ23).
        apply (four (cont UK)).
        apply (acc_trans œâ01 (acc_trans œâ12 œâ23)).
      Defined.

      Definition box_demonic_match_union {N : Set} (n : N -> ùë∫) {AT Œì1 Œì2 U}
        {Œî : ùëºùë≤ U -> NCtx N Ty} (p : forall K : ùëºùë≤ U, Pattern (Œî K) (ùëºùë≤_Ty K)) :
        ‚ä¢ STerm (ty_union U) -> (‚àÄ K, ‚ñ°((fun w => NamedEnv (Term w) (Œî K)) -> SMut Œì1 Œì2 AT)) -> ‚ñ°(SMut Œì1 Œì2 AT).
      Proof.
        refine (fun w0 t k => demonic_match_union n p <$> persist__term t <*> _).
        intros w1 œâ01 UK. apply (four (k UK) œâ01).
      Defined.

    End PatternMatching.

    Section State.

      Definition pushpop {AT Œì1 Œì2 x œÉ} :
        ‚ä¢ STerm œÉ -> SMut (Œì1 ‚ñª x‚à∑œÉ) (Œì2 ‚ñª x‚à∑œÉ) AT -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 t m POST Œ¥ h.
        apply m.
        intros w1 œâ01 a1 Œ¥1 h1.
        apply POST. auto. auto. apply (env_tail Œ¥1). apply h1.
        apply env_snoc.
        apply Œ¥.
        apply t.
        apply h.
      Defined.

      Definition pushspops {AT Œì1 Œì2 Œî} :
        ‚ä¢ SStore Œî -> SMut (Œì1 ‚ñª‚ñª Œî) (Œì2 ‚ñª‚ñª Œî) AT -> SMut Œì1 Œì2 AT.
      Proof.
        intros w0 Œ¥Œî m POST Œ¥ h.
        apply m.
        intros w1 œâ01 a1 Œ¥1 h1.
        apply POST. auto. auto. apply (env_drop Œî Œ¥1). apply h1.
        apply env_cat.
        apply Œ¥.
        apply Œ¥Œî.
        apply h.
      Defined.

      Definition get_local {Œì} : ‚ä¢ SMut Œì Œì (SStore Œì) :=
        fun w0 POST Œ¥ => T POST Œ¥ Œ¥.
      Definition put_local {Œì1 Œì2} : ‚ä¢ SStore Œì2 -> SMut Œì1 Œì2 Unit :=
        fun w0 Œ¥ POST _ => T POST tt Œ¥.
      Definition get_heap {Œì} : ‚ä¢ SMut Œì Œì SHeap :=
        fun w0 POST Œ¥ h => T POST h Œ¥ h.
      Definition put_heap {Œì} : ‚ä¢ SHeap -> SMut Œì Œì Unit :=
        fun w0 h POST Œ¥ _ => T POST tt Œ¥ h.

      Definition eval_exp {Œì œÉ} (e : Exp Œì œÉ) :
        ‚ä¢ SMut Œì Œì (STerm œÉ).
        intros w POST Œ¥ h.
        apply (T POST).
        apply (seval_exp Œ¥ e).
        auto.
        auto.
      Defined.

      Definition eval_exps {Œì} {œÉs : PCtx} (es : NamedEnv (Exp Œì) œÉs) :
        ‚ä¢ SMut Œì Œì (SStore œÉs).
        intros w POST Œ¥ h.
        apply (T POST).
        refine (env_map _ es).
        intros b. apply (seval_exp Œ¥).
        auto.
        auto.
      Defined.

      Definition assign {Œì} x {œÉ} {xIn : x‚à∑œÉ ‚àà Œì} : ‚ä¢ STerm œÉ -> SMut Œì Œì Unit :=
        fun w0 t POST Œ¥ => T POST tt (Œ¥ ‚ü™ x ‚Ü¶ t ‚ü´).
      Global Arguments assign {Œì} x {œÉ xIn w} v.

    End State.

    Section ProduceConsume.

      Definition produce_chunk {Œì} :
        ‚ä¢ Chunk -> SMut Œì Œì Unit :=
        fun w0 c k Œ¥ h => T k tt Œ¥ (cons c h).

      Fixpoint try_consume_chunk_exact {Œ£} (h : SHeap Œ£) (c : Chunk Œ£) {struct h} : option (SHeap Œ£) :=
        match h with
        | nil       => None
        | cons c' h =>
          if chunk_eqb c c'
          then Some (if is_duplicable c then (cons c h) else h)
          else option_map (cons c') (try_consume_chunk_exact h c)
        end.

      Equations(noeqns) match_chunk {w : World} (c1 c2 : Chunk w) : List Formula w :=
        match_chunk (chunk_user p1 vs1) (chunk_user p2 vs2)
        with eq_dec p1 p2 => {
          match_chunk (chunk_user p1 vs1) (chunk_user ?(p1) vs2) (left eq_refl) := formula_eqs_ctx vs1 vs2;
          match_chunk (chunk_user p1 vs1) (chunk_user p2 vs2) (right _) :=
            cons (formula_bool (term_lit ty_bool false)) nil
        };
        match_chunk (chunk_ptsreg r1 t1) (chunk_ptsreg r2 t2)
        with eq_dec_het r1 r2 => {
          match_chunk (chunk_ptsreg r1 v1) (chunk_ptsreg ?(r1) v2) (left eq_refl) := cons (formula_eq v1 v2) nil;
          match_chunk (chunk_ptsreg r1 v1) (chunk_ptsreg r2 v2) (right _)      :=
            cons (formula_bool (term_lit ty_bool false)) nil
        };
        match_chunk (chunk_conj c11 c12) (chunk_conj c21 c22) :=
          app (match_chunk c11 c21) (match_chunk c12 c22);
        match_chunk (chunk_wand c11 c12) (chunk_wand c21 c22) :=
          app (match_chunk c11 c21) (match_chunk c12 c22);
        match_chunk _ _  := cons (formula_bool (term_lit ty_bool false)) nil.

      Lemma inst_match_chunk {w : World} (c1 c2 : Chunk w) (Œπ : SymInstance w) :
        instpc (match_chunk c1 c2) Œπ <-> inst c1 Œπ = inst c2 Œπ.
      Proof.
        revert c2.
        induction c1 as [p1 ts1|œÉ1 r1 t1|c11 IHc11 c12 IHc12|c11 IHc11 c12 IHc12];
          intros [p2 ts2|œÉ2 r2 t2|c21 c22|c21 c22]; cbn; rewrite ?inst_pathcondition_cons;
            try (split; intros Heq; cbn in Heq; destruct_conjs; discriminate);
            change (inst_chunk ?c ?Œπ) with (inst c Œπ).
        - split.
          + destruct (eq_dec p1 p2) as [Heqp|Hneqp].
            * destruct Heqp; cbn. rewrite inst_formula_eqs_ctx. intuition.
            * intros HYP. cbv in HYP. discriminate.
          + remember (inst ts1 Œπ) as vs1.
            remember (inst ts2 Œπ) as vs2.
            intros Heq. dependent elimination Heq.
            rewrite EqDec.eq_dec_refl. cbn.
            rewrite inst_formula_eqs_ctx.
            subst. auto.
        - split.
          + destruct (eq_dec_het r1 r2).
            * dependent elimination e; cbn.
              rewrite inst_pathcondition_cons.
              now intros [-> _].
            * intros HYP; cbv in HYP. discriminate.
          + remember (inst t1 Œπ) as v1.
            remember (inst t2 Œπ) as v2.
            intros Heq. dependent elimination Heq.
            unfold eq_dec_het.
            rewrite EqDec.eq_dec_refl. cbn.
            rewrite inst_pathcondition_cons.
            subst. split; auto. constructor.
        - rewrite inst_pathcondition_app, IHc11, IHc12.
          split; [intuition|].
          generalize (inst c11 Œπ), (inst c12 Œπ), (inst c21 Œπ), (inst c22 Œπ).
          clear. intros * Heq. dependent elimination Heq; auto.
        - rewrite inst_pathcondition_app, IHc11, IHc12.
          split; [intuition|].
          generalize (inst c11 Œπ), (inst c12 Œπ), (inst c21 Œπ), (inst c22 Œπ).
          clear. intros * Heq. dependent elimination Heq; auto.
      Qed.

      Definition consume_chunk {Œì} :
        ‚ä¢ Chunk -> SMut Œì Œì Unit.
      Proof.
        intros w0 c.
        eapply bind.
        apply get_heap.
        intros w1 œâ01 h.
        destruct (try_consume_chunk_exact h (persist c œâ01)) as [h'|].
        - apply put_heap.
          apply h'.
        - eapply bind.
          apply (angelic_list
                   (A := Pair Chunk SHeap)
                   (fun Œ¥ h =>
                      {| msg_function := "consume_chunk";
                         msg_message := "Empty extraction";
                         msg_program_context := Œì;
                         msg_localstore := Œ¥;
                         msg_heap := h;
                         msg_pathcondition := wco w1
                      |})
                   (heap_extractions h)).
          intros w2 œâ12 [c' h'].
          eapply bind_right.
          apply assert_formulas.
          apply (match_chunk (persist c (acc_trans œâ01 œâ12)) c').
          intros w3 œâ23.
          apply put_heap.
          apply (persist (A := SHeap) h' œâ23).
      Defined.

      (* Definition smut_leakcheck {Œì Œ£} : SMut Œì Œì Unit Œ£ := *)
      (*   smut_get_heap >>= fun _ _ h => *)
      (*   match h with *)
      (*   | nil => smut_pure tt *)
      (*   | _   => smut_error "SMut.leakcheck" "Heap leak" h *)
      (*   end. *)

      Definition produce_fail_recursion {Œì} :
        ‚ä¢ Assertion -> SMut Œì Œì Unit.
      Proof.
        refine
          (fix produce w0 asn {struct asn} :=
             match asn with
             | asn_sep asn1 asn2 =>
               bind_right
                 (produce w0 asn1)
                 (* Recursive call to produce has principal argument equal to "persist asn2 œâ01" *)
                 (* instead of one of the following variables: "asn1" "asn2". *)
                 (produce <$> persist asn2)
             | _ => @block _ _ _ _
             end).
      Abort.

      Definition produce {Œì} :
        ‚ä¢ Assertion -> ‚ñ°(SMut Œì Œì Unit).
      Proof.
        refine (fix produce w0 asn {struct asn} := _).
        destruct asn.
        - apply (box_assume_formula fml).
        - apply (produce_chunk <$> persist c).
        - apply (demonic_match_bool <$> persist__term b <*> four (produce _ asn1) <*> four (produce _ asn2)).
        - intros w1 œâ01.
          apply (demonic_match_enum
                    (persist__term k œâ01)
                    (fun EK : ùë¨ùë≤ E => four (produce w0 (alts EK)) œâ01)).
        - refine (demonic_match_sum (AT := Unit) (Œì1 := Œì) (Œì2 := Œì) xl xr <$> persist__term s <*> four _ <*> four _).
          intros w1 œâ01 t1.
          apply (produce (wsnoc w0 (xl‚à∑œÉ)) asn1).
          apply (acc_snoc_left œâ01 (xl‚à∑œÉ) t1).
          intros w1 œâ01 t1.
          apply (produce (wsnoc w0 (xr‚à∑œÑ)) asn2).
          apply (acc_snoc_left œâ01 (xr‚à∑œÑ) t1).
        - apply (box_demonic_match_list xh xt s).
          + apply (produce _ asn1).
          + intros w1 œâ01 thead ttail.
            apply (produce (wsnoc (wsnoc w0 (xh‚à∑_)) (xt‚à∑_)) asn2 w1).
            apply (acc_snoc_left (acc_snoc_left œâ01 (xh‚à∑_) thead) (xt‚à∑_) ttail).
        - apply (box_demonic_match_prod xl xr s).
          intros w1 œâ01 t1 t2.
          apply (produce (wsnoc (wsnoc w0 (xl‚à∑œÉ1)) (xr‚à∑œÉ2)) asn w1).
          apply (acc_snoc_left (acc_snoc_left œâ01 (xl‚à∑œÉ1) t1) (xr‚à∑œÉ2) t2).
        - apply (box_demonic_match_tuple id p s).
          intros w1 œâ01 ts.
          apply (produce (wcat w0 Œî) asn w1).
          apply acc_cat_left; auto.
        - apply (box_demonic_match_record id p s).
          intros w1 œâ01 ts.
          apply (produce (wcat w0 Œî) asn w1).
          apply acc_cat_left; auto.
        - apply (box_demonic_match_union id alt__pat s).
          intros UK w1 œâ01 ts.
          apply (produce (wcat w0 (alt__ctx UK)) (alt__rhs UK) w1).
          apply acc_cat_left; auto.
        - apply (bind_right <$> produce _ asn1 <*> four (produce _ asn2)).
        - apply (demonic_binary <$> produce _ asn1 <*> produce _ asn2).
        - intros w1 œâ01.
          eapply bind.
          apply (@demonic _ (Some œÇ) œÑ).
          intros w2 œâ12 t2.
          apply (produce (wsnoc w0 (œÇ‚à∑œÑ)) asn w2).
          apply (acc_snoc_left (acc_trans œâ01 œâ12) (œÇ‚à∑œÑ) t2).
        - intros w1 œâ01.
          apply debug.
          intros Œ¥ h.
          apply (MkSDebugAsn (wco w1) Œ¥ h).
          apply pure.
          constructor.
      Defined.

      Definition consume {Œì} :
        ‚ä¢ Assertion -> ‚ñ°(SMut Œì Œì Unit).
      Proof.
        refine (fix consume w0 asn {struct asn} := _).
        destruct asn.
        - apply (box_assert_formula fml).
        - apply (consume_chunk <$> persist c).
        - apply (angelic_match_bool <$> persist__term b <*> four (consume _ asn1) <*> four (consume _ asn2)).
        - intros w1 œâ01.
          apply (angelic_match_enum
                    (persist__term k œâ01)
                    (fun EK : ùë¨ùë≤ E => four (consume w0 (alts EK)) œâ01)).
        - refine (angelic_match_sum (AT := Unit) (Œì1 := Œì) (Œì2 := Œì) xl xr <$> persist__term s <*> four _ <*> four _).
          intros w1 œâ01 t1.
          apply (consume (wsnoc w0 (xl‚à∑œÉ)) asn1).
          apply (acc_snoc_left œâ01 (xl‚à∑œÉ) t1).
          intros w1 œâ01 t1.
          apply (consume (wsnoc w0 (xr‚à∑œÑ)) asn2).
          apply (acc_snoc_left œâ01 (xr‚à∑œÑ) t1).
        - apply (box_angelic_match_list xh xt s).
          + apply (consume _ asn1).
          + intros w1 œâ01 thead ttail.
            apply (consume (wsnoc (wsnoc w0 (xh‚à∑_)) (xt‚à∑_)) asn2 w1).
            apply (acc_snoc_left (acc_snoc_left œâ01 (xh‚à∑_) thead) (xt‚à∑_) ttail).
        - apply (box_angelic_match_prod xl xr s).
          intros w1 œâ01 t1 t2.
          apply (consume (wsnoc (wsnoc w0 (xl‚à∑œÉ1)) (xr‚à∑œÉ2)) asn w1).
          apply (acc_snoc_left (acc_snoc_left œâ01 (xl‚à∑œÉ1) t1) (xr‚à∑œÉ2) t2).
        - apply (box_angelic_match_tuple id p s).
          intros w1 œâ01 ts.
          apply (consume (wcat w0 Œî) asn w1).
          apply acc_cat_left; auto.
        - apply (box_angelic_match_record id p s).
          intros w1 œâ01 ts.
          apply (consume (wcat w0 Œî) asn w1).
          apply acc_cat_left; auto.
        - apply (box_angelic_match_union id alt__pat s).
          intros UK w1 œâ01 ts.
          apply (consume (wcat w0 (alt__ctx UK)) (alt__rhs UK) w1).
          apply acc_cat_left; auto.
        - apply (bind_right <$> consume _ asn1 <*> four (consume _ asn2)).
        - apply (angelic_binary <$> consume _ asn1 <*> consume _ asn2).
        - intros w1 œâ01.
          eapply bind.
          apply (@angelic _ (Some œÇ) œÑ).
          intros w2 œâ12 t2.
          apply (consume (wsnoc w0 (œÇ‚à∑œÑ)) asn w2).
          apply (acc_snoc_left (acc_trans œâ01 œâ12) (œÇ‚à∑œÑ) t2).
        - intros w1 œâ01.
          apply debug.
          intros Œ¥ h.
          apply (MkSDebugAsn (wco w1) Œ¥ h).
          apply pure.
          constructor.
      Defined.

    End ProduceConsume.

    Section Exec.

      Variable cfg : Config.

      Definition call_contract {Œì Œî œÑ} (c : SepContract Œî œÑ) :
        ‚ä¢ SStore Œî -> SMut Œì Œì (STerm œÑ).
      Proof.
        destruct c as [Œ£e Œ¥e req result ens].
        intros w0 args.
        eapply bind.
        apply (angelic_ctx id Œ£e).
        intros w1 œâ01 evars.
        eapply bind_right.
        apply (assert_formulas
                 (* {| *)
                 (*   msg_function := "SMut.call"; *)
                 (*   msg_message := "argument pattern match"; *)
                 (*   msg_program_context := Œì; *)
                 (*   msg_localstore := subst Œ¥0 œâ01; *)
                 (*   msg_heap := subst h0 œâ01; *)
                 (*   msg_pathcondition := wco w1; *)
                 (* |} *) (formula_eqs_nctx (subst Œ¥e evars) (persist args œâ01))).
        intros w2 œâ12.
        eapply bind_right.
        apply (consume (w := @MkWorld Œ£e nil) req).
        refine (acc_trans _ œâ12).
        constructor 2 with evars. cbn. constructor.
        intros w3 œâ23.
        eapply bind.
        apply (demonic (Some result)).
        intros w4 œâ34 res.
        eapply bind_right.
        apply (produce
                 (w := @MkWorld (Œ£e ‚ñª (result‚à∑œÑ)) nil)
                 ens).
        constructor 2 with (sub_snoc (persist (A := Sub _) evars (acc_trans œâ12 (acc_trans œâ23 œâ34))) (result‚à∑œÑ) res).
        cbn. constructor.
        intros w5 œâ45. clear - res œâ45.
        apply pure.
        apply (persist__term res œâ45).
      Defined.

      Definition call_lemma {Œì Œî} (lem : Lemma Œî) :
        ‚ä¢ SStore Œî -> SMut Œì Œì Unit.
      Proof.
        destruct lem as [Œ£e Œ¥e req ens].
        intros w0 args.
        eapply bind.
        apply (angelic_ctx id Œ£e).
        intros w1 œâ01 evars.
        eapply bind_right.
        apply (assert_formulas
                 (* {| *)
                 (*   msg_function := "SMut.call"; *)
                 (*   msg_message := "argument pattern match"; *)
                 (*   msg_program_context := Œì; *)
                 (*   msg_localstore := subst Œ¥0 œâ01; *)
                 (*   msg_heap := subst h0 œâ01; *)
                 (*   msg_pathcondition := wco w1; *)
                 (* |} *) (formula_eqs_nctx (subst Œ¥e evars) (persist args œâ01))).
        intros w2 œâ12.
        eapply bind_right.
        apply (consume (w := @MkWorld Œ£e nil) req).
        refine (acc_trans _ œâ12).
        constructor 2 with evars. cbn. constructor.
        intros w3 œâ23.
        apply (produce
                 (w := @MkWorld Œ£e nil)
                 ens).
        constructor 2 with (persist (A := Sub _) evars (acc_trans œâ12 œâ23)).
        cbn. constructor.
      Defined.

      Definition call_contract_debug {Œì Œî œÑ} (f : ùë≠ Œî œÑ) (c : SepContract Œî œÑ) :
        ‚ä¢ SStore Œî -> SMut Œì Œì (STerm œÑ) :=
        fun w0 Œ¥Œî =>
          let o := call_contract c Œ¥Œî in
          if config_debug_function cfg f
          then
            debug
              (fun Œ¥ h => {| sdebug_call_function_parameters := Œî;
                             sdebug_call_function_result_type := œÑ;
                             sdebug_call_function_name := f;
                             sdebug_call_function_contract := c;
                             sdebug_call_function_arguments := Œ¥Œî;
                             sdebug_call_program_context := Œì;
                             sdebug_call_pathcondition := wco w0;
                             sdebug_call_localstore := Œ¥;
                             sdebug_call_heap := h|})
              o
          else o.

      Definition Exec := forall {Œì œÑ} (s : Stm Œì œÑ), ‚ä¢ SMut Œì Œì (STerm œÑ).

      Section ExecAux.

        Variable rec : Exec.

        Fixpoint exec_aux {Œì œÑ} (s : Stm Œì œÑ) {struct s} :
          ‚ä¢ SMut Œì Œì (STerm œÑ).
        Proof.
          intros w0; destruct s.
          - apply pure. apply (term_lit œÑ l).
          - apply (eval_exp e).
          - eapply bind. apply (exec_aux _ _ s1).
            intros w1 œâ01 t1.
            eapply (pushpop t1).
            apply (exec_aux _ _ s2).
          - eapply (pushspops (lift Œ¥)).
            apply (exec_aux _ _ s).
          - eapply bind.
            apply (exec_aux _ _ s).
            intros w1 œâ01 t.
            eapply bind_right.
            apply (assign x t).
            intros w2 œâ12.
            apply pure.
            apply (subst (T := STerm œÑ) t (sub_acc œâ12)).
          - eapply bind.
            apply (eval_exps es).
            intros w1 œâ01 args.
            destruct (CEnv f) as [c|].
            + apply (call_contract_debug f c args).
            + intros POST Œ¥Œì. refine (rec (Pi f) _ args).
              intros w2 œâ12 res _. apply POST. apply œâ12.
              apply res. refine (persist Œ¥Œì œâ12).
          - rename Œ¥ into Œ¥Œî.
            eapply bind.
            apply get_local.
            intros w1 œâ01 Œ¥1.
            eapply bind_right.
            apply (put_local (lift Œ¥Œî)).
            intros w2 œâ12.
            eapply bind.
            apply (exec_aux _ _ s).
            intros w3 œâ23 t.
            eapply bind_right.
            apply put_local.
            apply (persist (A := SStore _) Œ¥1 (acc_trans œâ12 œâ23)).
            intros w4 œâ34.
            apply pure.
            apply (persist__term t œâ34).
          - eapply bind.
            apply (eval_exps es).
            intros w1 œâ01 args.
            apply (call_contract (CEnvEx f) args).
          - eapply bind_right.
            eapply bind.
            apply (eval_exps es).
            intros w1 œâ01 args.
            apply (call_lemma (LEnv l) args).
            intros w2 œâ12.
            apply (exec_aux _ _ s).
          - eapply bind. apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_bool t).
            + intros w2 œâ12.
              apply (exec_aux _ _ s1).
            + intros w2 œâ12.
              apply (exec_aux _ _ s2).
          - eapply bind_right.
            apply (exec_aux _ _ s1).
            intros w1 œâ01.
            apply (exec_aux _ _ s2).
          - eapply bind. apply (eval_exp e1).
            intros w1 œâ01 t.
            eapply bind_right.
            apply (assume_formula (formula_bool t)).
            intros w2 œâ12.
            apply (exec_aux _ _ s).
          - apply block.
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_list (ùëøtoùë∫ xh) (ùëøtoùë∫ xt) t).
            + intros w2 œâ12.
              apply (exec_aux _ _ s1).
            + intros w2 œâ12 thead ttail.
              eapply (pushspops (env_snoc (env_snoc env_nil (xh‚à∑_) thead) (xt‚à∑_) ttail)).
              apply (exec_aux _ _ s2).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_sum (ùëøtoùë∫ xinl) (ùëøtoùë∫ xinr) t).
            + intros w2 œâ12 tl.
              eapply (pushpop tl).
              apply (exec_aux _ _ s1).
            + intros w2 œâ12 tr.
              eapply (pushpop tr).
              apply (exec_aux _ _ s2).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_prod (ùëøtoùë∫ xl) (ùëøtoùë∫ xr) t).
            intros w2 œâ12 t1 t2.
            eapply (pushspops (env_snoc (env_snoc env_nil (_‚à∑_) t1) (_‚à∑_) t2)).
            apply (exec_aux _ _ s).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_enum t).
            intros EK.
            intros w2 œâ12.
            apply (exec_aux _ _ (alts EK)).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_tuple ùëøtoùë∫ p t).
            intros w2 œâ12 ts.
            eapply (pushspops ts).
            apply (exec_aux _ _ s).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_union ùëøtoùë∫ alt__pat t).
            intros UK w2 œâ12 ts.
            eapply (pushspops ts).
            apply (exec_aux _ _ (alt__rhs UK)).
          - eapply bind.
            apply (eval_exp e).
            intros w1 œâ01 t.
            apply (demonic_match_record ùëøtoùë∫ p t).
            intros w2 œâ12 ts.
            eapply (pushspops ts).
            apply (exec_aux _ _ s).
          - eapply bind.
            apply (angelic None œÑ).
            intros w1 œâ01 t.
            eapply bind_right.
            apply (T (consume (asn_chunk (chunk_ptsreg reg t)))).
            intros w2 œâ12.
            eapply bind_right.
            apply (T (produce (asn_chunk (chunk_ptsreg reg (persist__term t œâ12))))).
            intros w3 œâ23.
            apply pure.
            apply (persist__term t (acc_trans œâ12 œâ23)).
          - eapply bind.
            eapply (angelic None œÑ).
            intros w1 œâ01 told.
            eapply bind_right.
            apply (T (consume (asn_chunk (chunk_ptsreg reg told)))).
            intros w2 œâ12.
            eapply bind.
            apply (eval_exp e).
            intros w3 œâ23 tnew.
            eapply bind_right.
            apply (T (produce (asn_chunk (chunk_ptsreg reg tnew)))).
            intros w4 œâ34.
            apply pure.
            apply (persist__term tnew œâ34).
          - apply (error "SMut.exec" "stm_bind not supported" tt).
          - apply debug.
            intros Œ¥0 h0.
            econstructor.
            apply (wco w0).
            apply Œ¥0.
            apply h0.
            apply (exec_aux _ _ s).
        Defined.

      End ExecAux.

      Fixpoint exec (inline_fuel : nat) : Exec :=
        match inline_fuel with
        | O   => fun _ _ _ _ => error "SMut.exec" "out of fuel for inlining" tt
        | S n => @exec_aux (@exec n)
        end.
      Proof.
      Global Arguments exec _ {_ _} _ {w} _ _ _.

      Import Notations.

      Variable inline_fuel : nat.

      Definition exec_contract {Œî œÑ} (c : SepContract Œî œÑ) (s : Stm Œî œÑ) :
        SMut Œî Œî Unit {| wctx := sep_contract_logic_variables c; wco := [] |} :=
        match c with
        | MkSepContract _ _ Œ£ Œ¥ req result ens =>
          produce (w:=@MkWorld _ _) req acc_refl >> fun w1 œâ01 =>
          exec inline_fuel s >>= fun w2 œâ12 res =>
          consume
            (w:=wsnoc (@MkWorld _ []) (result‚à∑œÑ)%ctx)
            ens
            (acc_snoc_left (acc_trans œâ01 œâ12) (result‚à∑œÑ)%ctx res)
        end.

      Definition exec_contract_path {Œî : PCtx} {œÑ : Ty} (c : SepContract Œî œÑ) (s : Stm Œî œÑ) : ùïä wnil :=
        demonic_close (exec_contract c s (fun w1 œâ01 _ Œ¥1 h1 => SymProp.block) (sep_contract_localstore c) nil).

      Definition ValidContractWithConfig {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) : Prop :=
        VerificationCondition (prune (solve_uvars (prune (solve_evars (prune (exec_contract_path c body)))))).

    End Exec.

    Definition ok {Œ£} (p : ùïä Œ£) : bool :=
      match prune p with
      | SymProp.block => true
      | _           => false
      end.

    Lemma ok_sound {Œ£} (p : ùïä Œ£) (Œπ : SymInstance Œ£) :
      is_true (ok p) -> safe p Œπ.
    Proof.
      rewrite <- prune_sound. unfold ok.
      generalize (prune p) as q. clear. intros q.
      destruct q; try discriminate; cbn; auto.
    Qed.

    Definition ValidContract {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) : Prop :=
      VerificationCondition (prune (solve_uvars (prune (solve_evars (prune (exec_contract_path default_config 1 c body)))))).

    Definition ValidContractReflect {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) : Prop :=
      is_true (ok (prune (solve_uvars (prune (solve_evars (prune (exec_contract_path default_config 1 c body))))))).

    Lemma validcontract_reflect_sound {Œî œÑ} (c : SepContract Œî œÑ) (body : Stm Œî œÑ) :
      ValidContractReflect c body ->
      ValidContract c body.
    Proof.
      unfold ValidContractReflect, ValidContract. intros Hok.
      apply (ok_sound _ env_nil) in Hok. now constructor.
    Qed.

  End SMut.

End Mutators.
