(******************************************************************************)
(* Copyright (c) 2019 Steven Keuchel                                          *)
(* All rights reserved.                                                       *)
(*                                                                            *)
(* Redistribution and use in source and binary forms, with or without         *)
(* modification, are permitted provided that the following conditions are     *)
(* met:                                                                       *)
(*                                                                            *)
(* 1. Redistributions of source code must retain the above copyright notice,  *)
(*    this list of conditions and the following disclaimer.                   *)
(*                                                                            *)
(* 2. Redistributions in binary form must reproduce the above copyright       *)
(*    notice, this list of conditions and the following disclaimer in the     *)
(*    documentation and/or other materials provided with the distribution.    *)
(*                                                                            *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  *)
(* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR *)
(* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR          *)
(* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,      *)
(* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *)
(* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *)
(* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *)
(* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *)
(* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *)
(* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               *)
(******************************************************************************)

From Coq Require Import
     Bool.Bool
     Program.Equality
     Program.Tactics
     ZArith.ZArith
     Strings.String
     Classes.Morphisms
     Classes.Morphisms_Prop
     Classes.Morphisms_Relations.

From Equations Require Import
     Equations.

From MicroSail Require Import
     Sep.Spec
     Sep.Logic
     Sep.Hoare
     Syntax
     Tactics
     Symbolic.Mutator.
From MicroSail Require Import
     SemiConcrete.Mutator
     SemiConcrete.Outcome
     SemiConcrete.Sound.

Set Implicit Arguments.

Import CtxNotations.
Import EnvNotations.

Module Soundness
       (Import termkit : TermKit)
       (Import progkit : ProgramKit termkit)
       (Import assertkit : AssertionKit termkit progkit)
       (Import contractkit : SymbolicContractKit termkit progkit assertkit).
  Module MUT := Mutators termkit progkit assertkit contractkit.
  Import MUT.
  Module LOG := ProgramLogic termkit progkit assertkit contractkit.
  Import LOG.
  Module SCMUT := SemiConcrete.Sound.Soundness termkit progkit assertkit contractkit.
  Import SCMUT.MUT.

  Module DynMutV1Soundness.

    Import DynMutV1.

    Global Instance inst_heap : Inst SymbolicHeap SCHeap :=
      instantiate_list.
    Global Instance instlaws_heap : InstLaws SymbolicHeap SCHeap.
    Proof. apply instantiatelaws_list. Qed.

    Global Instance inst_symbolicstate {Œì} : Inst (SymbolicState Œì) (SCState Œì) :=
      {| inst Œ£ Œπ '(MkSymbolicState Œ¥ h) := MkSCState (inst Œπ Œ¥) (inst Œπ h);
         lift Œ£ '(MkSCState Œ¥ h) := MkSymbolicState (lift Œ¥) (lift h);
      |}.

    Global Instance instlaws_symbolicState {Œì} : InstLaws (SymbolicState Œì) (SCState Œì).
    Proof.
      constructor.
      - intros ? ? []; cbn; now rewrite ?inst_lift.
      - intros ? ? ? ? []; cbn; now rewrite ?inst_subst.
    Qed.

    (* Relate two symbolic instances at different points during execution. This
       essentially encodes a preorder on the total space { Œ£ & SymInstance Œ£ },
       which encodes that Œπ2 is a future of Œπ1, i.e. it is derived by compatible
       for existing variables and values for new universal variables. *)
    Definition syminstance_rel {Œ£1 Œ£2} (Œ∂ : Sub Œ£1 Œ£2) (Œπ1 : SymInstance Œ£1) (Œπ2 : SymInstance Œ£2) : Prop :=
      inst Œπ2 Œ∂ = Œπ1.
    Hint Unfold syminstance_rel : core.

    Lemma syminstance_rel_refl {Œ£} (Œπ : SymInstance Œ£) :
      syminstance_rel (sub_id Œ£) Œπ Œπ.
    Proof. apply inst_sub_id. Qed.

    Lemma syminstance_rel_refl_inv {Œ£} (Œπ1 Œπ2 : SymInstance Œ£) :
      syminstance_rel (sub_id Œ£) Œπ1 Œπ2 -> Œπ2 = Œπ1.
    Proof. unfold syminstance_rel. now rewrite inst_sub_id. Qed.

    Lemma syminstance_rel_snoc {Œ£1 Œ£2 x œÑ} (Œ∂ : Sub Œ£1 Œ£2) (Œπ1 : SymInstance Œ£1) Œπ2 :
      forall t v,
        syminstance_rel (env_snoc Œ∂ (x,œÑ) t) (env_snoc Œπ1 (x,œÑ) v) Œπ2 <->
        syminstance_rel Œ∂ Œπ1 Œπ2 /\ v = inst Œπ2 t.
    Proof.
      unfold syminstance_rel. intros. split.
      - cbn; intros.
        now dependent elimination H.
      - cbn; intros []; subst; now cbn.
    Qed.

    Lemma syminstance_rel_comp {Œ£0 Œ£1 Œ£2} (Œ∂1 : Sub Œ£0 Œ£1) (Œ∂2 : Sub Œ£1 Œ£2)
          (Œπ0 : SymInstance Œ£0) (Œπ2 : SymInstance Œ£2):
      syminstance_rel (sub_comp Œ∂1 Œ∂2) Œπ0 Œπ2 <->
      syminstance_rel Œ∂1 Œπ0 (inst Œπ2 Œ∂2).
    Proof. unfold syminstance_rel. now rewrite <- inst_subst. Qed.

    Lemma syminstance_rel_trans {Œ£0 Œ£1 Œ£2} {Œ∂1 : Sub Œ£0 Œ£1} {Œ∂2 : Sub Œ£1 Œ£2}
          {Œπ0 : SymInstance Œ£0} {Œπ1 : SymInstance Œ£1} {Œπ2 : SymInstance Œ£2} :
      syminstance_rel Œ∂1 Œπ0 Œπ1 -> syminstance_rel Œ∂2 Œπ1 Œπ2 ->
      syminstance_rel (sub_comp Œ∂1 Œ∂2) Œπ0 Œπ2.
    Proof. intros. apply syminstance_rel_comp. congruence. Qed.

    Lemma syminstance_rel_wk1 {Œ£ : NCtx ùë∫ Ty} {x œÑ} (Œπ : SymInstance Œ£) (v : Lit œÑ) :
      syminstance_rel sub_wk1 Œπ (Œπ ‚ñ∫ ((x, œÑ) ‚Ü¶ v)).
    Proof. apply inst_sub_wk1. Qed.

    Lemma syminstance_rel_up {Œ£1 Œ£2 x œÑ} (Œ∂ : Sub Œ£1 Œ£2) (Œπ1 : SymInstance Œ£1) Œπ2 :
      forall v,
        syminstance_rel (sub_up1 Œ∂) (env_snoc Œπ1 (x,œÑ) v) (env_snoc Œπ2 (x,œÑ) v) <->
        syminstance_rel Œ∂ Œπ1 Œπ2.
    Proof.
      unfold syminstance_rel. intros v.
      change (inst (Œπ2 ‚ñ∫ (x :: œÑ ‚Ü¶ v)) (sub_comp Œ∂ sub_wk1) ‚ñ∫ (x :: œÑ ‚Ü¶ v) =
              Œπ1 ‚ñ∫ (x :: œÑ ‚Ü¶ v) <-> inst Œπ2 Œ∂ = Œπ1).
      unfold sub_comp. rewrite inst_subst, inst_sub_wk1.
      split; intros H.
      - now dependent elimination H.
      - now f_equal.
    Qed.

    Definition ResultProperty Œì A Œ£ :=
      DynamicMutatorResult Œì A Œ£ -> Prop.

    Definition geqpc {Œ£0 Œ£1} (Œ∂1 : Sub Œ£0 Œ£1) (pc0 : PathCondition Œ£0) (pc1 : PathCondition Œ£1) : Prop :=
      forall (Œπ0 : SymInstance Œ£0) (Œπ1 : SymInstance Œ£1),
        syminstance_rel Œ∂1 Œπ0 Œπ1 ->
        (inst Œπ1 pc1 : Prop) ->
        (inst Œπ0 pc0 : Prop).

    Lemma geqpc_refl {Œ£} (pc : PathCondition Œ£) :
      geqpc (sub_id Œ£) pc pc.
    Proof. intros ? Œπ <-. now rewrite inst_sub_id. Qed.

    Definition geq {AT} `{Inst AT} {Œ£0 Œ£1} (Œ∂1 : Sub Œ£0 Œ£1) (pc1 : PathCondition Œ£1) (a0 : AT Œ£0) (a1 : AT Œ£1) : Prop :=
      forall (Œπ0 : SymInstance Œ£0) (Œπ1 : SymInstance Œ£1),
        syminstance_rel Œ∂1 Œπ0 Œπ1 ->
        (inst Œπ1 pc1 : Prop) ->
        inst Œπ0 a0 = inst Œπ1 a1.

    Lemma geq_subst {AT A} `{InstLaws AT A} {Œ£0 Œ£1} (Œ∂1 : Sub Œ£0 Œ£1) (pc1 : PathCondition Œ£1) (a0 : AT Œ£0) (a1 : AT Œ£1) :
      a1 = subst Œ∂1 a0 ->
      geq Œ∂1 pc1 a0 a1.
    Proof.
      unfold geq, syminstance_rel.
      intros -> * <-. now rewrite inst_subst.
    Qed.

    Lemma geq_refl {AT} `{Inst AT} {Œ£} (pc : PathCondition Œ£) (a : AT Œ£) :
      geq (sub_id _) pc a a.
    Proof. intros ? ? <-. now rewrite inst_sub_id. Qed.

    Lemma geq_pre_comp {Œ£1 Œ£2 Œ£3 Œ£4} (Œ∂12 : Sub Œ£1 Œ£2) (Œ∂23 : Sub Œ£2 Œ£3) (Œ∂24 : Sub Œ£2 Œ£4) (Œ∂34 : Sub Œ£3 Œ£4)
          (pc4 : PathCondition Œ£4) :
      geq Œ∂34 pc4 Œ∂23 Œ∂24 -> geq Œ∂34 pc4 (sub_comp Œ∂12 Œ∂23) (sub_comp Œ∂12 Œ∂24).
    Proof.
      intros H Œπ3 Œπ4 rel34 Hpc4. specialize (H Œπ3 Œπ4 rel34 Hpc4).
      unfold sub_comp. rewrite ?inst_subst. now f_equal.
    Qed.

    Lemma geqpc_trans {Œ£0 Œ£1 Œ£2} (Œ∂01 : Sub Œ£0 Œ£1) (Œ∂02 : Sub Œ£0 Œ£2) (Œ∂12 : Sub Œ£1 Œ£2)
          (pc0 : PathCondition Œ£0) (pc1 : PathCondition Œ£1) (pc2 : PathCondition Œ£2) :
      geq Œ∂12 pc2 Œ∂01 Œ∂02 -> geqpc Œ∂01 pc0 pc1 -> geqpc Œ∂12 pc1 pc2 -> geqpc Œ∂02 pc0 pc2.
    Proof.
      intros HŒ∂ H01 H12 Œπ0 Œπ2 rel02 Hpc2. pose (inst Œπ2 Œ∂12) as Œπ1.
      specialize (HŒ∂ Œπ1 Œπ2 eq_refl Hpc2).
      assert (syminstance_rel Œ∂01 Œπ0 Œπ1) as rel01 by congruence.
      eauto.
    Qed.

    Definition dmutres_geq_syn {Œì A Œ£} `{Subst A} (r1 r2 : DynamicMutatorResult Œì A Œ£) : Prop :=
      match r1 , r2 with
      | MkDynMutResult Œ∂1 pc1 a1 s1, MkDynMutResult Œ∂2 pc2 a2 s2 =>
        exists Œ∂12,
        Œ∂2  = sub_comp Œ∂1 Œ∂12 /\
        pc2 = subst Œ∂12 pc1 /\
        a2  = subst Œ∂12 a1 /\
        s2  = subst Œ∂12 s1
      end.

    Definition dmutres_geq_sem {Œì A V Œ£} {instA : Inst A V} (r1 r2 : DynamicMutatorResult Œì A Œ£) : Prop :=
      match r1 , r2 with
      | MkDynMutResult Œ∂1 pc1 a1 s1, MkDynMutResult Œ∂2 pc2 a2 s2 =>
        exists Œ∂12,
        forall Œπ1 Œπ2,
          syminstance_rel Œ∂12 Œπ1 Œπ2 ->
          (inst Œπ2 pc2 : Prop) ->
          inst Œπ1 pc1 /\
          inst Œπ1 Œ∂1 = inst Œπ2 Œ∂2 /\
          inst Œπ1 a1 = inst Œπ2 a2 /\
          inst Œπ1 s1 = inst Œπ2 s2
      end.

    Lemma dmutres_geq_syn_sem {Œì A V Œ£} `{InstLaws A V} :
      forall r1 r2 : DynamicMutatorResult Œì A Œ£,
        dmutres_geq_syn r1 r2 ->
        dmutres_geq_sem r1 r2.
    Proof.
      intros [Œ£1 Œ∂1 pc1 a1 s1] [Œ£2 Œ∂2 pc2 a2 s2] [Œ∂12 Hgeq]; cbn;
        destruct_conjs; subst.
      exists Œ∂12. intros ? ? <-.
      unfold sub_comp; now rewrite ?inst_subst.
    Qed.

    Definition dmutres_geq_sem' {Œì A V Œ£} {instA : Inst A V} (r1 r2 : DynamicMutatorResult Œì A Œ£) : Prop :=
      match r1 , r2 with
      | MkDynMutResult Œ∂1 pc1 a1 s1, MkDynMutResult Œ∂2 pc2 a2 s2 =>
        exists Œ∂12,
        geqpc Œ∂12 pc1 pc2 /\
        geq Œ∂12 pc2 Œ∂1 Œ∂2 /\
        geq Œ∂12 pc2 a1 a2 /\
        geq Œ∂12 pc2 s1 s2
      end.

    Lemma dmutres_geq_sem_sem' {Œì A V Œ£} {instA : Inst A V} :
      forall (r1 r2 : DynamicMutatorResult Œì A Œ£),
        dmutres_geq_sem r1 r2 <-> dmutres_geq_sem' r1 r2.
    Proof.
      intros [Œ£1 Œ∂1 pc1 a1 s1] [Œ£2 Œ∂2 pc2 a2 s2]; cbn.
      unfold geqpc, geq.
      split; intros [Œ∂12 Hgeq]; exists Œ∂12; intuition.
    Qed.

    Global Instance dmutres_geq_sem_preorder {Œì A V Œ£} `{instLA : InstLaws A V} : PreOrder (@dmutres_geq_sem Œì A V Œ£ _).
    Proof.
      constructor.
      - intros [Œ£1 Œ∂1 pc a1 s]. cbn. exists (sub_id _).
        intros ? ? <-. now rewrite inst_sub_id.
      - intros [Œ£1 Œ∂1 pc1 a1 s1] [Œ£2 Œ∂2 pc2 a2 s2] [Œ£3 Œ∂3 pc3 a3 s3]; cbn.
        intros [Œ∂12 H12] [Œ∂23 H23].
        exists (sub_comp Œ∂12 Œ∂23).
        intros Œπ1 Œπ3. pose (inst Œπ3 Œ∂23) as Œπ2.
        intros rel12%syminstance_rel_comp.
        specialize (H12 Œπ1 Œπ2 rel12).
        specialize (H23 Œπ2 Œπ3 eq_refl).
        intuition.
    Qed.

    Lemma dmutres_geq_sem_pre_comp {A AV} {instA : Inst A AV} {Œì Œ£1 Œ£2 Œ£3}
          (Œ∂2 : Sub Œ£1 Œ£2) (a2 : A Œ£2) pc2 (s2 : SymbolicState Œì Œ£2)
          (Œ∂3 : Sub Œ£1 Œ£3) (a3 : A Œ£3) pc3 (s3 : SymbolicState Œì Œ£3) :
      forall Œ£0 (Œ∂1 : Sub Œ£0 Œ£1),
        dmutres_geq_sem (MkDynMutResult Œ∂2 pc2 a2 s2) (MkDynMutResult Œ∂3 pc3 a3 s3) ->
        dmutres_geq_sem (MkDynMutResult (sub_comp Œ∂1 Œ∂2) pc2 a2 s2) (MkDynMutResult (sub_comp Œ∂1 Œ∂3) pc3 a3 s3).
    Proof.
      intros ? ? [Œ∂23 H]. exists Œ∂23.
      intros ? ? Hrel Hpc. specialize (H _ _ Hrel Hpc).
      unfold sub_comp. rewrite ?inst_subst. intuition.
    Qed.

    Definition resultprop_specialize {Œì A Œ£1 Œ£2} (Œ∂ : Sub Œ£1 Œ£2) :
      ResultProperty Œì A Œ£1 -> ResultProperty Œì A Œ£2 :=
      fun p r => p (cosubst_dmutres Œ∂ r).

    Definition resultprop_downwards_closed {Œì AT Œ£ A} `{Inst AT A} (p : ResultProperty Œì AT Œ£) : Prop :=
      forall (r1 r2 : DynamicMutatorResult Œì AT Œ£),
        dmutres_geq_sem r1 r2 -> p r1 -> p r2.

    Lemma resultprop_specialize_dcl {Œì A AV Œ£1 Œ£2} `{Inst A AV} (Œ∂ : Sub Œ£1 Œ£2) (POST : ResultProperty Œì A Œ£1) (POST_dcl : resultprop_downwards_closed POST) :
      resultprop_downwards_closed (resultprop_specialize Œ∂ POST).
    Proof.
      unfold resultprop_downwards_closed, resultprop_specialize.
      intros [Œ£3 Œ∂3 pc3 a3 s3] [Œ£4 Œ∂4 pc4 a4 s4] [Œ∂34 Hgeq]. destruct_conjs.
      apply POST_dcl. exists Œ∂34.
      intros Œπ3 Œπ4 rel34 Hpc4.
      specialize (Hgeq Œπ3 Œπ4 rel34).
      unfold syminstance_rel in rel34; subst.
      unfold sub_comp; rewrite ?inst_subst.
      intuition.
    Qed.

    Lemma resultprop_specialize_id {Œì A Œ£} (P : ResultProperty Œì A Œ£) :
      forall r, resultprop_specialize (sub_id _) P r <-> P r.
    Proof.
      intros [Œ£' Œ∂ pc a s]; unfold resultprop_specialize; cbn.
      now rewrite sub_comp_id_left.
    Qed.

    Lemma resultprop_specialize_comp {Œì A Œ£1 Œ£2 Œ£3} (Œ∂12 : Sub Œ£1 Œ£2) (Œ∂23 : Sub Œ£2 Œ£3) (P : ResultProperty Œì A Œ£1) :
      forall r,
        resultprop_specialize (sub_comp Œ∂12 Œ∂23) P r <->
        resultprop_specialize Œ∂23 (resultprop_specialize Œ∂12 P) r.
    Proof.
      intros [Œ£' Œ∂ pc a s]; unfold resultprop_specialize; cbn.
      now rewrite sub_comp_assoc.
    Qed.

    Definition resultprop_specialize' {Œì A Œ£1 Œ£2} (Œ∂ : Sub Œ£1 Œ£2) (pc2 : PathCondition Œ£2) :
      ResultProperty Œì A Œ£1 -> ResultProperty Œì A Œ£2 :=
      fun p r => geqpc (dmutres_substitution r) pc2 (dmutres_pathcondition r) /\ p (cosubst_dmutres Œ∂ r).

    Lemma resultprop_specialize_dcl' {Œì A AV Œ£1 Œ£2} `{Inst A AV} (Œ∂12 : Sub Œ£1 Œ£2) (pc2 : PathCondition Œ£2) (POST : ResultProperty Œì A Œ£1) (POST_dcl : resultprop_downwards_closed POST) :
      resultprop_downwards_closed (resultprop_specialize' Œ∂12 pc2 POST).
    Proof.
      unfold resultprop_downwards_closed, resultprop_specialize'.
      intros [Œ£3 Œ∂23 pc3 a3 s3] [Œ£4 Œ∂24 pc4 a4 s4] [Œ∂34 (Hpc34 & HŒ∂34 & Ha34 & Hs34)]%dmutres_geq_sem_sem'; cbn.
      intros [Hpc23 Hpost].
      split.
      - eapply geqpc_trans; eauto.
      - revert Hpost. apply POST_dcl.
        apply dmutres_geq_sem_sem'.
        exists Œ∂34. intuition.
        now apply geq_pre_comp.
    Qed.

    Definition StateProperty Œì A Œ£ :=
      forall Œ£1, Sub Œ£ Œ£1 -> PathCondition Œ£1 -> A Œ£1 -> SymbolicState Œì Œ£1 -> Prop.

    Definition stateprop_specialize {Œì A Œ£1 Œ£2} (Œ∂ : Sub Œ£1 Œ£2) (p: StateProperty Œì A Œ£1) :
      StateProperty Œì A Œ£2 := fun Œ£3 Œ∂3 => p Œ£3 (sub_comp Œ∂ Œ∂3).

    Definition stateprop_impl {Œì A Œ£} (P Q : StateProperty Œì A Œ£) : Prop :=
      forall Œ£1 (Œ∂ : Sub Œ£ Œ£1) (pc : PathCondition Œ£1) (a : A Œ£1) (s : SymbolicState Œì Œ£1),
        P Œ£1 Œ∂ pc a s -> Q Œ£1 Œ∂ pc a s.

    Definition stateprop_downwards_closed {Œì Œ£ A AV} `{Inst A AV} (p : StateProperty Œì A Œ£) : Prop :=
      forall Œ£1 (Œ∂1 : Sub Œ£ Œ£1) pc1 a1 s1 Œ£2 (Œ∂2 : Sub Œ£ Œ£2) pc2 a2 s2,
        dmutres_geq_sem (MkDynMutResult Œ∂1 pc1 a1 s1) (MkDynMutResult Œ∂2 pc2 a2 s2) ->
        p Œ£1 Œ∂1 pc1 a1 s1 -> p Œ£2 Œ∂2 pc2 a2 s2.

    Local Notation "[ Œπ ] x == y" := (inst Œπ x = inst Œπ y) (at level 50).

    (* Read: If œÇ is equivalent to t in Œπ, then substituting t for œÇ is equivalent to the identity. *)
    Lemma inst_single_shift {Œ£ œÇ œÉ} (œÇInŒ£ : œÇ :: œÉ ‚àà Œ£) (t : Term (Œ£ - (œÇ :: œÉ)) œÉ) Œπ :
      [ Œπ ] term_var œÇ == subst (sub_shift œÇInŒ£) t ->
      [ Œπ ] sub_comp (sub_single œÇInŒ£ t) (sub_shift œÇInŒ£) == sub_id _.
    Proof.
      intros H.
      apply env_lookup_extensional; cbn.
      intros [] bIn.
      unfold sub_id, sub_comp, subst, SubstEnv, inst; cbn.
      rewrite ?env_lookup_map, ?env_lookup_tabulate.
      pose proof (occurs_check_var_spec œÇInŒ£ bIn).
      destruct (occurs_check_var œÇInŒ£ bIn) eqn:?.
      - dependent elimination e. cbn in H0. subst.
        rewrite lookup_sub_single_eq. symmetry. exact H.
      - f_equal.
        destruct H0. subst bIn.
        rewrite lookup_sub_single_neq.
        cbn. unfold sub_shift.
        rewrite env_lookup_tabulate.
        reflexivity.
    Qed.

    Lemma dmutres_try_assume_eq_spec {Œì Œ£ œÉ} (pc : PathCondition Œ£) (t1 t2 : Term Œ£ œÉ) (s__sym : SymbolicState Œì Œ£)
      (POST : ResultProperty Œì Unit Œ£) (POST_dcl : resultprop_downwards_closed POST) :
      OptionSpec
        (fun r => POST r <->
                  POST (MkDynMutResult
                          (sub_id Œ£)
                          (cons (formula_eq t1 t2) pc)
                          tt
                          s__sym))
        True
        (dmutres_try_assume_eq pc t1 t2 s__sym).
    Proof.
      destruct t1; cbn; try (constructor; auto; fail).
      destruct (occurs_check œÇInŒ£ t2) eqn:?; constructor; auto.
      apply (@occurs_check_sound _ _ (@OccursCheckTerm _)) in Heqo;
        auto with typeclass_instances. subst t2.
      split.
      - apply POST_dcl. exists (sub_shift œÇInŒ£).
        intros * <- Hpc. cbn. rewrite inst_pathcondition_cons in Hpc.
        destruct Hpc as [Hfml Hpc]; cbn in Hfml.
        apply inst_single_shift in Hfml.
        rewrite <- ?inst_subst.
        change (subst (sub_shift œÇInŒ£) (sub_single œÇInŒ£ t)) with
            (sub_comp (sub_single œÇInŒ£ t) (sub_shift œÇInŒ£)).
        rewrite <- ?subst_sub_comp.
        rewrite ?inst_subst.
        rewrite Hfml.
        rewrite ?inst_sub_id.
        auto.
      - apply POST_dcl. exists (sub_single œÇInŒ£ t).
        intros * <- Hpc. rewrite inst_pathcondition_cons.
        rewrite inst_sub_id.
        rewrite <- ?inst_subst. cbn.
        rewrite <- subst_sub_comp.
        rewrite lookup_sub_single_eq.
        rewrite sub_comp_shift_single, subst_sub_id.
        auto.
    Qed.

    Lemma dmutres_assume_formula_spec {Œì Œ£} (pc : PathCondition Œ£) (fml : Formula Œ£) (s__sym : SymbolicState Œì Œ£)
      (POST : ResultProperty Œì Unit Œ£) (POST_dcl : resultprop_downwards_closed POST) :
      POST (dmutres_assume_formula pc fml s__sym) <->
      POST (MkDynMutResult
              (sub_id Œ£)
              (cons fml pc)
              tt
              s__sym).
    Proof.
      destruct fml; cbn; auto.
      destruct (dmutres_try_assume_eq_spec pc t1 t2 s__sym POST_dcl); auto. clear H.
      destruct (dmutres_try_assume_eq_spec pc t2 t1 s__sym POST_dcl); auto.
      rewrite H.
      split; apply POST_dcl; exists (sub_id _); intros ? ? <-;
          rewrite ?inst_pathcondition_cons, ?inst_sub_id; intuition.
    Qed.

    (* These should be kept abstract in the rest of the proof. If you need some
       property, add a lemma above. *)
    Local Opaque dmutres_assume_formula.

    Definition scmut_wp {Œì1 Œì2 A}
      (m : SCMut Œì1 Œì2 A)
      (POST : A -> SCState Œì2 -> Prop)
      (s1 : SCState Œì1) : Prop :=
      outcome_satisfy (m s1) (fun r => POST (scmutres_value r) (scmutres_state r)).

    Lemma scmut_wp_bind {Œì1 Œì2 Œì3 A B} (ma : SCMut Œì1 Œì2 A) (f : A -> SCMut Œì2 Œì3 B)
          (POST : B -> SCState Œì3 -> Prop) :
      forall s1 : SCState Œì1,
        scmut_wp (scmut_bind ma f) POST s1 <->
        scmut_wp ma (fun a => scmut_wp (f a) POST) s1.
    Proof.
      unfold SCMut, scmut_bind, scmut_wp in *; cbn; intros.
      now rewrite outcome_satisfy_bind.
    Qed.

    Definition dmut_wp {Œì1 Œì2 Œ£0 A}
      (m : DynamicMutator Œì1 Œì2 A Œ£0)
      (POST : StateProperty Œì2 A Œ£0)
      (pc0 : PathCondition Œ£0)
      (s1 : SymbolicState Œì1 Œ£0) : Prop :=
      forall Œ£1 (Œ∂1 : Sub Œ£0 Œ£1),
        outcome_satisfy
          (* SK: There is still some wiggle room here. We can generalize to
             oathconditions in Œ£1 that are stronger than pc0. *)
          (m Œ£1 Œ∂1 (subst Œ∂1 pc0) (subst Œ∂1 s1))
          (fun '(MkDynMutResult Œ∂2 pc2 a2 s2) =>
             POST _ (sub_comp Œ∂1 Œ∂2) pc2 a2 s2).

    Lemma dmut_wp_monotonic {Œì1 Œì2 Œ£0 A} (m : DynamicMutator Œì1 Œì2 A Œ£0)
          (P Q : StateProperty Œì2 A Œ£0) (HYP : stateprop_impl P Q) :
      forall (pc : PathCondition Œ£0) (s : SymbolicState Œì1 Œ£0),
        dmut_wp m P pc s -> dmut_wp m Q pc s.
    Proof.
      unfold dmut_wp; cbn; intros pc1 s1 H Œ£1 Œ∂1.
      specialize (H Œ£1 Œ∂1). revert H.
      apply outcome_satisfy_monotonic.
      intros [Œ£2 Œ∂2 pc2 a2 s2]; cbn.
      intuition.
    Qed.

    Definition stateprop_lift {Œì AT A Œ£} {instA : Inst AT A} (Œπ : SymInstance Œ£) (POST : A -> SCState Œì -> Prop) :
      StateProperty Œì AT Œ£ :=
      fun Œ£1 Œ∂1 pc1 v1 s1 =>
        forall Œπ1,
          syminstance_rel Œ∂1 Œπ Œπ1 ->
          (inst Œπ1 pc1 : Prop) ->
          POST (inst Œπ1 v1) (inst Œπ1 s1).

    Lemma stateprop_lift_dcl {Œì AT A Œ£1} `{InstLaws AT A} (Œπ1 : SymInstance Œ£1) (POST : A -> SCState Œì -> Prop) :
      stateprop_downwards_closed (stateprop_lift Œπ1 POST).
    Proof.
      unfold stateprop_downwards_closed, stateprop_lift.
      intros Œ£2 Œ∂2 pc2 a2 s2 Œ£3 Œ∂3 pc3 a3 s3 [Œ∂23 Hgeq] Hpost Œπ3 rel13 Hpc3.
      pose (inst Œπ3 Œ∂23) as Œπ2.
      specialize (Hgeq Œπ2 Œπ3 eq_refl Hpc3).
      specialize (Hpost Œπ2). unfold syminstance_rel in *. subst.
      intuition.
    Qed.

    Definition resultprop_lift {Œì AT A Œ£1} {instA : Inst AT A} (Œπ1 : SymInstance Œ£1) (POST : A -> SCState Œì -> Prop) :
      ResultProperty Œì AT Œ£1 :=
      fun dres =>
        match dres with
        | MkDynMutResult Œ∂2 pc2 a2 s2 =>
          stateprop_lift Œπ1 POST Œ∂2 pc2 a2 s2
        end.

    Definition resultprop_lift_dcl {Œì AT A Œ£1} `{InstLaws AT A} (Œπ1 : SymInstance Œ£1) (POST : A -> SCState Œì -> Prop) :
      resultprop_downwards_closed (resultprop_lift Œπ1 POST).
    Proof.
      unfold resultprop_downwards_closed, resultprop_lift.
      intros [Œ£3 Œ∂3 pc3 a3 s3] [Œ£4 Œ∂4 pc4 a4 s4].
      apply stateprop_lift_dcl.
    Qed.

    Definition APPROX Œì1 Œì2 AT A {instA : Inst AT A} : Type :=
      forall Œ£ (Œπ : SymInstance Œ£),
        DynamicMutator Œì1 Œì2 AT Œ£ -> SCMut Œì1 Œì2 A -> Prop.
    Arguments APPROX _ _ _ _ {_}.

    Definition box {Œì1 Œì2 AT A} {instA : Inst AT A} (R : APPROX Œì1 Œì2 AT A) : APPROX Œì1 Œì2 AT A :=
      fun Œ£ Œπ dm sm =>
        forall Œ£1 (Œ∂1 : Sub Œ£ Œ£1) (Œπ1 : SymInstance Œ£1),
          syminstance_rel Œ∂1 Œπ Œπ1 ->
          R Œ£1 Œπ1 (dmut_sub Œ∂1 dm) sm.

    Lemma box_proj {Œì1 Œì2 AT A} {instA : Inst AT A} (R : APPROX Œì1 Œì2 AT A) :
      forall Œ£ (Œπ : SymInstance Œ£) dm sm,
        box R Œπ dm sm -> R _ Œπ dm sm.
    Proof.
      intros ? ? ? ? b.
      unfold box in b.
      inster b by apply syminstance_rel_refl.
      unfold dmut_sub in b.
      (* apply b. *)
    Admitted.

    Definition box_box {Œì1 Œì2 AT A} {instA : Inst AT A} (R : APPROX Œì1 Œì2 AT A) :
      forall Œ£ (Œπ : SymInstance Œ£) dm sm,
        box R Œπ dm sm -> box (box R) Œπ dm sm.
    Proof.
      intros ? ? ? ?. unfold box. intros bb Œ£1 Œ∂1 Œπ1 ? Œ£2 Œ∂2 Œπ2 ?.
      specialize (bb Œ£2 (sub_comp Œ∂1 Œ∂2) Œπ2).
      inster bb by eapply syminstance_rel_trans; eauto.
      (* apply bb. *)
    Admitted.

    Definition approximates {Œì1 Œì2 AT A} {instA : Inst AT A} : APPROX Œì1 Œì2 AT A :=
      fun Œ£ Œπ dm sm =>
        forall pc (s__sym : SymbolicState Œì1 Œ£),
        forall (POST : A -> SCState Œì2 -> Prop),
          dmut_wp dm (stateprop_lift Œπ POST) pc s__sym ->
          (inst Œπ pc : Prop) ->
          scmut_wp sm POST (inst Œπ s__sym).

    Lemma approximates_proj {Œì1 Œì2 AT A} {instA : Inst AT A} {Œ£} (Œπ : SymInstance Œ£)
      (dm : DynamicMutator Œì1 Œì2 AT Œ£) (sm : SCMut Œì1 Œì2 A) :
      box approximates Œπ dm sm -> approximates Œπ dm sm.
    Proof.
      unfold approximates, box. intros Happrox * Hdwp Hpc.
      inster Happrox by apply syminstance_rel_refl.
      specialize (Happrox pc). apply Happrox; auto.
      unfold dmut_wp, dmut_sub. intros Œ£1 Œ∂1.
      rewrite sub_comp_id_left. apply Hdwp.
    Qed.

    Lemma approximates_box_box {Œì1 Œì2 AT A} {instA : Inst AT A} {Œ£} (Œπ : SymInstance Œ£)
      (dm : DynamicMutator Œì1 Œì2 AT Œ£) (sm : SCMut Œì1 Œì2 A) :
      box approximates Œπ dm sm -> box (box approximates) Œπ dm sm.
    Proof.
      unfold approximates, box, dmut_wp, dmut_sub. intros.
      inster H by eapply syminstance_rel_trans; eauto.
      specialize (H pc). apply H; auto.
      intros. now rewrite sub_comp_assoc.
    Qed.

    Lemma approximates_sub {Œì Œ£ Œ£1} (Œ∂1 : Sub Œ£ Œ£1) (Œπ : SymInstance Œ£) (Œπ1 : SymInstance Œ£1)
      (relŒπ1 : syminstance_rel Œ∂1 Œπ Œπ1) (d : DynamicMutator Œì Œì Unit Œ£) (s : SCMut Œì Œì unit) :
      box approximates Œπ d s -> box approximates Œπ1 (dmut_sub Œ∂1 d) s.
    Proof. intros H. eapply approximates_box_box; eauto. Qed.

    Lemma scmut_wp_demonic_binary {Œì1 Œì2 A} (sm1 sm2 : SCMut Œì1 Œì2 A) (s__sc : SCState Œì1) (POST : A -> SCState Œì2 -> Prop) :
      scmut_wp (scmut_demonic_binary sm1 sm2) POST s__sc <->
      scmut_wp sm1 POST s__sc /\ scmut_wp sm2 POST s__sc.
    Proof. unfold scmut_wp, scmut_demonic_binary; cbn; intuition. Qed.

    Lemma dmut_wp_demonic_binary {Œì1 Œì2 Œ£ A} (m1 m2 : DynamicMutator Œì1 Œì2 A Œ£)
      (POST : StateProperty Œì2 A Œ£) pc (s : SymbolicState Œì1 Œ£) :
        dmut_wp (dmut_demonic_binary m1 m2) POST pc s <->
        dmut_wp m1 POST pc s /\ dmut_wp m2 POST pc s.
    Proof. unfold dmut_wp, dmut_demonic_binary; cbn; intuition. Qed.

    Lemma dmut_wp_sub_demonic_binary {Œì1 Œì2 Œ£ A Œ£1} (Œ∂1 : Sub Œ£ Œ£1) (m1 m2 : DynamicMutator Œì1 Œì2 A Œ£)
      (POST : StateProperty Œì2 A Œ£1) pc (s : SymbolicState Œì1 Œ£1) :
        dmut_wp (dmut_sub Œ∂1 (dmut_demonic_binary m1 m2)) POST pc s <->
        dmut_wp (dmut_sub Œ∂1 m1) POST pc s /\ dmut_wp (dmut_sub Œ∂1 m2) POST pc s.
    Proof. unfold dmut_wp, dmut_demonic_binary; cbn; intuition. Qed.

    Lemma approximates_demonic_binary {Œì1 Œì2 Œ£} (Œπ : SymInstance Œ£)
          (dm1 dm2 : DynamicMutator Œì1 Œì2 Unit Œ£) (sm1 sm2 : SCMut Œì1 Œì2 unit) :
      box approximates Œπ dm1 sm1 ->
      box approximates Œπ dm2 sm2 ->
      box approximates Œπ (dmut_demonic_binary dm1 dm2) (scmut_demonic_binary sm1 sm2).
    Proof.
      unfold box. intros H1 H2 Œ£1 Œ∂1 Œπ1 H__Œπ.
      specialize (H1 Œ£1 Œ∂1 Œπ1 H__Œπ). specialize (H2 Œ£1 Œ∂1 Œπ1 H__Œπ).
      intros pc s1 POST Hwp Hpc. apply dmut_wp_sub_demonic_binary in Hwp.
      destruct Hwp as [Hwp1 Hwp2].
      specialize (H1 pc s1 POST Hwp1 Hpc). specialize (H2 pc s1 POST Hwp2 Hpc).
      apply scmut_wp_demonic_binary. split; auto.
    Qed.

    Lemma scmut_wp_demonic {Œì1 Œì2 A B} (sm : B -> SCMut Œì1 Œì2 A) (s__sc : SCState Œì1) (POST : A -> SCState Œì2 -> Prop) :
      scmut_wp (scmut_demonic sm) POST s__sc <-> forall v, scmut_wp (sm v) POST s__sc.
    Proof. unfold scmut_wp, scmut_demonic; cbn; intuition. Qed.

    Lemma dmut_wp_demonic {Œì1 Œì2 Œ£ A B} (m : B -> DynamicMutator Œì1 Œì2 A Œ£)
      (POST : StateProperty Œì2 A Œ£) pc (s : SymbolicState Œì1 Œ£) :
        dmut_wp (dmut_demonic m) POST pc s <->
        forall b, dmut_wp (m b) POST pc s.
    Proof. unfold dmut_wp, dmut_demonic; cbn; intuition. Qed.

    Lemma subst_symbolicstate_produce_chunk {Œì Œ£ Œ£1} (Œ∂1 : Sub Œ£ Œ£1) (c : Chunk Œ£) (s : SymbolicState Œì Œ£) :
      subst Œ∂1 (symbolicstate_produce_chunk c s) = symbolicstate_produce_chunk (subst Œ∂1 c) (subst Œ∂1 s).
    Proof. now destruct s. Qed.

    Lemma dmut_wp_produce_chunk {Œì Œ£ Œ£1} (Œ∂1 : Sub Œ£ Œ£1) (c : Chunk _) pc (s__sym : SymbolicState Œì _)
          (POST : StateProperty Œì Unit _) (POST_dcl : stateprop_downwards_closed POST) :
      dmut_wp (dmut_sub Œ∂1 (dmut_produce_chunk c)) POST pc s__sym <->
      POST Œ£1 (sub_id Œ£1) pc tt (symbolicstate_produce_chunk (subst Œ∂1 c) s__sym).
    Proof.
      split.
      - intros dwp.
        specialize (dwp Œ£1 (sub_id Œ£1)). cbn in dwp.
        now rewrite ?sub_comp_id_right, ?subst_sub_id in dwp.
      - intros p Œ£2 Œ∂2. cbn. rewrite subst_sub_comp. revert p.
        apply POST_dcl. apply dmutres_geq_syn_sem.
        exists Œ∂2.
        rewrite sub_comp_id_right, sub_comp_id_left.
        now rewrite subst_symbolicstate_produce_chunk.
    Qed.

    Lemma dmut_produce_chunk_sound {Œì Œ£} (Œπ : SymInstance Œ£) (c : Chunk Œ£) :
      box approximates
        (Œì1 := Œì) (Œì2 := Œì) Œπ
        (dmut_produce_chunk c)
        (scmut_produce_chunk (inst Œπ c)).
    Proof.
      intros ? ? ? <- ? ? ? Hwp Hpc. cbn.
      apply dmut_wp_produce_chunk in Hwp; auto using stateprop_lift_dcl.
      specialize (Hwp Œπ1). inster Hwp by apply syminstance_rel_refl.
      specialize (Hwp Hpc). revert Hwp. destruct s__sym as [Œ¥ h]; cbn.
      now rewrite inst_subst.
    Qed.

    Lemma dmut_assume_formula_sound {Œì Œ£} (Œπ : SymInstance Œ£) (fml : Formula Œ£) :
      box approximates
        (Œì1 := Œì) (Œì2 := Œì) Œπ
        (dmut_assume_formula fml)
        (scmut_assume_formula Œπ fml).
    Proof.
      unfold box, approximates.
      intros * <- ? ? POST Hwp Hpc.
      unfold dmut_wp, dmut_sub, dmut_assume_formula in Hwp.
      specialize (Hwp Œ£1 (sub_id Œ£1)).
      rewrite sub_comp_id_right in Hwp.
      unfold scmut_wp, scmut_assume_formula. cbn.
      intros Hfml. rewrite ?subst_sub_id in Hwp.
      destruct (try_solve_formula_spec (subst Œ∂1 fml)).
      - specialize (H Œπ1). rewrite inst_subst in H.
        apply H in Hfml. clear H.
        unfold is_true in Hfml. subst a.
        cbn in Hwp.
        rewrite ?sub_comp_id_left in Hwp.
        unfold stateprop_lift in Hwp.
        inster Hwp by apply syminstance_rel_refl.
        now apply Hwp.
      - clear H.
        destruct (dmutres_assume_formula pc (subst Œ∂1 fml) s__sym) as [Œ£2 Œ∂2 [] s2] eqn:?.
        + cbn in Hwp. rewrite sub_comp_id_left in Hwp.
          assert (resultprop_lift Œπ1 POST (dmutres_assume_formula pc (subst Œ∂1 fml) s__sym))
            by (rewrite Heqd; apply Hwp).
          apply dmutres_assume_formula_spec in H; auto using resultprop_lift_dcl.
          unfold resultprop_lift, stateprop_lift in H.
          inster H by apply syminstance_rel_refl. apply H.
          rewrite inst_pathcondition_cons.
          rewrite inst_subst. auto.
        + cbn in Hwp. rewrite sub_comp_id_left in Hwp.
          assert (resultprop_lift Œπ1 POST (dmutres_assume_formula pc (subst Œ∂1 fml) s__sym))
            by (rewrite Heqd; apply Hwp).
          apply dmutres_assume_formula_spec in H; auto using resultprop_lift_dcl.
          unfold resultprop_lift, stateprop_lift in H.
          inster H by apply syminstance_rel_refl. apply H.
          rewrite inst_pathcondition_cons.
          rewrite inst_subst. auto.
    Qed.

    Definition dmut_wf {Œì1 Œì2 AT Œ£0 A} `{Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) : Prop :=
      forall Œ£1 Œ£2 (Œ∂1 : Sub Œ£0 Œ£1) (Œ∂2 : Sub Œ£1 Œ£2) pc1 (s1 : SymbolicState Œì1 Œ£1)
             (POST : ResultProperty Œì2 AT Œ£1) (POST_dcl : resultprop_downwards_closed POST),
        outcome_satisfy (d Œ£1 Œ∂1 pc1 s1) POST ->
        outcome_satisfy (d Œ£2 (sub_comp Œ∂1 Œ∂2) (subst Œ∂2 pc1) (subst Œ∂2 s1)) (resultprop_specialize Œ∂2 POST).

    Lemma dmut_wf_pure {Œì AT Œ£ A} {subA: Subst AT} {sublAT: SubstLaws AT}
          {instA : Inst AT A} {instlA : InstLaws AT A} (a : AT Œ£) :
      dmut_wf (dmut_pure (Œì := Œì) a).
    Proof.
      unfold dmut_wf, resultprop_specialize; cbn; intros.
      revert H.
      apply POST_dcl.
      exists Œ∂2; cbn. intros ? ? <- Hpc.
      rewrite inst_sub_id, sub_comp_id_right, subst_sub_comp.
      rewrite <- ?inst_subst. auto.
    Qed.

    Lemma dmut_wf_sub {Œì1 Œì2 AT A Œ£0} {instA : Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) (wf_d : dmut_wf d) :
      forall (Œ£1 : LCtx) (Œ∂1 : Sub Œ£0 Œ£1), dmut_wf (dmut_sub Œ∂1 d).
    Proof.
      intros Œ£1 Œ∂1 Œ£2 Œ£3 Œ∂2 Œ∂3 pc2 s2 POST POST_dcl. unfold dmut_sub.
      rewrite <- sub_comp_assoc. now apply wf_d.
    Qed.

    Lemma dmut_wf_demonic_binary {Œì1 Œì2 AT A Œ£0} `{Inst AT A} (d1 d2 : DynamicMutator Œì1 Œì2 AT Œ£0) (wf_d1 : dmut_wf d1) (wf_d2 : dmut_wf d2) :
      dmut_wf (dmut_demonic_binary d1 d2).
    Proof.
      unfold dmut_wf, dmut_demonic_binary in *. cbn.
      intros * POST_dcl [H1 H2].
      split.
      - revert H1. now apply wf_d1.
      - revert H2. now apply wf_d2.
    Qed.

    Lemma dmut_wf_angelic_binary {Œì1 Œì2 AT A Œ£0} `{Inst AT A} (d1 d2 : DynamicMutator Œì1 Œì2 AT Œ£0) (wf_d1 : dmut_wf d1) (wf_d2 : dmut_wf d2) :
      dmut_wf (dmut_angelic_binary d1 d2).
    Proof.
      unfold dmut_wf, dmut_angelic_binary in *. cbn.
      intros * POST_dcl [H1|H1].
      - left. revert H1. now apply wf_d1.
      - right. revert H1. now apply wf_d2.
    Qed.

    Module WfExperiments.

      Definition dmut_wf {Œì1 Œì2 AT Œ£0 A} `{Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) : Prop :=
        forall Œ£1 Œ£2 (Œ∂01 : Sub Œ£0 Œ£1) pc1 (s1 : SymbolicState Œì1 Œ£1) (Œ∂12 : Sub Œ£1 Œ£2) pc2 s2 Œ∂02,
          geqpc Œ∂12 pc1 pc2 ->
          geq Œ∂12 pc2 s1 s2 ->
          geq Œ∂12 pc2 Œ∂01 Œ∂02 ->
          forall (P : ResultProperty Œì2 AT Œ£1) (P_dcl : resultprop_downwards_closed P)
                 (Q : ResultProperty Œì2 AT Œ£2) (PQ : forall r, resultprop_specialize' Œ∂12 pc2 P r -> Q r),
            outcome_satisfy (d Œ£1 Œ∂01 pc1 s1) P ->
            outcome_satisfy (d Œ£2 Œ∂02 pc2 s2) Q.

      Definition dmut_wf' {Œì1 Œì2 AT Œ£0 A} `{Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) : Prop :=
        forall Œ£1 Œ£2 (Œ∂01 : Sub Œ£0 Œ£1) pc1 (s1 : SymbolicState Œì1 Œ£1) (Œ∂12 : Sub Œ£1 Œ£2) pc2 s2 Œ∂02,
          geqpc Œ∂12 pc1 pc2 ->
          geq Œ∂12 pc2 s1 s2 ->
          geq Œ∂12 pc2 Œ∂01 Œ∂02 ->
          forall (POST : ResultProperty Œì2 AT Œ£1) (POST_dcl : resultprop_downwards_closed POST),
            outcome_satisfy (d Œ£1 Œ∂01 pc1 s1) POST ->
            outcome_satisfy (d Œ£2 Œ∂02 pc2 s2) (resultprop_specialize' Œ∂12 pc2 POST).

      Definition outcome_result_geq {Œì AT A} `{Inst AT A} {Œ£1 Œ£2} (Œ∂12 : Sub Œ£1 Œ£2)
                 (pc2 : PathCondition Œ£2)
                 (or1 : Outcome (DynamicMutatorResult Œì AT Œ£1))
                 (or2 : Outcome (DynamicMutatorResult Œì AT Œ£2)) : Prop :=
        forall
          (P : ResultProperty Œì AT _) (P_dcl : resultprop_downwards_closed P)
          (Q : ResultProperty Œì AT _) (Q_dcl : resultprop_downwards_closed Q)
          (PQ : forall r, geqpc (dmutres_substitution r) pc2 (dmutres_pathcondition r) -> resultprop_specialize Œ∂12 P r -> Q r)
          (QP : forall r, geqpc (dmutres_substitution r) pc2 (dmutres_pathcondition r) -> Q r -> resultprop_specialize Œ∂12 P r),
          outcome_satisfy or1 P ->
          outcome_satisfy or2 Q.

      Definition dmut_wf'' {Œì1 Œì2 AT Œ£0 A} `{Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) : Prop :=
        forall Œ£1 Œ£2 (Œ∂1 : Sub Œ£0 Œ£1) (Œ∂2 : Sub Œ£0 Œ£2) (Œ∂12 : Sub Œ£1 Œ£2) pc1 s1 pc2 s2,
          geqpc Œ∂12 pc1 pc2 ->
          geq Œ∂12 pc2 s1 s2 ->
          geq Œ∂12 pc2 Œ∂1 Œ∂2 ->
          outcome_result_geq Œ∂12 pc2 (d Œ£1 Œ∂1 pc1 s1) (d Œ£2 Œ∂2 pc2 s2).

      Lemma dmut_wf_wf' {Œì1 Œì2 AT Œ£0 A} `{Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) :
        dmut_wf d <-> dmut_wf' d.
      Proof.
        split.
        - unfold dmut_wf, dmut_wf'.
          intros d_wf * Hpc12 Hs12 HŒ∂12 P P_dcl.
          eapply d_wf; eauto.
        - unfold dmut_wf, dmut_wf'.
          intros d_wf * Hpc12 Hs12 HŒ∂12 P P_dcl Q PQ.
          intros HP. eapply d_wf in HP; eauto. revert HP.
          apply outcome_satisfy_monotonic. intros r. apply PQ.
      Qed.

      Lemma dmut_wf'_wf'' {Œì1 Œì2 AT Œ£0 A} `{Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) :
        dmut_wf' d <-> dmut_wf'' d.
      Proof.
        split.
        - unfold dmut_wf, dmut_wf', dmut_wf''. intros d_wf.
          intros * Hpc12 Hs12 HŒ∂12. unfold outcome_result_geq.
          intros * P_dcl * Q_dcl PQ QP. intros HYP.
          eapply d_wf in HYP; eauto.
          revert HYP. apply outcome_satisfy_monotonic.
          intros [Œ£3 Œ∂23 pc3 a3 s3]; cbn.
          intros [Hpc23 HP]. revert HP. now apply PQ.
        - unfold dmut_wf, dmut_wf', dmut_wf''. intros d_wf.
          intros * Hpc12 Hs12 HŒ∂12 POST POST_dcl.
          eapply d_wf; eauto using resultprop_specialize_dcl'.
          + unfold resultprop_specialize, resultprop_specialize'.
            intros []; intuition.
          + unfold resultprop_specialize, resultprop_specialize'.
            intros []; intuition.
      Qed.

      Lemma dmut_wf_pure {Œì AT Œ£ A} {subA: Subst AT} {sublAT: SubstLaws AT}
            {instA : Inst AT A} {instlA : InstLaws AT A} (a : AT Œ£) :
        dmut_wf (dmut_pure (Œì := Œì) a).
      Proof.
        unfold dmut_wf, dmut_pure; cbn.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl Q PQ.
        intros HP. apply PQ. split. cbn.
        apply geqpc_refl. revert HP.
        apply P_dcl. apply dmutres_geq_sem_sem'.
        exists Œ∂12. repeat split; auto.
        - apply geq_subst.
          change (subst Œ∂12 ?Œ∂) with (sub_comp Œ∂ Œ∂12).
          now rewrite sub_comp_id_right, sub_comp_id_left.
        - revert HŒ∂12.
          unfold geq. intros HYP Œπ1 Œπ2 rel12 Hpc2.
          specialize (HYP Œπ1 Œπ2 rel12 Hpc2) .
          rewrite ?inst_subst. congruence.
      Qed.

      Definition DynamicMutatorArrow' Œì1 Œì2 A B Œ£0 : Type :=
        forall Œ£1,
          Sub Œ£0 Œ£1 -> A Œ£1 -> PathCondition Œ£1 ->
          SymbolicState Œì1 Œ£1 -> Outcome (DynamicMutatorResult Œì2 B Œ£1).

      Definition dmut_wf_arrow' {Œì1 Œì2 AT A BT B Œ£0} `{Inst AT A, Inst BT B}
        (f : DynamicMutatorArrow' Œì1 Œì2 AT BT Œ£0) : Prop :=
        forall Œ£1 Œ£2 (Œ∂01 : Sub Œ£0 Œ£1) (Œ∂02 : Sub Œ£0 Œ£2) (Œ∂12 : Sub Œ£1 Œ£2) pc1 pc2 (a1 : AT Œ£1) (a2 : AT Œ£2) s1 s2,
          geqpc Œ∂12 pc1 pc2 ->
          geq Œ∂12 pc2 s1 s2 ->
          geq Œ∂12 pc2 Œ∂01 Œ∂02 ->
          forall (P : ResultProperty Œì2 BT Œ£1) (P_dcl : resultprop_downwards_closed P)
            (Q : ResultProperty Œì2 BT Œ£2) (PQ : forall r, resultprop_specialize' Œ∂12 pc2 P r -> Q r),
            outcome_satisfy (f Œ£1 Œ∂01 a1 pc1 s1) P ->
            outcome_satisfy (f Œ£2 Œ∂02 a2 pc2 s2) Q.

      Definition dmut_bind' {Œì1 Œì2 Œì3 A B Œ£0}
                 (ma : DynamicMutator Œì1 Œì2 A Œ£0) (f : DynamicMutatorArrow' Œì2 Œì3 A B Œ£0) : DynamicMutator Œì1 Œì3 B Œ£0 :=
        fun (Œ£1 : LCtx) (Œ∂01 : Sub Œ£0 Œ£1) pc1 (s1 : SymbolicState Œì1 Œ£1) =>
          outcome_bind (ma Œ£1 Œ∂01 pc1 s1) (fun r : DynamicMutatorResult Œì2 A Œ£1 =>
          outcome_bind (f (dmutres_context r) (sub_comp Œ∂01 (dmutres_substitution r)) (dmutres_result_value r) (dmutres_pathcondition r) (dmutres_result_state r))
                       (fun r2 : DynamicMutatorResult Œì3 B (dmutres_context r) => outcome_pure (cosubst_dmutres (dmutres_substitution r) r2))).

      Lemma dmut_wf_bind' {AT A BT B} {substB : Subst BT} {instB : Inst BT B} {instA : Inst AT A}
            {subA : Subst AT} {subLA : SubstLaws AT} {instLA : InstLaws AT A}
            {Œì1 Œì2 Œì3 Œ£0} (d : DynamicMutator Œì1 Œì2 AT Œ£0) (wf_d : dmut_wf d)
            (f : DynamicMutatorArrow' Œì2 Œì3 AT BT Œ£0)
            (f_wf : dmut_wf_arrow' f) :
        dmut_wf (dmut_bind' d f).
      Proof.
        unfold dmut_wf, dmut_bind'.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl Q PQ.
        rewrite ?outcome_satisfy_bind; cbn.
        eapply wf_d; eauto.
        - clear - f_wf P P_dcl.
          unfold resultprop_downwards_closed.
          intros [Œ£2 Œ∂12 pc2 a2 s2] [Œ£3 Œ∂13 pc3 a3 s3] [Œ∂23 (Hpc23 & HŒ∂23 & ?)]%dmutres_geq_sem_sem'; cbn in *.
          rewrite ?outcome_satisfy_bind; cbn.
          destruct_conjs. eapply f_wf; eauto using geq_pre_comp.
          now apply resultprop_specialize_dcl.
          intros [Œ£4 Œ∂34 pc4 b4 s4]; unfold resultprop_specialize'; cbn.
          intros [Hpc34 HP]; revert HP. apply P_dcl.
          apply dmutres_geq_sem_sem'. exists (sub_id _).
          repeat split; try apply geq_refl.
          apply geqpc_refl.
          clear - HŒ∂23 Hpc34. intros ? Œπ4 <-. rewrite inst_sub_id.
          pose (inst Œπ4 Œ∂34) as Œπ3.
          pose (inst Œπ3 Œ∂23) as Œπ2.
          specialize (HŒ∂23 Œπ2 Œπ3 eq_refl).
          specialize (Hpc34 Œπ3 Œπ4 eq_refl).
          unfold sub_comp; rewrite ?inst_subst.
          intuition.
        - intros [Œ£3 Œ∂23 pc3 a3 s3]; unfold resultprop_specialize'; cbn.
          rewrite ?outcome_satisfy_bind; cbn.
          intros [Hpc23 Hpost]; revert Hpost.
          eapply f_wf; try apply geq_refl.
          + apply geqpc_refl.
          + clear - HŒ∂12 Hpc23.
            intros ? Œπ3 <- Hpc3.
            rewrite inst_sub_id.
            pose (inst Œπ3 Œ∂23) as Œπ2.
            pose (inst Œπ2 Œ∂12) as Œπ1.
            specialize (Hpc23 Œπ2 Œπ3 eq_refl).
            specialize (HŒ∂12 Œπ1 Œπ2 eq_refl).
            unfold sub_comp. rewrite ?inst_subst.
            intuition.
          + now apply resultprop_specialize_dcl.
          + intros [Œ£4 Œ∂34 pc4 b4 s4]; unfold resultprop_specialize'; cbn.
            intros [Hpc34 Hpost]. rewrite sub_comp_id_left, sub_comp_assoc in Hpost.
            apply PQ. split; cbn; auto. eapply geqpc_trans; eauto. now apply geq_subst.
      Qed.

      Definition DynamicMutatorArrow Œì1 Œì2 A B Œ£0 : Type :=
        forall Œ£1, Sub Œ£0 Œ£1 -> A Œ£1 -> DynamicMutator Œì1 Œì2 B Œ£1.

      Definition dmut_wf_arrow {Œì1 Œì2 AT A BT B Œ£0} `{Inst AT A, Inst BT B}
                 (f : DynamicMutatorArrow Œì1 Œì2 AT BT Œ£0) : Prop :=
        forall Œ£1 Œ£2 (Œ∂01 : Sub Œ£0 Œ£1) (Œ∂02 : Sub Œ£0 Œ£2) (Œ∂12 : Sub Œ£1 Œ£2) pc1 pc2 (a1 : AT Œ£1) (a2 : AT Œ£2) s1 s2,
          geqpc Œ∂12 pc1 pc2 ->
          geq Œ∂12 pc2 s1 s2 ->
          geq Œ∂12 pc2 Œ∂01 Œ∂02 ->
          forall (P : ResultProperty Œì2 BT Œ£1) (P_dcl : resultprop_downwards_closed P)
            (Q : ResultProperty Œì2 BT Œ£2) (PQ : forall r, resultprop_specialize' Œ∂12 pc2 P r -> Q r),
            outcome_satisfy (f Œ£1 Œ∂01 a1 Œ£1 (sub_id _) pc1 s1) P ->
            outcome_satisfy (f Œ£2 Œ∂02 a2 Œ£2 (sub_id _) pc2 s2) Q.

      Lemma dmut_wf_bind {AT A BT B} {substB : Subst BT} {instB : Inst BT B} {instA : Inst AT A}
            {subA : Subst AT} {subLA : SubstLaws AT} {instLA : InstLaws AT A}
            {Œì1 Œì2 Œì3 Œ£0} (d : DynamicMutator Œì1 Œì2 AT Œ£0) (wf_d : dmut_wf d)
            (f : DynamicMutatorArrow Œì2 Œì3 AT BT Œ£0)
            (f_wf : dmut_wf_arrow f) :
        dmut_wf (dmut_bind d f).
      Proof.
        unfold dmut_wf, dmut_bind.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl Q PQ.
        rewrite ?outcome_satisfy_bind; cbn.
        eapply wf_d; eauto.
        - clear - f_wf P P_dcl.
          unfold resultprop_downwards_closed.
          intros [Œ£2 Œ∂12 pc2 a2 s2] [Œ£3 Œ∂13 pc3 a3 s3] [Œ∂23 (Hpc23 & HŒ∂23 & ?)]%dmutres_geq_sem_sem'; cbn in *.
          rewrite ?outcome_satisfy_bind; cbn.
          destruct_conjs. eapply f_wf; eauto using geq_pre_comp.
          + unfold resultprop_downwards_closed.
            intros [] [] Hgeq; cbn - [dmutres_geq_sem].
            apply P_dcl. revert Hgeq. apply dmutres_geq_sem_pre_comp.
          + intros [Œ£4 Œ∂34 pc4 b4 s4]; unfold resultprop_specialize'; cbn.
            intros [Hpc34 HP]; revert HP. apply P_dcl.
            apply dmutres_geq_sem_sem'. exists (sub_id _).
            repeat split; try apply geq_refl.
            apply geqpc_refl.
            clear - HŒ∂23 Hpc34.
            intros ? Œπ4 <-. rewrite inst_sub_id.
            pose (inst Œπ4 Œ∂34) as Œπ3.
            pose (inst Œπ3 Œ∂23) as Œπ2.
            specialize (HŒ∂23 Œπ2 Œπ3 eq_refl).
            specialize (Hpc34 Œπ3 Œπ4 eq_refl).
            unfold sub_comp; rewrite ?inst_subst.
            intuition.
        - intros [Œ£3 Œ∂23 pc3 a3 s3]; unfold resultprop_specialize'; cbn.
          rewrite ?outcome_satisfy_bind; cbn.
          intros [Hpc23 Hpost]; revert Hpost.
          eapply f_wf; try apply geq_refl.
          + apply geqpc_refl.
          + clear - HŒ∂12 Hpc23. intros ? Œπ3 <- Hpc3.
            rewrite inst_sub_id.
            pose (inst Œπ3 Œ∂23) as Œπ2.
            pose (inst Œπ2 Œ∂12) as Œπ1.
            specialize (Hpc23 Œπ2 Œπ3 eq_refl).
            specialize (HŒ∂12 Œπ1 Œπ2 eq_refl).
            unfold sub_comp. rewrite ?inst_subst.
            intuition.
          + unfold resultprop_downwards_closed.
            intros [] [] Hgeq; cbn - [dmutres_geq_sem].
            apply P_dcl. revert Hgeq. apply dmutres_geq_sem_pre_comp.
          + intros [Œ£4 Œ∂34 pc4 b4 s4]; unfold resultprop_specialize'; cbn.
            intros [Hpc34 Hpost]. apply PQ. split; cbn.
            eapply geqpc_trans; eauto. now apply geq_subst.
            now rewrite sub_comp_id_left, sub_comp_assoc in Hpost.
      Qed.

      Lemma dmut_wf_sub {Œì1 Œì2 AT A Œ£0} {instA : Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) (wf_d : dmut_wf d) :
        forall (Œ£1 : LCtx) (Œ∂1 : Sub Œ£0 Œ£1), dmut_wf (dmut_sub Œ∂1 d).
      Proof.
        unfold dmut_wf, dmut_sub.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl Q PQ.
        eapply wf_d; eauto. now apply geq_pre_comp.
      Qed.

      Lemma dmut_wf_demonic_binary {Œì1 Œì2 AT A Œ£0} `{Inst AT A} (d1 d2 : DynamicMutator Œì1 Œì2 AT Œ£0) (wf_d1 : dmut_wf d1) (wf_d2 : dmut_wf d2) :
        dmut_wf (dmut_demonic_binary d1 d2).
      Proof.
        unfold dmut_wf, dmut_demonic_binary in *. cbn.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl Q PQ [H1 H2].
        split.
        - revert H1. eapply wf_d1; eauto.
        - revert H2. eapply wf_d2; eauto.
      Qed.

      Lemma dmut_wf_angelic_binary {Œì1 Œì2 AT A Œ£0} `{Inst AT A} (d1 d2 : DynamicMutator Œì1 Œì2 AT Œ£0) (wf_d1 : dmut_wf d1) (wf_d2 : dmut_wf d2) :
        dmut_wf (dmut_angelic_binary d1 d2).
      Proof.
        unfold dmut_wf, dmut_angelic_binary in *. cbn.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl Q PQ [H1|H1].
        - left. revert H1. eapply wf_d1; eauto.
        - right. revert H1. eapply wf_d2; eauto.
      Qed.

      Lemma dmut_wf_assume_formula {Œì Œ£} (f : Formula Œ£) :
        dmut_wf (@dmut_assume_formula Œì Œ£ f).
      Proof.
        apply dmut_wf_wf'.
        unfold dmut_assume_formula, dmut_wf'.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl H.
        remember (dmutres_assume_formula pc2 (subst Œ∂02 f) s2) as r.
        destruct (try_solve_formula (subst Œ∂01 f)) eqn:Heq1;
        destruct (try_solve_formula (subst Œ∂02 f)) eqn:Heq2; cbn in *.
        - destruct b, b0; cbn in *; auto.
          + split; cbn. apply geqpc_refl.
            revert H. apply P_dcl. apply dmutres_geq_sem_sem'.
            exists Œ∂12. rewrite sub_comp_id_right.
            repeat split; auto. intros ? ? <-; now rewrite inst_sub_id.
          + destruct (try_solve_formula_spec (subst Œ∂01 f)); try discriminate.
            dependent elimination Heq1.
            destruct (try_solve_formula_spec (subst Œ∂02 f)); try discriminate.
            dependent elimination Heq2.
            exfalso. admit.
        - admit.
        - destruct b; cbn in *; auto. split; cbn.
          apply geqpc_refl. apply dmutres_assume_formula_spec in H; auto.
          revert H. apply P_dcl. apply dmutres_geq_sem_sem'.
          exists Œ∂12. rewrite sub_comp_id_right. repeat split; auto; try apply geq_refl.
          + destruct (try_solve_formula_spec (subst Œ∂02 f)); try discriminate.
            dependent elimination Heq2.
            clear - H Hpc12 HŒ∂12. intros Œπ1 Œπ2 rel12 Hpc2.
            specialize (Hpc12 Œπ1 Œπ2 rel12 Hpc2).
            specialize (HŒ∂12 Œπ1 Œπ2 rel12 Hpc2).
            specialize (H Œπ2).
            rewrite inst_pathcondition_cons. split; auto.
            rewrite inst_subst. rewrite HŒ∂12. rewrite <- inst_subst.
            now apply H.
          + intros ? Œπ2 <-; now rewrite inst_sub_id.
        - admit.
      Admitted.

    End WfExperiments.

    Lemma dmut_wp_sub {Œì1 Œì2 A Œ£0} (d : DynamicMutator Œì1 Œì2 A Œ£0)
          (POST : StateProperty Œì2 A Œ£0) pc (s : SymbolicState Œì1 Œ£0) Œ£1 (Œ∂ : Sub Œ£0 Œ£1) :
        dmut_wp d POST pc s ->
        dmut_wp (dmut_sub Œ∂ d) (stateprop_specialize Œ∂ POST) (subst Œ∂ pc) (subst Œ∂ s).
    Proof.
      unfold dmut_sub, dmut_wp. intros * Hpost *.
      specialize (Hpost Œ£2 (sub_comp Œ∂ Œ∂1)).
      rewrite ?subst_sub_comp in Hpost. revert Hpost.
      apply outcome_satisfy_monotonic. clear. intros [Œ£3 Œ∂3 pc3 a3 s3].
      unfold stateprop_specialize. now rewrite sub_comp_assoc.
    Qed.


    Lemma dmut_wf_assume_formula {Œì Œ£} (f : Formula Œ£) :
      dmut_wf (@dmut_assume_formula Œì Œ£ f).
    Proof.
      unfold dmut_assume_formula, dmut_wf.
      intros.
      destruct (try_solve_formula (subst Œ∂1 f)) eqn:?; cbn in H.
      - rewrite subst_sub_comp.
        pose proof (try_solve_formula_subst Œ∂2 _ Heqo) as ->.
        revert H. destruct b; cbn; auto.
        apply POST_dcl, dmutres_geq_syn_sem.
        exists Œ∂2. now rewrite sub_comp_id_left, sub_comp_id_right.
      - destruct (try_solve_formula_spec (subst (sub_comp Œ∂1 Œ∂2) f)).
        + destruct a; cbn; auto.
          apply dmutres_assume_formula_spec in H; auto. revert H.
          unfold resultprop_specialize. cbn.
          apply POST_dcl. exists Œ∂2.
          intros ? ? <- Hpc.
          rewrite inst_pathcondition_cons.
          rewrite inst_sub_id, sub_comp_id_right.
          rewrite <- ?inst_subst.
          rewrite <- subst_sub_comp.
          intuition.
        + clear Heqo H0. cbn.
          apply dmutres_assume_formula_spec in H; auto.
          apply dmutres_assume_formula_spec.
          apply resultprop_specialize_dcl; auto.
          unfold resultprop_specialize; cbn.
          revert H. rewrite sub_comp_id_right.
          apply POST_dcl.
          apply dmutres_geq_syn_sem. exists Œ∂2.
          now rewrite sub_comp_id_left, subst_sub_comp.
    Qed.

    Lemma dmut_wf_produce_chunk {Œì Œ£} (c : Chunk Œ£) :
      dmut_wf (@dmut_produce_chunk Œì Œ£ c).
    Proof.
      unfold dmut_wf, dmut_produce_chunk; cbn.
      intros * POST_dcl. apply POST_dcl.
      apply dmutres_geq_syn_sem. exists Œ∂2.
      rewrite sub_comp_id_left, sub_comp_id_right.
      rewrite subst_sub_comp.
      rewrite subst_symbolicstate_produce_chunk.
      auto.
    Qed.

    Lemma dmut_wf_produce {Œì Œ£} (asn : Assertion Œ£) :
      dmut_wf (@dmut_produce Œì Œ£ asn).
    Proof.
      induction asn; cbn.
      - apply dmut_wf_assume_formula.
      - apply dmut_wf_produce_chunk.
      - apply dmut_wf_demonic_binary.
        + admit.
        + admit.
      - admit.
      - destruct (term_get_sum s) eqn:?.
        destruct s0; now apply dmut_wf_sub.
        apply dmut_wf_demonic_binary.
        + admit.
        + admit.
      - admit.
      - destruct (term_get_pair s) eqn:?.
        destruct p; now apply dmut_wf_sub.
        admit.
      - admit.
      - destruct (term_get_record s) eqn:?.
        now apply dmut_wf_sub.
        admit.
      - destruct (term_get_union s) eqn:?.
        destruct s0. admit.
        admit.
      - admit.
      - admit.
    Admitted.

    Opaque dmut_assume_formula.
    Opaque subst.
    Opaque sub_up1.
    Opaque sub_snoc.
    Opaque wk1.
    Opaque SubstEnv.

    Lemma dmut_wp_bind {Œì1 Œì2 Œì3 A BT Œ£0 B} {substB : Subst BT} {instB : Inst BT B} (ma : DynamicMutator Œì1 Œì2 A Œ£0)
          (f : forall Œ£', Sub Œ£0 Œ£' -> A Œ£' -> DynamicMutator Œì2 Œì3 BT Œ£')
          (f_wf : forall Œ£' Œ∂ a, dmut_wf (f Œ£' Œ∂ a))
          (POST : StateProperty Œì3 BT Œ£0) (POST_dcl : stateprop_downwards_closed POST) :
      forall pc (s0 : SymbolicState Œì1 Œ£0),
        dmut_wp (dmut_bind ma f) POST pc s0 <->
        dmut_wp ma (fun Œ£1 Œ∂1 pc1 a1 => dmut_wp (f Œ£1 Œ∂1 a1) (stateprop_specialize Œ∂1 POST) pc1) pc s0.
    Proof.
      unfold DynamicMutator, dmut_bind, dmut_wp, dmut_wf in *; cbn; intros s0.
      split; intros H Œ£1 Œ∂1; specialize (H Œ£1 Œ∂1). revert H.
      - rewrite outcome_satisfy_bind. apply outcome_satisfy_monotonic.
        intros [Œ£2 Œ∂2 pc2 a2 s2] H Œ£3 Œ∂3.
        rewrite outcome_satisfy_bind in H.
        apply (f_wf Œ£2 (sub_comp Œ∂1 Œ∂2) a2 Œ£2 Œ£3 (sub_id Œ£2) Œ∂3) in H.
        + revert H. rewrite sub_comp_id_left.
          apply outcome_satisfy_monotonic.
          intros [Œ£4 Œ∂4 pc4 b4 s4]. cbn.
          now rewrite <- sub_comp_assoc.
        + clear f_wf H.
          unfold resultprop_downwards_closed.
          intros [Œ£4 Œ∂4 pc4 b4 s4] [Œ£5 Œ∂5 pc5 b5 s5]. cbn - [dmutres_geq_sem].
          intros Hgeq. apply POST_dcl. rewrite <- ?sub_comp_assoc.
          revert Hgeq. apply dmutres_geq_sem_pre_comp.
      - rewrite outcome_satisfy_bind. revert H.
        apply outcome_satisfy_monotonic.
        intros [Œ£2 Œ∂2 pc2 a2 s2] H. specialize (H Œ£2 (sub_id _)).
        revert H. rewrite outcome_satisfy_bind, ?subst_sub_id.
        apply outcome_satisfy_monotonic.
        intros [Œ£3 Œ∂3 pc3 b3 s3]. cbn.
        unfold stateprop_specialize.
        now rewrite sub_comp_id_left, sub_comp_assoc.
    Qed.

    Lemma dmut_wp_sub_bind {A BT B} {subB : Subst BT} {instB : Inst BT B} {Œì1 Œì2 Œì3  Œ£0 Œ£1} (Œ∂1 : Sub Œ£0 Œ£1)
          (ma : DynamicMutator Œì1 Œì2 A Œ£0)
          (f : forall Œ£', Sub Œ£0 Œ£' -> A Œ£' -> DynamicMutator Œì2 Œì3 BT Œ£')
          (f_wf : forall Œ£' Œ∂ a, dmut_wf (f Œ£' Œ∂ a))
          (POST : StateProperty Œì3 BT Œ£1) (POST_dcl : stateprop_downwards_closed POST) :
      forall pc1 s1,
        dmut_wp (dmut_sub Œ∂1 (dmut_bind ma f)) POST pc1 s1 <->
        dmut_wp
          (dmut_sub Œ∂1 ma)
          (fun Œ£2 Œ∂2 pc2 a2 => dmut_wp (f Œ£2 (sub_comp Œ∂1 Œ∂2) a2) (stateprop_specialize Œ∂2 POST) pc2)
          pc1 s1.
    Proof.
      (* unfold DynamicMutator, dmut_bind, dmut_sub, dmut_wp, dmut_wf in *; cbn; intros s0. *)
      (* split; intros H Œ£2 Œ∂2; specialize (H Œ£2 Œ∂2). revert H. *)
      (* - rewrite outcome_satisfy_bind. apply outcome_satisfy_monotonic. *)
      (*   intros [Œ£3 Œ∂3 a3 s3] H Œ£4 Œ∂4. *)
      (*   rewrite outcome_satisfy_bind in H. *)
      (*   apply (f_wf Œ£3 (sub_comp (sub_comp Œ∂1 Œ∂2) Œ∂3) a3 Œ£3 Œ£4 (sub_id Œ£3) Œ∂4) in H. *)
      (*   + revert H. rewrite sub_comp_id_left, sub_comp_assoc. *)
      (*     apply outcome_satisfy_monotonic. *)
      (*     intros [Œ£5 Œ∂5 b5 s5]. cbn. *)
      (*     now rewrite <- sub_comp_assoc. *)
      (*   + revert POST_dcl. clear. intros. *)
      (*     unfold resultprop_downwards_closed. *)
      (*     intros [Œ£4 Œ∂4 b4 s4] [Œ£5 Œ∂5 b5 s5] Hgeq. *)
      (*     cbn. apply POST_dcl. rewrite <- ?sub_comp_assoc. *)
      (*     revert Hgeq. apply dmutres_geq_sem_pre_comp. *)
      (* - rewrite outcome_satisfy_bind. revert H. *)
      (*   apply outcome_satisfy_monotonic. *)
      (*   intros [Œ£3 Œ∂3 a3 s3] H. specialize (H Œ£3 (sub_id _)). *)
      (*   revert H. rewrite outcome_satisfy_bind, subst_sub_id, sub_comp_assoc. *)
      (*   apply outcome_satisfy_monotonic. *)
      (*   intros [Œ£4 Œ∂4 b4 s4]. cbn. *)
      (*   unfold stateprop_specialize. *)
      (*   now rewrite sub_comp_id_left, sub_comp_assoc. *)
    Admitted.

    Lemma dmut_wp_fresh {Œì Œ£0 AT A x œÑ} `{Subst AT, Inst AT A}
          (d : DynamicMutator Œì Œì AT (Œ£0 ‚ñª (x,œÑ))%ctx) (wfd : dmut_wf d)
          (POST : StateProperty Œì AT Œ£0)
          (POST_dcl : stateprop_downwards_closed POST)
          (pc : PathCondition Œ£0) (s : SymbolicState Œì Œ£0) :
      dmut_wp (dmut_fresh (x,œÑ) d) POST pc s <->
      dmut_wp d (stateprop_specialize sub_wk1 POST) (subst sub_wk1 pc) (subst sub_wk1 s).
    Proof.
      unfold dmut_wp, dmut_fresh; cbn; split; intros HYP ? ?.
      - dependent elimination Œ∂1 as [@env_snoc Œ£0 Œ∂1 _ v]; cbn in v.
        rewrite <- subst_sub_comp, sub_comp_wk1_tail; cbn.
        specialize (HYP Œ£1 Œ∂1).
        rewrite outcome_satisfy_map in HYP; cbn in *.
        apply (@wfd _ Œ£1 _ (env_snoc (sub_id _) (_,œÑ) v)) in HYP; clear wfd.
        + revert HYP.
          change (wk1 (subst Œ∂1 ?t)) with (subst (sub_wk1 (b:=(x,œÑ))) (subst Œ∂1 t)).
          rewrite <- !subst_sub_comp.
          rewrite !sub_comp_wk1_tail. cbn.
          rewrite <- !sub_snoc_comp.
          rewrite !sub_comp_id_right.
          apply outcome_satisfy_monotonic.
          intros [Œ£2 Œ∂2 pc2 a2 s2]. cbn. clear.
          unfold stateprop_specialize.
          rewrite <- (sub_comp_assoc sub_wk1), sub_comp_wk1_tail. cbn.
          rewrite sub_comp_id_left.
          now rewrite <- sub_comp_assoc, sub_comp_wk1_tail.
        + revert POST_dcl. clear. intros.
          unfold resultprop_downwards_closed.
          intros [Œ£2 Œ∂2 pc2 a2 s2] [Œ£3 Œ∂3 pc3 a3 s3] Hgeq.
          cbn. apply POST_dcl. rewrite <- ?sub_comp_assoc.
          revert Hgeq. apply dmutres_geq_sem_pre_comp.
      - rewrite outcome_satisfy_map.
        specialize (HYP (Œ£1 ‚ñª (x,œÑ)) (sub_up1 Œ∂1)).
        rewrite <- ?subst_sub_comp, ?sub_comp_wk1_comm in HYP.
        change (wk1 (b := (x,œÑ)) (subst Œ∂1 ?t)) with (subst (sub_wk1 (b := (x,œÑ))) (subst Œ∂1 t)).
        rewrite <- ?subst_sub_comp. revert HYP.
        apply outcome_satisfy_monotonic.
        intros [Œ£2 Œ∂2 pc2 a2 s2]. clear.
        dependent elimination Œ∂2 as [@env_snoc Œ£1 Œ∂2 _ t].
        unfold stateprop_specialize. cbn.
        now rewrite <- ?sub_comp_assoc, <- sub_comp_wk1_comm.
    Qed.

    Lemma dmut_wp_sub_fresh {Œì Œ£0 Œ£1 AT A x œÑ} `{Subst AT, Inst AT A}
          (Œ∂1 : Sub Œ£0 Œ£1)
          (d : DynamicMutator Œì Œì AT (Œ£0 ‚ñª (x,œÑ))%ctx)
          (POST : StateProperty Œì AT Œ£1)
          (POST_dcl : stateprop_downwards_closed POST)
          (pc : PathCondition Œ£1)
          (s : SymbolicState Œì Œ£1) (wfd : dmut_wf d) :
      dmut_wp (dmut_sub Œ∂1 (dmut_fresh (x,œÑ) d)) POST pc s <->
      dmut_wp (dmut_sub (sub_up1 Œ∂1) d) (stateprop_specialize sub_wk1 POST) (subst sub_wk1 pc) (subst sub_wk1 s).
    Proof.
      unfold dmut_wp, dmut_sub, dmut_fresh; cbn; split; intros HYP Œ£2 Œ∂2.
      - dependent elimination Œ∂2 as [@env_snoc Œ£1 Œ∂2 _ v]; cbn in v.
        rewrite <- ?subst_sub_comp, ?sub_comp_wk1_tail; cbn.
        specialize (HYP Œ£2 Œ∂2).
        rewrite outcome_satisfy_map in HYP; cbn in *.
        apply (@wfd _ Œ£2 _ (env_snoc (sub_id _) (_,œÑ) v)) in HYP; clear wfd.
        + change (wk1 (subst Œ∂2 ?t)) with (subst (sub_wk1 (b:=(x,œÑ))) (subst Œ∂2 t)) in HYP.
          rewrite <- ?subst_sub_comp, <- ?sub_snoc_comp, ?sub_comp_id_right, ?sub_comp_wk1_tail in HYP.
          cbn in HYP. rewrite sub_comp_id_right in HYP.
          rewrite <- sub_snoc_comp. revert HYP.
          apply outcome_satisfy_monotonic.
          intros [Œ£3 Œ∂3 pc3 a3 s3]. cbn. clear. unfold stateprop_specialize.
          rewrite <- (sub_comp_assoc sub_wk1), sub_comp_wk1_tail. cbn.
          rewrite sub_comp_id_left.
          now rewrite <- sub_comp_assoc, sub_comp_wk1_tail.
        + revert POST_dcl. clear. intros.
          unfold resultprop_downwards_closed.
          intros [Œ£3 Œ∂3 pc3 a3 s3] [Œ£4 Œ∂4 pc4 a4 s4] Hgeq.
          cbn. apply POST_dcl. rewrite <- ?sub_comp_assoc.
          revert Hgeq. apply dmutres_geq_sem_pre_comp.
      - rewrite outcome_satisfy_map.
        specialize (HYP (Œ£2 ‚ñª (x,œÑ)) (sub_up1 Œ∂2)).
        rewrite <- ?subst_sub_comp, ?sub_comp_wk1_comm in HYP.
        change (wk1 (b := (x,œÑ)) (subst Œ∂2 ?t)) with (subst (sub_wk1 (b := (x,œÑ))) (subst Œ∂2 t)).
        rewrite ?sub_up_comp, <- ?subst_sub_comp.
        revert HYP. apply outcome_satisfy_monotonic.
        intros [Œ£3 Œ∂3 pc3 a3 s3]. clear.
        dependent elimination Œ∂3 as [@env_snoc Œ£2 Œ∂3 _ t].
        unfold stateprop_specialize. cbn.
        now rewrite <- ?sub_comp_assoc, <- sub_comp_wk1_comm.
    Qed.

    Lemma dmut_bind_sound {Œì1 Œì2 Œì3 Œ£0 AT A BT B}
      `{Subst AT, Inst AT A, InstLaws BT B} (Œπ0 : SymInstance Œ£0)
      (dma : DynamicMutator Œì1 Œì2 AT Œ£0) (wfdm : dmut_wf dma)
      (sma : SCMut Œì1 Œì2 A)
      (dmf : forall Œ£1, Sub Œ£0 Œ£1 -> AT Œ£1 -> DynamicMutator Œì2 Œì3 BT Œ£1)
      (dmf_wf : forall Œ£1 Œ∂ a, dmut_wf (dmf Œ£1 Œ∂ a))
      (smf : A -> SCMut Œì2 Œì3 B) :
      box approximates Œπ0 dma sma ->
      (forall Œ£1 (Œ∂1 : Sub Œ£0 Œ£1) (a1 : AT Œ£1) (Œπ1 : SymInstance Œ£1),
          syminstance_rel Œ∂1 Œπ0 Œπ1 ->
          box approximates Œπ1 (dmf Œ£1 Œ∂1 a1) (smf (inst Œπ1 a1))) ->
      box approximates Œπ0 (dmut_bind dma dmf) (scmut_bind sma smf).
    Proof.
      intros H__a H__f.
      intros Œ£1 Œ∂1 Œπ1 relŒπ1 pc1 s__sym1 POST H__wp Hpc.
      apply scmut_wp_bind. revert Hpc.
      apply dmut_wp_sub_bind in H__wp; auto using stateprop_lift_dcl.
      specialize (H__a Œ£1 Œ∂1 Œπ1 relŒπ1).
      apply H__a. revert H__wp. apply dmut_wp_monotonic.
      intros Œ£2 Œ∂2 pc2 a2 s2 Hwp2 Œπ2 rel12 Hpc2. revert Hpc2.
      specialize (H__f Œ£2 (sub_comp Œ∂1 Œ∂2) a2 Œπ2).
      inster H__f by eapply syminstance_rel_trans; eauto.
      apply approximates_proj in H__f. apply H__f.
      revert Hwp2. apply dmut_wp_monotonic.
      intros Œ£3 Œ∂3 pc3 b3 s__sym3 H__post Œπ3 rel23 Hpc3.
      apply H__post. apply (syminstance_rel_trans rel12 rel23). assumption.
    Qed.

    Lemma dmut_fresh_sound {Œì Œ£ œÇ œÑ} (Œπ : SymInstance Œ£)
          (dm : DynamicMutator Œì Œì Unit (Œ£ ‚ñª (œÇ,œÑ))) (wfdm : dmut_wf dm)
          (sm : Lit œÑ -> SCMut Œì Œì unit) :
      (forall v, box approximates (env_snoc Œπ _ v) dm (sm v)) ->
      box approximates Œπ
        (dmut_fresh (œÇ,œÑ) dm)
        (scmut_demonic sm).
    Proof.
      intros HYP. unfold box, approximates.
      intros * <- pc1 s1 POST Hwp Hpc.
      apply scmut_wp_demonic. intros v.
      specialize (HYP v (Œ£1 ‚ñª (œÇ,œÑ)) (sub_up1 Œ∂1) (env_snoc Œπ1 (œÇ,œÑ) v)).
      inster HYP by apply syminstance_rel_up; auto.
      unfold approximates in HYP.
      specialize (HYP (subst sub_wk1 pc1) (subst (sub_wk1) s1) POST).
      rewrite ?inst_subst, ?inst_sub_wk1 in HYP. apply HYP; auto.
      apply dmut_wp_sub_fresh in Hwp; auto using stateprop_lift_dcl.
      revert Hwp.
      apply dmut_wp_monotonic; cbn.
      unfold stateprop_impl, stateprop_specialize, stateprop_lift.
      intros ? Œ∂ * Hpost Œπ0 rel10.
      dependent elimination Œ∂ as [@env_snoc Œ£0 Œ∂ _ t].
      apply syminstance_rel_snoc in rel10.
      apply Hpost. now rewrite sub_comp_wk1_tail.
    Qed.

    Lemma dmut_produce_sound {Œì Œ£} (asn : Assertion Œ£) (Œπ : SymInstance Œ£) :
      box approximates
        (Œì1 := Œì) (Œì2 := Œì) Œπ
        (dmut_produce asn)
        (scmut_produce Œπ asn).
    Proof.
      induction asn; cbn.
      - apply dmut_assume_formula_sound.
      - apply dmut_produce_chunk_sound.
      - apply approximates_demonic_binary.
        + unfold dmut_bind_right.
          eapply dmut_bind_sound.
          apply dmut_wf_assume_formula.
          intros. apply dmut_wf_sub, dmut_wf_produce.
          apply dmut_assume_formula_sound.
          intros.
          eapply approximates_sub; eauto.
        + eapply dmut_bind_sound.
          apply dmut_wf_assume_formula.
          intros. apply dmut_wf_sub, dmut_wf_produce.
          apply dmut_assume_formula_sound.
          intros.
          eapply approximates_sub; eauto.
      - admit.
      - admit.
      - admit.
      - admit.
      - admit.
      - admit.
      - admit.
      - intros. apply dmut_bind_sound. admit. admit.
        apply IHasn1. intros.
        eapply approximates_sub; eauto.
      - apply dmut_fresh_sound.
        + admit.
        + intros. apply IHasn.
    Admitted.

    Opaque dmut_wp.
    Opaque scmut_wp.

    Section Leftovers.

      Context `{HL: IHeaplet L} {SLL: ISepLogicLaws L}.

      Definition interpret_heap {Œ£} (Œπ : SymInstance Œ£) (h : SymbolicHeap Œ£) : L :=
        List.fold_right (fun c h => ASS.inst_chunk Œπ c ‚àß h) ltrue h.

      Transparent subst SubstEnv.
      Lemma subst_lookup {Œì Œ£ Œ£' x œÉ} (xInŒì : (x ‚à∂ œÉ)%ctx ‚àà Œì) (Œ∂ : Sub Œ£ Œ£') (Œ¥ : SymbolicLocalStore Œì Œ£) :
        (subst Œ∂ (Œ¥ ‚Äº x)%exp = (subst Œ∂ Œ¥ ‚Äº x)%exp).
      Proof.
        unfold subst at 2, subst_localstore, SubstEnv.
        now rewrite env_lookup_map.
      Qed.

      Lemma subst_symboliceval {Œì œÑ Œ£ Œ£'} (e : Exp Œì œÑ) (Œ∂ : Sub Œ£ Œ£') (Œ¥ : SymbolicLocalStore Œì Œ£) :
        subst (T := fun Œ£ => Term Œ£ _) Œ∂ (symbolic_eval_exp Œ¥ e) = symbolic_eval_exp (subst Œ∂ Œ¥) e.
      Proof.
        induction e; cbn; f_equal; auto.
        { now rewrite (subst_lookup xInŒì). }
        all: induction es; cbn in *; destruct_conjs; f_equal; auto.
      Qed.

      Transparent inst instantiate_env.

      Lemma eval_exp_inst {Œì Œ£ œÑ} (Œπ : SymInstance Œ£) (Œ¥ŒìŒ£ : SymbolicLocalStore Œì Œ£) (e : Exp Œì œÑ) :
        eval e (inst Œπ Œ¥ŒìŒ£) = inst Œπ (symbolic_eval_exp Œ¥ŒìŒ£ e).
      Proof.
        induction e; cbn; repeat f_equal; auto.
        { unfold inst; cbn. now rewrite env_lookup_map. }
        2: {
          induction es as [|eb n es IHes]; cbn in *.
          { reflexivity. }
          { destruct X as [-> Heqs].
            change (inst_term ?Œπ ?t) with (inst Œπ t).
            destruct (inst Œπ (symbolic_eval_exp Œ¥ŒìŒ£ eb));
              cbn; f_equal; auto.
          }
        }
        all: induction es; cbn in *; destruct_conjs; f_equal; auto.
      Qed.

    End Leftovers.

  End DynMutV1Soundness.

End Soundness.
