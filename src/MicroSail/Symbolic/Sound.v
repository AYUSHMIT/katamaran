(******************************************************************************)
(* Copyright (c) 2019 Steven Keuchel                                          *)
(* All rights reserved.                                                       *)
(*                                                                            *)
(* Redistribution and use in source and binary forms, with or without         *)
(* modification, are permitted provided that the following conditions are     *)
(* met:                                                                       *)
(*                                                                            *)
(* 1. Redistributions of source code must retain the above copyright notice,  *)
(*    this list of conditions and the following disclaimer.                   *)
(*                                                                            *)
(* 2. Redistributions in binary form must reproduce the above copyright       *)
(*    notice, this list of conditions and the following disclaimer in the     *)
(*    documentation and/or other materials provided with the distribution.    *)
(*                                                                            *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  *)
(* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR *)
(* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR          *)
(* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,      *)
(* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *)
(* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *)
(* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *)
(* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *)
(* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *)
(* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               *)
(******************************************************************************)

From Coq Require Import
     Bool.Bool
     Program.Equality
     Program.Tactics
     ZArith.ZArith
     Strings.String
     Classes.Morphisms
     Classes.Morphisms_Prop
     Classes.Morphisms_Relations.

From Equations Require Import
     Equations.

From MicroSail Require Import
     Sep.Spec
     Sep.Logic
     Sep.Hoare
     Syntax
     Tactics
     Symbolic.Mutator.
From MicroSail Require Import
     SemiConcrete.Mutator
     SemiConcrete.Outcome
     SemiConcrete.Sound.

Set Implicit Arguments.

Import CtxNotations.
Import EnvNotations.

Module Soundness
       (Import termkit : TermKit)
       (Import progkit : ProgramKit termkit)
       (Import assertkit : AssertionKit termkit progkit)
       (Import contractkit : SymbolicContractKit termkit progkit assertkit).
  Module MUT := Mutators termkit progkit assertkit contractkit.
  Import MUT.
  Module LOG := ProgramLogic termkit progkit assertkit contractkit.
  Import LOG.
  Module SCMUT := SemiConcrete.Sound.Soundness termkit progkit assertkit contractkit.
  Import SCMUT.MUT.

  Module DynMutV1Soundness.

    Import DynMutV1.

    Definition inconsistent {Œ£} (pc : PathCondition Œ£) : Prop :=
      forall Œπ, ~ inst Œπ pc.

    Global Instance inst_heap : Inst SymbolicHeap SCHeap :=
      instantiate_list.
    Global Instance instlaws_heap : InstLaws SymbolicHeap SCHeap.
    Proof. apply instantiatelaws_list. Qed.

    Global Instance inst_symbolicstate {Œì} : Inst (SymbolicState Œì) (SCState Œì) :=
      {| inst Œ£ Œπ '(MkSymbolicState Œ¥ h) := MkSCState (inst Œπ Œ¥) (inst Œπ h);
         lift Œ£ '(MkSCState Œ¥ h) := MkSymbolicState (lift Œ¥) (lift h);
      |}.

    Global Instance instlaws_symbolicState {Œì} : InstLaws (SymbolicState Œì) (SCState Œì).
    Proof.
      constructor.
      - intros ? ? []; cbn; now rewrite ?inst_lift.
      - intros ? ? ? ? []; cbn; now rewrite ?inst_subst.
    Qed.

    (* Relate two symbolic instances at different points during execution. This
       essentially encodes a preorder on the total space { Œ£ & SymInstance Œ£ },
       which encodes that Œπ2 is a future of Œπ1, i.e. it is derived by compatible
       for existing variables and values for new universal variables. *)
    Definition syminstance_rel {Œ£1 Œ£2} (Œ∂ : Sub Œ£1 Œ£2) (Œπ1 : SymInstance Œ£1) (Œπ2 : SymInstance Œ£2) : Prop :=
      inst Œπ2 Œ∂ = Œπ1.
    Hint Unfold syminstance_rel : core.

    Lemma syminstance_rel_refl {Œ£} (Œπ : SymInstance Œ£) :
      syminstance_rel (sub_id Œ£) Œπ Œπ.
    Proof. apply inst_sub_id. Qed.

    Lemma syminstance_rel_refl_inv {Œ£} (Œπ1 Œπ2 : SymInstance Œ£) :
      syminstance_rel (sub_id Œ£) Œπ1 Œπ2 -> Œπ2 = Œπ1.
    Proof. unfold syminstance_rel. now rewrite inst_sub_id. Qed.

    Lemma syminstance_rel_snoc {Œ£1 Œ£2 x œÑ} (Œ∂ : Sub Œ£1 Œ£2) (Œπ1 : SymInstance Œ£1) Œπ2 :
      forall t v,
        syminstance_rel (env_snoc Œ∂ (x,œÑ) t) (env_snoc Œπ1 (x,œÑ) v) Œπ2 <->
        syminstance_rel Œ∂ Œπ1 Œπ2 /\ v = inst Œπ2 t.
    Proof.
      unfold syminstance_rel. intros. split.
      - cbn; intros.
        now dependent elimination H.
      - cbn; intros []; subst; now cbn.
    Qed.

    Lemma syminstance_rel_comp {Œ£0 Œ£1 Œ£2} (Œ∂1 : Sub Œ£0 Œ£1) (Œ∂2 : Sub Œ£1 Œ£2)
          (Œπ0 : SymInstance Œ£0) (Œπ2 : SymInstance Œ£2):
      syminstance_rel (sub_comp Œ∂1 Œ∂2) Œπ0 Œπ2 <->
      syminstance_rel Œ∂1 Œπ0 (inst Œπ2 Œ∂2).
    Proof. unfold syminstance_rel. now rewrite <- inst_subst. Qed.

    Lemma syminstance_rel_trans {Œ£0 Œ£1 Œ£2} {Œ∂1 : Sub Œ£0 Œ£1} {Œ∂2 : Sub Œ£1 Œ£2}
          {Œπ0 : SymInstance Œ£0} {Œπ1 : SymInstance Œ£1} {Œπ2 : SymInstance Œ£2} :
      syminstance_rel Œ∂1 Œπ0 Œπ1 -> syminstance_rel Œ∂2 Œπ1 Œπ2 ->
      syminstance_rel (sub_comp Œ∂1 Œ∂2) Œπ0 Œπ2.
    Proof. intros. apply syminstance_rel_comp. congruence. Qed.

    Lemma syminstance_rel_wk1 {Œ£ : NCtx ùë∫ Ty} {x œÑ} (Œπ : SymInstance Œ£) (v : Lit œÑ) :
      syminstance_rel sub_wk1 Œπ (Œπ ‚ñ∫ ((x, œÑ) ‚Ü¶ v)).
    Proof. apply inst_sub_wk1. Qed.

    Lemma syminstance_rel_up {Œ£1 Œ£2 x œÑ} (Œ∂ : Sub Œ£1 Œ£2) (Œπ1 : SymInstance Œ£1) Œπ2 :
      forall v,
        syminstance_rel (sub_up1 Œ∂) (env_snoc Œπ1 (x,œÑ) v) (env_snoc Œπ2 (x,œÑ) v) <->
        syminstance_rel Œ∂ Œπ1 Œπ2.
    Proof.
      unfold syminstance_rel. intros v.
      change (inst (Œπ2 ‚ñ∫ (x :: œÑ ‚Ü¶ v)) (sub_comp Œ∂ sub_wk1) ‚ñ∫ (x :: œÑ ‚Ü¶ v) =
              Œπ1 ‚ñ∫ (x :: œÑ ‚Ü¶ v) <-> inst Œπ2 Œ∂ = Œπ1).
      unfold sub_comp. rewrite inst_subst, inst_sub_wk1.
      split; intros H.
      - now dependent elimination H.
      - now f_equal.
    Qed.

    (* UNUSED *)
    Definition syngeq {AT} `{Subst AT, Rewrite AT} {Œ£0 Œ£1} (Œ∂1 : Sub Œ£0 Œ£1) (pc1 : PathCondition Œ£1) (a0 : AT Œ£0) (a1 : AT Œ£1) : Prop :=
      rewrite pc1 a1 (subst Œ∂1 a0).

    (* A generic preorder on symbolic data. The terms a0 and a1 should be
       considered to be outputs of the executor along the same path, just with
       different constraints. More specifically: if we run a symbolic
       computation up to some point with result a0, then a1 denotes the result if
       we ran it with the new constraints given by pc1. *)
    Definition geq {AT A} `{Inst AT A} {Œ£0 Œ£1} (Œ∂1 : Sub Œ£0 Œ£1) (pc1 : PathCondition Œ£1) (a0 : AT Œ£0) (a1 : AT Œ£1) : Prop :=
      forall (Œπ0 : SymInstance Œ£0) (Œπ1 : SymInstance Œ£1),
        syminstance_rel Œ∂1 Œπ0 Œπ1 ->
        (inst Œπ1 pc1 : Prop) ->
        inst Œπ0 a0 = inst Œπ1 a1.

    (* A preorder on path conditions. This encodes that either pc1 belongs to a
       longer symbolic execution path or that it's the same path, but with
       potentially additional constraints. *)
    Definition geqpc {Œ£0 Œ£1} (Œ∂1 : Sub Œ£0 Œ£1) (pc0 : PathCondition Œ£0) (pc1 : PathCondition Œ£1) : Prop :=
      forall (Œπ0 : SymInstance Œ£0) (Œπ1 : SymInstance Œ£1),
        syminstance_rel Œ∂1 Œπ0 Œπ1 ->
        (inst Œπ1 pc1 : Prop) ->
        (inst Œπ0 pc0 : Prop).

    Lemma geq_refl {AT A} `{Inst AT A} {Œ£} (pc : PathCondition Œ£) (a : AT Œ£) :
      geq (sub_id _) pc a a.
    Proof. intros ? ? <-. now rewrite inst_sub_id. Qed.

    Lemma geq_trans {AT A} `{Inst AT A} {Œ£1 Œ£2 Œ£3}
          {Œ∂12 : Sub Œ£1 Œ£2} (pc2 : PathCondition Œ£2)
          {Œ∂23 : Sub Œ£2 Œ£3} {pc3 : PathCondition Œ£3}
          {a1 : AT Œ£1} (a2 : AT Œ£2) {a3 : AT Œ£3} :
      geqpc Œ∂23 pc2 pc3 ->
      geq Œ∂12 pc2 a1 a2 ->
      geq Œ∂23 pc3 a2 a3 ->
      geq (sub_comp Œ∂12 Œ∂23) pc3 a1 a3.
    Proof.
      intros Hpc23 Ha12 Ha23 Œπ1 Œπ3 rel13 Hpc3.
      pose (inst Œπ3 Œ∂23) as Œπ2.
      pose proof (Hpc23 Œπ2 Œπ3 eq_refl Hpc3) as Hpc2.
      specialize (Ha23 Œπ2 Œπ3 eq_refl Hpc3).
      apply syminstance_rel_comp in rel13.
      specialize (Ha12 Œπ1 Œπ2 rel13 Hpc2).
      now transitivity (inst Œπ2 a2).
    Qed.

    Lemma geq_syntactic {AT A} `{InstLaws AT A} {Œ£0 Œ£1} (Œ∂1 : Sub Œ£0 Œ£1) (pc1 : PathCondition Œ£1) (a0 : AT Œ£0) (a1 : AT Œ£1) :
      a1 = subst Œ∂1 a0 ->
      geq Œ∂1 pc1 a0 a1.
    Proof.
      unfold geq, syminstance_rel.
      intros -> * <-. now rewrite inst_subst.
    Qed.

    Lemma geq_subst {AT A} `{InstLaws AT A} {Œ£2 Œ£3 Œ£4} (a : AT Œ£2) (Œ∂23 : Sub Œ£2 Œ£3) (Œ∂24 : Sub Œ£2 Œ£4) (Œ∂34 : Sub Œ£3 Œ£4)
          (pc4 : PathCondition Œ£4) :
      geq Œ∂34 pc4 Œ∂23 Œ∂24 -> geq Œ∂34 pc4 (subst Œ∂23 a) (subst Œ∂24 a).
    Proof.
      intros HŒ∂34 Œπ3 Œπ4 rel34 Hpc4. specialize (HŒ∂34 Œπ3 Œπ4 rel34 Hpc4).
      rewrite ?inst_subst. now f_equal.
    Qed.

    Lemma geq_pre_comp {Œ£1 Œ£2 Œ£3 Œ£4} (Œ∂12 : Sub Œ£1 Œ£2) (Œ∂23 : Sub Œ£2 Œ£3) (Œ∂24 : Sub Œ£2 Œ£4) (Œ∂34 : Sub Œ£3 Œ£4)
          (pc4 : PathCondition Œ£4) :
      geq Œ∂34 pc4 Œ∂23 Œ∂24 -> geq Œ∂34 pc4 (sub_comp Œ∂12 Œ∂23) (sub_comp Œ∂12 Œ∂24).
    Proof. apply geq_subst. Qed.

    Lemma geq_sub_comp {Œ£1 Œ£2 Œ£3} (pc3 : PathCondition Œ£3) (Œ∂12 : Sub Œ£1 Œ£2) (Œ∂23 : Sub Œ£2 Œ£3) :
      geq Œ∂23 pc3 Œ∂12 (sub_comp Œ∂12 Œ∂23).
    Proof. apply geq_syntactic. reflexivity. Qed.

    Lemma geqpc_refl {Œ£} (pc : PathCondition Œ£) :
      geqpc (sub_id Œ£) pc pc.
    Proof. intros ? Œπ <-. now rewrite inst_sub_id. Qed.

    Lemma geqpc_trans {Œ£0 Œ£1 Œ£2} (Œ∂01 : Sub Œ£0 Œ£1) (Œ∂02 : Sub Œ£0 Œ£2) (Œ∂12 : Sub Œ£1 Œ£2)
          (pc0 : PathCondition Œ£0) (pc1 : PathCondition Œ£1) (pc2 : PathCondition Œ£2) :
      geq Œ∂12 pc2 Œ∂01 Œ∂02 -> geqpc Œ∂01 pc0 pc1 -> geqpc Œ∂12 pc1 pc2 -> geqpc Œ∂02 pc0 pc2.
    Proof.
      intros HŒ∂ H01 H12 Œπ0 Œπ2 rel02 Hpc2. pose (inst Œπ2 Œ∂12) as Œπ1.
      specialize (HŒ∂ Œπ1 Œπ2 eq_refl Hpc2).
      assert (syminstance_rel Œ∂01 Œπ0 Œπ1) as rel01 by congruence.
      eauto.
    Qed.

    (* A proper preorder on the result of a symbolic execution, using the
    generic geq on every component. *)
    Definition dmutres_geq {Œì AT A Œ£} {instA : Inst AT A} (r1 r2 : DynamicMutatorResult Œì AT Œ£) : Prop :=
      match r1 , r2 with
      | MkDynMutResult Œ∂1 pc1 a1 s1, MkDynMutResult Œ∂2 pc2 a2 s2 =>
        exists Œ∂12,
        geqpc Œ∂12 pc1 pc2 /\
        geq Œ∂12 pc2 Œ∂1 Œ∂2 /\
        geq Œ∂12 pc2 a1 a2 /\
        geq Œ∂12 pc2 s1 s2
      end.

    Definition dmutres_geq_low_level {Œì A V Œ£} {instA : Inst A V} (r1 r2 : DynamicMutatorResult Œì A Œ£) : Prop :=
      match r1 , r2 with
      | MkDynMutResult Œ∂1 pc1 a1 s1, MkDynMutResult Œ∂2 pc2 a2 s2 =>
        exists Œ∂12,
        forall Œπ1 Œπ2,
          syminstance_rel Œ∂12 Œπ1 Œπ2 ->
          (inst Œπ2 pc2 : Prop) ->
          inst Œπ1 pc1 /\
          inst Œπ1 Œ∂1 = inst Œπ2 Œ∂2 /\
          inst Œπ1 a1 = inst Œπ2 a2 /\
          inst Œπ1 s1 = inst Œπ2 s2
      end.

    Lemma dmutres_geq_low_equiv {Œì A V Œ£} {instA : Inst A V} :
      forall (r1 r2 : DynamicMutatorResult Œì A Œ£),
        dmutres_geq r1 r2 <-> dmutres_geq_low_level r1 r2.
    Proof.
      intros [Œ£1 Œ∂1 pc1 a1 s1] [Œ£2 Œ∂2 pc2 a2 s2]; cbn. unfold geqpc, geq.
      split; intros [Œ∂12 Hgeq]; exists Œ∂12; intuition.
    Qed.

    (* A frequent special case. *)
    Lemma dmutres_geq_syntactic {Œì A V Œ£} `{InstLaws A V} :
      forall r1 r2 : DynamicMutatorResult Œì A Œ£,
        (match r1 , r2 with
         | MkDynMutResult Œ∂1 pc1 a1 s1, MkDynMutResult Œ∂2 pc2 a2 s2 =>
           exists Œ∂12,
           Œ∂2  = sub_comp Œ∂1 Œ∂12 /\
           pc2 = subst Œ∂12 pc1 /\
           a2  = subst Œ∂12 a1 /\
           s2  = subst Œ∂12 s1
         end
        ) ->
        dmutres_geq r1 r2.
    Proof.
      intros [Œ£1 Œ∂1 pc1 a1 s1] [Œ£2 Œ∂2 pc2 a2 s2] [Œ∂12 Hgeq]; cbn - [dmutres_geq];
        destruct_conjs; subst.
      apply dmutres_geq_low_equiv.
      exists Œ∂12. intros ? ? <-.
      unfold sub_comp; now rewrite ?inst_subst.
    Qed.

    Global Instance dmutres_geq_preorder {Œì AT A Œ£} `{Inst AT A} : PreOrder (@dmutres_geq Œì AT A Œ£ _).
    Proof.
      constructor.
      - intros [Œ£1 Œ∂1 pc a1 s]. exists (sub_id _).
        repeat split; try apply geq_refl. apply geqpc_refl.
      - intros [Œ£1 Œ∂1 pc1 a1 s1] [Œ£2 Œ∂2 pc2 a2 s2] [Œ£3 Œ∂3 pc3 a3 s3] [Œ∂12] [Œ∂23]; cbn.
        destruct_conjs. exists (sub_comp Œ∂12 Œ∂23).
        repeat split.
        + apply geqpc_trans with Œ∂12 Œ∂23 pc2; auto using geq_sub_comp.
        + apply geq_trans with pc2 Œ∂2; auto.
        + apply geq_trans with pc2 a2; auto.
        + apply geq_trans with pc2 s2; auto.
    Qed.

    Global Instance dmutres_geq_rewrite {Œì AT A Œ£} `{Inst AT A} : RewriteRelation (@dmutres_geq Œì AT A Œ£ _).
    Qed.

    Lemma dmutres_geq_pre_comp {AT A} `{Inst AT A} {Œì Œ£1 Œ£2 Œ£3}
          (Œ∂2 : Sub Œ£1 Œ£2) (a2 : AT Œ£2) pc2 (s2 : SymbolicState Œì Œ£2)
          (Œ∂3 : Sub Œ£1 Œ£3) (a3 : AT Œ£3) pc3 (s3 : SymbolicState Œì Œ£3) :
      forall Œ£0 (Œ∂1 : Sub Œ£0 Œ£1),
        dmutres_geq (MkDynMutResult Œ∂2 pc2 a2 s2) (MkDynMutResult Œ∂3 pc3 a3 s3) ->
        dmutres_geq (MkDynMutResult (sub_comp Œ∂1 Œ∂2) pc2 a2 s2) (MkDynMutResult (sub_comp Œ∂1 Œ∂3) pc3 a3 s3).
    Proof.
      intros ? ?. intros [Œ∂23]. exists Œ∂23. destruct_conjs.
      repeat split; auto using geq_pre_comp.
    Qed.

    Definition dmutres_equiv {Œì AT A Œ£} {instA : Inst AT A} (r1 r2 : DynamicMutatorResult Œì AT Œ£) : Prop :=
      dmutres_geq r1 r2 /\ dmutres_geq r2 r1.

    Section StateProp.

      Definition StateProperty Œì A Œ£ :=
        forall Œ£1, Sub Œ£ Œ£1 -> PathCondition Œ£1 -> A Œ£1 -> SymbolicState Œì Œ£1 -> Prop.

      Definition stateprop_downwards_closed {Œì Œ£ AT A} `{Inst AT A} (p : StateProperty Œì AT Œ£) : Prop :=
        forall Œ£1 (Œ∂1 : Sub Œ£ Œ£1) pc1 a1 s1 Œ£2 (Œ∂2 : Sub Œ£ Œ£2) pc2 a2 s2,
          dmutres_geq (MkDynMutResult Œ∂1 pc1 a1 s1) (MkDynMutResult Œ∂2 pc2 a2 s2) ->
          p Œ£1 Œ∂1 pc1 a1 s1 -> p Œ£2 Œ∂2 pc2 a2 s2.

      (* The property always holds vacuously on inconsistent paths. *)
      Definition stateprop_vacuous {Œì AT Œ£} (p : StateProperty Œì AT Œ£) : Prop :=
        forall Œ£1 (Œ∂1 : Sub Œ£ Œ£1) pc a1 s1, inconsistent pc -> p Œ£1 Œ∂1 pc a1 s1.

      Definition stateprop_impl {Œì A Œ£} (P Q : StateProperty Œì A Œ£) : Prop :=
        forall Œ£1 (Œ∂ : Sub Œ£ Œ£1) (pc : PathCondition Œ£1) (a : A Œ£1) (s : SymbolicState Œì Œ£1),
          P Œ£1 Œ∂ pc a s -> Q Œ£1 Œ∂ pc a s.

      Definition stateprop_specialize {Œì A Œ£1 Œ£2} (Œ∂ : Sub Œ£1 Œ£2) (p: StateProperty Œì A Œ£1) :
        StateProperty Œì A Œ£2 := fun Œ£3 Œ∂3 => p Œ£3 (sub_comp Œ∂ Œ∂3).

      Definition stateprop_lift {Œì AT A Œ£} {instA : Inst AT A} (Œπ : SymInstance Œ£) (POST : A -> SCState Œì -> Prop) :
        StateProperty Œì AT Œ£ :=
        fun Œ£1 Œ∂1 pc1 v1 s1 =>
          forall Œπ1,
            syminstance_rel Œ∂1 Œπ Œπ1 ->
            (inst Œπ1 pc1 : Prop) ->
            POST (inst Œπ1 v1) (inst Œπ1 s1).

      Lemma stateprop_lift_dcl {Œì AT A Œ£1} `{Inst AT A} (Œπ1 : SymInstance Œ£1) (POST : A -> SCState Œì -> Prop) :
        stateprop_downwards_closed (stateprop_lift Œπ1 POST).
      Proof.
        unfold stateprop_downwards_closed, stateprop_lift.
        intros Œ£2 Œ∂2 pc2 a2 s2 Œ£3 Œ∂3 pc3 a3 s3.
        intros [Œ∂23 Hgeq]%dmutres_geq_low_equiv Hpost.
        intros Œπ3 rel13 Hpc3. pose (inst Œπ3 Œ∂23) as Œπ2.
        specialize (Hgeq Œπ2 Œπ3 eq_refl Hpc3).
        specialize (Hpost Œπ2). unfold syminstance_rel in *. subst.
        intuition.
      Qed.

      Lemma stateprop_lift_vac {Œì AT A Œ£1} `{Inst AT A} (Œπ1 : SymInstance Œ£1) (POST : A -> SCState Œì -> Prop) :
        stateprop_vacuous (stateprop_lift Œπ1 POST).
      Proof. unfold stateprop_vacuous, stateprop_lift. intuition. Qed.

    End StateProp.

    Section ResultProp.

      Definition ResultProperty Œì A Œ£ :=
        DynamicMutatorResult Œì A Œ£ -> Prop.

      Definition resultprop_specialize {Œì A Œ£1 Œ£2} (Œ∂ : Sub Œ£1 Œ£2) :
        ResultProperty Œì A Œ£1 -> ResultProperty Œì A Œ£2 :=
        fun p r => p (cosubst_dmutres Œ∂ r).

      Definition resultprop_downwards_closed {Œì AT Œ£ A} `{Inst AT A} (p : ResultProperty Œì AT Œ£) : Prop :=
        forall (r1 r2 : DynamicMutatorResult Œì AT Œ£),
          dmutres_geq r1 r2 -> p r1 -> p r2.

      Definition resultprop_vacuous {Œì AT Œ£ A} `{Inst AT A} (p : ResultProperty Œì AT Œ£) : Prop :=
        forall r, inconsistent (dmutres_pathcondition r) -> p r.

      Lemma resultprop_specialize_vac {Œì A AV Œ£1 Œ£2} `{Inst A AV} (Œ∂ : Sub Œ£1 Œ£2)
            (P : ResultProperty Œì A Œ£1) (P_vac : resultprop_vacuous P) :
        resultprop_vacuous (resultprop_specialize Œ∂ P).
      Proof.
        intros [Œ£3 Œ∂23 pc3 a3 s3]; unfold resultprop_specialize; cbn.
        intros HYP. apply P_vac; auto.
      Qed.

      Lemma resultprop_specialize_dcl {Œì A AV Œ£1 Œ£2} `{Inst A AV} (Œ∂ : Sub Œ£1 Œ£2)
            (POST : ResultProperty Œì A Œ£1) (POST_dcl : resultprop_downwards_closed POST) :
        resultprop_downwards_closed (resultprop_specialize Œ∂ POST).
      Proof.
        unfold resultprop_downwards_closed, resultprop_specialize.
        intros [Œ£3 Œ∂3 pc3 a3 s3] [Œ£4 Œ∂4 pc4 a4 s4] Hgeq; cbn.
        now apply POST_dcl, dmutres_geq_pre_comp.
      Qed.

      Lemma resultprop_specialize_id {Œì A Œ£} (P : ResultProperty Œì A Œ£) :
        forall r, resultprop_specialize (sub_id _) P r <-> P r.
      Proof.
        intros [Œ£' Œ∂ pc a s]; unfold resultprop_specialize; cbn.
        now rewrite sub_comp_id_left.
      Qed.

      Lemma resultprop_specialize_comp {Œì A Œ£1 Œ£2 Œ£3} (Œ∂12 : Sub Œ£1 Œ£2) (Œ∂23 : Sub Œ£2 Œ£3) (P : ResultProperty Œì A Œ£1) :
        forall r,
          resultprop_specialize (sub_comp Œ∂12 Œ∂23) P r <->
          resultprop_specialize Œ∂23 (resultprop_specialize Œ∂12 P) r.
      Proof.
        intros [Œ£' Œ∂ pc a s]; unfold resultprop_specialize; cbn.
        now rewrite sub_comp_assoc.
      Qed.

      Definition resultprop_specialize_pc {Œì A Œ£1 Œ£2} (Œ∂ : Sub Œ£1 Œ£2) (pc2 : PathCondition Œ£2) :
        ResultProperty Œì A Œ£1 -> ResultProperty Œì A Œ£2 :=
        fun p r => geqpc (dmutres_substitution r) pc2 (dmutres_pathcondition r) /\ p (cosubst_dmutres Œ∂ r).

      Lemma resultprop_specialize_pc_dcl {Œì A AV Œ£1 Œ£2} `{Inst A AV} (Œ∂12 : Sub Œ£1 Œ£2) (pc2 : PathCondition Œ£2)
            (POST : ResultProperty Œì A Œ£1) (POST_dcl : resultprop_downwards_closed POST) :
        resultprop_downwards_closed (resultprop_specialize_pc Œ∂12 pc2 POST).
      Proof.
        unfold resultprop_downwards_closed, resultprop_specialize_pc.
        intros [Œ£3 Œ∂23 pc3 a3 s3] [Œ£4 Œ∂24 pc4 a4 s4]; cbn.
        intros [Œ∂34] [Hpc23 Hpost]; destruct_conjs; cbn.
        split.
        - apply geqpc_trans with Œ∂23 Œ∂34 pc3; auto.
        - revert Hpost. apply POST_dcl. exists Œ∂34.
          repeat split; auto. now apply geq_pre_comp.
      Qed.

      Lemma resultprop_specialize_pc_vac {Œì A AV Œ£1 Œ£2} `{Inst A AV} (Œ∂ : Sub Œ£1 Œ£2) (pc2 : PathCondition Œ£2)
            (P : ResultProperty Œì A Œ£1) (P_vac : resultprop_vacuous P) :
        resultprop_vacuous (resultprop_specialize_pc Œ∂ pc2 P).
      Proof.
      Admitted.

      Definition resultprop_lift {Œì AT A Œ£1} {instA : Inst AT A} (Œπ1 : SymInstance Œ£1) (POST : A -> SCState Œì -> Prop) :
        ResultProperty Œì AT Œ£1 :=
        fun dres =>
          match dres with
          | MkDynMutResult Œ∂2 pc2 a2 s2 =>
            stateprop_lift Œπ1 POST Œ∂2 pc2 a2 s2
          end.

      Definition resultprop_lift_dcl {Œì AT A Œ£1} `{InstLaws AT A} (Œπ1 : SymInstance Œ£1) (POST : A -> SCState Œì -> Prop) :
        resultprop_downwards_closed (resultprop_lift Œπ1 POST).
      Proof.
        unfold resultprop_downwards_closed, resultprop_lift.
        intros [Œ£3 Œ∂3 pc3 a3 s3] [Œ£4 Œ∂4 pc4 a4 s4].
        apply stateprop_lift_dcl.
      Qed.

      Definition resultprop_lift_vac {Œì AT A Œ£1} `{InstLaws AT A} (Œπ1 : SymInstance Œ£1) (POST : A -> SCState Œì -> Prop) :
        resultprop_vacuous (resultprop_lift Œπ1 POST).
      Proof.
        unfold resultprop_vacuous, resultprop_lift, stateprop_lift.
        intros [Œ£2 Œ∂2 pc2 a2 s2] Hpc2; cbn in *. intuition.
      Qed.

    End ResultProp.

    Definition DynamicMutatorArrow Œì1 Œì2 A B Œ£0 : Type :=
      forall Œ£1, Sub Œ£0 Œ£1 -> A Œ£1 -> DynamicMutator Œì1 Œì2 B Œ£1.

    Definition DynamicMutatorArrow' Œì1 Œì2 A B Œ£0 : Type :=
      forall Œ£1,
        Sub Œ£0 Œ£1 -> A Œ£1 -> PathCondition Œ£1 ->
        SymbolicState Œì1 Œ£1 -> Outcome (DynamicMutatorResult Œì2 B Œ£1).

    Definition dmut_bind' {Œì1 Œì2 Œì3 A B Œ£0}
               (ma : DynamicMutator Œì1 Œì2 A Œ£0) (f : DynamicMutatorArrow' Œì2 Œì3 A B Œ£0) : DynamicMutator Œì1 Œì3 B Œ£0 :=
      fun (Œ£1 : LCtx) (Œ∂01 : Sub Œ£0 Œ£1) pc1 (s1 : SymbolicState Œì1 Œ£1) =>
        outcome_bind (ma Œ£1 Œ∂01 pc1 s1) (fun r : DynamicMutatorResult Œì2 A Œ£1 =>
        outcome_bind (f (dmutres_context r) (sub_comp Œ∂01 (dmutres_substitution r)) (dmutres_result_value r) (dmutres_pathcondition r) (dmutres_result_state r))
                     (fun r2 : DynamicMutatorResult Œì3 B (dmutres_context r) => outcome_pure (cosubst_dmutres (dmutres_substitution r) r2))).

    Section Vacuous.

      Definition outcome_vac `{Inst AT A} {Œì Œ£} (pc : PathCondition Œ£) (o : Outcome (DynamicMutatorResult Œì AT Œ£)) : Prop :=
        forall (P : ResultProperty Œì AT Œ£) (P_vac : resultprop_vacuous P),
          inconsistent pc -> outcome_satisfy o P.
      Local Hint Unfold outcome_satisfy : core.
      Local Hint Unfold outcome_vac : core.

      Definition dmut_vac `{Inst AT A} {Œì1 Œì2 Œ£0} (d : DynamicMutator Œì1 Œì2 AT Œ£0) : Prop :=
        forall Œ£1 (Œ∂01 : Sub Œ£0 Œ£1) pc1 s1, outcome_vac pc1 (d Œ£1 Œ∂01 pc1 s1).
      Local Hint Unfold dmut_vac : core.

      (* TODO: It would be great to reformulate this to use the above. *)
      Definition dmut_arrow_vac `{Inst AT A, Inst BT B} {Œì1 Œì2 Œ£0}
        (f : DynamicMutatorArrow Œì1 Œì2 AT BT Œ£0) : Prop :=
        forall Œ£1 (Œ∂01 : Sub Œ£0 Œ£1) pc1 (a1 : AT Œ£1) s1,
          outcome_vac pc1 (f Œ£1 Œ∂01 a1 Œ£1 (sub_id _) pc1 s1).
      Local Hint Unfold dmut_arrow_vac : core.

      Definition dmut_arrow_vac' `{Inst AT A, Inst BT B} {Œì1 Œì2 Œ£0}
        (f : DynamicMutatorArrow' Œì1 Œì2 AT BT Œ£0) : Prop :=
        forall Œ£1 (Œ∂01 : Sub Œ£0 Œ£1) pc1 (a1 : AT Œ£1) s1,
          outcome_vac pc1 (f Œ£1 Œ∂01 a1 pc1 s1).
      Local Hint Unfold dmut_arrow_vac' : core.

      Lemma dmut_pure_vac `{Subst AT, Inst AT A} {Œì Œ£} (a : AT Œ£) :
        dmut_vac (dmut_pure (Œì := Œì) a).
      Proof. unfold dmut_pure; auto. Qed.
      Local Hint Resolve dmut_pure_vac : core.

      Lemma dmut_block_vac `{Inst AT A} {Œì1 Œì2 Œ£} :
        dmut_vac (@dmut_block Œì1 Œì2 AT Œ£).
      Proof. unfold dmut_block; auto. Qed.
      Local Hint Resolve dmut_block_vac : core.

      Lemma dmut_contradiction_vac `{Inst AT A} {D Œì1 Œì2 Œ£} func msg data :
        dmut_vac (@dmut_contradiction Œì1 Œì2 AT Œ£ D func msg data).
      Proof. unfold dmut_contradiction; auto. Qed.
      Local Hint Resolve dmut_contradiction_vac : core.

      Lemma dmut_fail_vac `{Inst AT A} {D Œì1 Œì2 Œ£} func msg data :
        dmut_vac (@dmut_fail Œì1 Œì2 AT Œ£ D func msg data).
      Proof.
        unfold dmut_fail, dmut_vac, outcome_vac; cbn.
        unfold inconsistent, Error. intros.
        (* UH OH *)
      Admitted.
      Local Hint Resolve dmut_fail_vac : core.

      Lemma dmut_bind_vac' `{Inst AT A, Inst BT B} {Œì1 Œì2 Œì3 Œ£0}
        (d : DynamicMutator Œì1 Œì2 AT Œ£0) (vac_d : dmut_vac d)
        (f : DynamicMutatorArrow' Œì2 Œì3 AT BT Œ£0) (vac_f : dmut_arrow_vac' f) :
        dmut_vac (dmut_bind' d f).
      Proof. (* LESS IMPORTANT *) Admitted.
      Local Hint Resolve dmut_bind_vac' : core.

      Lemma dmut_bind_vac `{Inst AT A, Inst BT B} {Œì1 Œì2 Œì3 Œ£0}
        (d : DynamicMutator Œì1 Œì2 AT Œ£0) (vac_d : dmut_vac d)
        (f : DynamicMutatorArrow Œì2 Œì3 AT BT Œ£0) (vac_f : dmut_arrow_vac f) :
        dmut_vac (dmut_bind d f).
      Proof. (* MORE IMPORTANT *) Admitted.
      Local Hint Resolve dmut_bind_vac : core.

      Lemma dmut_sub_vac `{Inst AT A} {Œì1 Œì2 Œ£0} (d : DynamicMutator Œì1 Œì2 AT Œ£0) (vac_d : dmut_vac d) :
        forall (Œ£1 : LCtx) (Œ∂1 : Sub Œ£0 Œ£1), dmut_vac (dmut_sub Œ∂1 d).
      Proof. unfold dmut_sub; auto. Qed.
      Local Hint Resolve dmut_sub_vac : core.

      Lemma dmut_bind_right_vac `{Inst AT A, Inst BT B} {Œì1 Œì2 Œì3 Œ£0}
        (d1 : DynamicMutator Œì1 Œì2 AT Œ£0) (d2 : DynamicMutator Œì2 Œì3 BT Œ£0) (vac_d1 : dmut_vac d1) (vac_d2 : dmut_vac d2) :
        dmut_vac (dmut_bind_right d1 d2).
      Proof. unfold dmut_bind_right; eauto. Qed.
      Local Hint Resolve dmut_bind_right_vac : core.

      Lemma dmut_demonic_binary_vac `{Inst AT A} {Œì1 Œì2 Œ£0}
        (d1 d2 : DynamicMutator Œì1 Œì2 AT Œ£0) (vac_d1 : dmut_vac d1) (vac_d2 : dmut_vac d2) :
        dmut_vac (dmut_demonic_binary d1 d2).
      Proof. Admitted.
      Local Hint Resolve dmut_demonic_binary_vac : core.

      Lemma dmut_angelic_binary_vac `{Inst AT A} {Œì1 Œì2 Œ£0}
        (d1 d2 : DynamicMutator Œì1 Œì2 AT Œ£0) (vac_d1 : dmut_vac d1) (vac_d2 : dmut_vac d2) :
        dmut_vac (dmut_angelic_binary d1 d2).
      Proof. Admitted.
      Local Hint Resolve dmut_angelic_binary_vac : core.

      Lemma dmut_demonic_finite_vac {AT A} {F : Type} `{Subst AT, Inst AT A, finite.Finite F} {Œì Œ£} (k : F -> DynamicMutator Œì Œì AT Œ£) :
        (forall v, dmut_vac (k v)) ->
        dmut_vac (dmut_demonic_finite F k).
      Proof. Admitted.
      Local Hint Resolve dmut_demonic_finite_vac : core.

      Lemma dmut_assume_formula_vac {Œì Œ£} (f : Formula Œ£) :
        dmut_vac (@dmut_assume_formula Œì Œ£ f).
      Proof. Admitted.
      Local Hint Resolve dmut_assume_formula_vac : core.

      Lemma dmut_produce_chunk_vac {Œì Œ£} (c : Chunk Œ£) :
        dmut_vac (@dmut_produce_chunk Œì Œ£ c).
      Proof. Admitted.
      Local Hint Resolve dmut_produce_chunk_vac : core.

      Lemma dmut_fresh_vac {AT A} `{Inst AT A} {Œì Œ£ œÉ x} (d : DynamicMutator Œì Œì AT (Œ£ ‚ñª (x :: œÉ))) (d_vac : dmut_vac d) :
        dmut_vac (dmut_fresh (x :: œÉ) d).
      Proof. Admitted.
      Local Hint Resolve dmut_fresh_vac : core.

      Lemma dmut_freshtermvar_vac {Œì Œ£ œÉ x} :
        dmut_vac (@dmut_freshtermvar Œì Œ£ œÉ x).
      Proof. unfold dmut_freshtermvar; auto. Qed.
      Local Hint Resolve dmut_freshtermvar_vac : core.

      Local Hint Extern 5 (outcome_vac _ (dmut_bind_right _ _ _ _ _)) =>
        apply dmut_bind_right_vac : core.

      Lemma dmut_produce_vac {Œì Œ£} (asn : Assertion Œ£) :
        dmut_vac (@dmut_produce Œì Œ£ asn).
      Proof.
        induction asn; cbn [dmut_produce]; unfold dmut_assume_term; eauto.
        - destruct (term_get_sum s) as [[]|]; eauto 10.
        - destruct (term_get_pair s) as [[]|]; auto. admit.
        - destruct (term_get_record s); eauto. admit.
        - destruct (term_get_union s) as [[]|]; auto.
      Admitted.

      Lemma dmut_exec_vac {Œì Œ£ œÑ} (s : Stm Œì œÑ) :
        dmut_vac (@dmut_exec Œì œÑ Œ£ s).
      Proof. Admitted.

    End Vacuous.

    Local Notation "[ Œπ ] x == y" := (inst Œπ x = inst Œπ y) (at level 50).

    (* Read: If œÇ is equivalent to t in Œπ, then substituting t for œÇ is equivalent to the identity. *)
    Lemma inst_single_shift {Œ£ œÇ œÉ} (œÇInŒ£ : œÇ :: œÉ ‚àà Œ£) (t : Term (Œ£ - (œÇ :: œÉ)) œÉ) Œπ :
      [ Œπ ] term_var œÇ == subst (sub_shift œÇInŒ£) t ->
      [ Œπ ] sub_comp (sub_single œÇInŒ£ t) (sub_shift œÇInŒ£) == sub_id _.
    Proof.
      intros H.
      apply env_lookup_extensional; cbn.
      intros [] bIn.
      unfold sub_id, sub_comp, subst, SubstEnv, inst; cbn.
      rewrite ?env_lookup_map, ?env_lookup_tabulate.
      pose proof (occurs_check_var_spec œÇInŒ£ bIn).
      destruct (occurs_check_var œÇInŒ£ bIn) eqn:?.
      - dependent elimination e. cbn in H0. subst.
        rewrite lookup_sub_single_eq. symmetry. exact H.
      - f_equal.
        destruct H0. subst bIn.
        rewrite lookup_sub_single_neq.
        cbn. unfold sub_shift.
        rewrite env_lookup_tabulate.
        reflexivity.
    Qed.

    Lemma dmutres_try_assume_eq_geq {Œì Œ£0 œÉ} (pc0 : PathCondition Œ£0) (t1 t2 : Term Œ£0 œÉ) (s0 : SymbolicState Œì Œ£0) :
      OptionSpec
        (fun '(MkDynMutResult Œ∂01 pc1 tt s1) =>
           geqpc Œ∂01 (cons (formula_eq t1 t2) pc0) pc1 /\
           geq Œ∂01 pc1 s0 s1)
        True
        (dmutres_try_assume_eq pc0 t1 t2 s0).
    Proof.
      destruct t1; cbn; try (constructor; auto; fail).
      destruct (occurs_check œÇInŒ£ t2) eqn:?; constructor; auto.
      apply (@occurs_check_sound _ _ (@OccursCheckTerm _)) in Heqo;
        auto with typeclass_instances. subst t2.
      split.
      - intros Œπ0 Œπ1 <- Hpc0. rewrite inst_pathcondition_cons.
        rewrite <- ?inst_subst. split; cbn; auto.
        rewrite lookup_sub_single_eq.
        rewrite <- ?subst_sub_comp.
        rewrite sub_comp_shift_single.
        rewrite subst_sub_id.
        reflexivity.
      - now apply geq_syntactic.
    Qed.

    Lemma dmutres_try_assume_eq_spec {Œì Œ£ œÉ} (pc : PathCondition Œ£) (t1 t2 : Term Œ£ œÉ) (s__sym : SymbolicState Œì Œ£)
      (POST : ResultProperty Œì Unit Œ£) (POST_dcl : resultprop_downwards_closed POST) :
      OptionSpec
        (fun r => POST r <->
                  POST (MkDynMutResult
                          (sub_id Œ£)
                          (cons (formula_eq t1 t2) pc)
                          tt
                          s__sym))
        True
        (dmutres_try_assume_eq pc t1 t2 s__sym).
    Proof.
      destruct t1; cbn; try (constructor; auto; fail).
      destruct (occurs_check œÇInŒ£ t2) eqn:?; constructor; auto.
      apply (@occurs_check_sound _ _ (@OccursCheckTerm _)) in Heqo;
        auto with typeclass_instances. subst t2.
      split.
      - apply POST_dcl. apply dmutres_geq_low_equiv. exists (sub_shift œÇInŒ£).
        intros * <- Hpc. cbn. rewrite inst_pathcondition_cons in Hpc.
        destruct Hpc as [Hfml Hpc]; cbn in Hfml.
        apply inst_single_shift in Hfml.
        rewrite <- ?inst_subst.
        change (subst (sub_shift œÇInŒ£) (sub_single œÇInŒ£ t)) with
            (sub_comp (sub_single œÇInŒ£ t) (sub_shift œÇInŒ£)).
        rewrite <- ?subst_sub_comp.
        rewrite ?inst_subst.
        rewrite Hfml.
        rewrite ?inst_sub_id.
        auto.
      - apply POST_dcl. apply dmutres_geq_low_equiv. exists (sub_single œÇInŒ£ t).
        intros * <- Hpc. rewrite inst_pathcondition_cons.
        rewrite inst_sub_id.
        rewrite <- ?inst_subst. cbn.
        rewrite <- subst_sub_comp.
        rewrite lookup_sub_single_eq.
        rewrite sub_comp_shift_single, subst_sub_id.
        auto.
    Qed.

    (* This should subsume the two lemmas above *)
    Lemma dmutres_try_assume_eq_spec_v2 {Œì Œ£0 œÉ} (pc0 : PathCondition Œ£0) (t1 t2 : Term Œ£0 œÉ) (s0 : SymbolicState Œì Œ£0) :
      OptionSpec
        (dmutres_equiv (MkDynMutResult (sub_id _) (cons (formula_eq t1 t2) pc0) tt s0))
        True
        (dmutres_try_assume_eq pc0 t1 t2 s0).
    Proof.
    Admitted.

    Lemma dmutres_assume_formula_spec {Œì Œ£} (pc : PathCondition Œ£) (fml : Formula Œ£) (s__sym : SymbolicState Œì Œ£)
      (POST : ResultProperty Œì Unit Œ£) (POST_dcl : resultprop_downwards_closed POST) :
      POST (dmutres_assume_formula pc fml s__sym) <->
      POST (MkDynMutResult
              (sub_id Œ£)
              (cons fml pc)
              tt
              s__sym).
    Proof.
      destruct fml; cbn; auto.
      destruct (dmutres_try_assume_eq_spec pc t1 t2 s__sym POST_dcl); auto. clear H.
      destruct (dmutres_try_assume_eq_spec pc t2 t1 s__sym POST_dcl); auto.
      rewrite H.
      split; apply POST_dcl, dmutres_geq_low_equiv; exists (sub_id _); intros ? ? <-;
          rewrite ?inst_pathcondition_cons, ?inst_sub_id; intuition.
    Qed.

    Lemma dmutres_assume_formula_geq {Œì Œ£0} (pc0 : PathCondition Œ£0) (fml0 : Formula Œ£0) (s0 : SymbolicState Œì Œ£0) :
      match dmutres_assume_formula pc0 fml0 s0 with
      | MkDynMutResult Œ∂01 pc1 tt s1 =>
        geqpc Œ∂01 (cons fml0 pc0) pc1 /\
        geq Œ∂01 pc1 s0 s1
      end.
    Proof.
      destruct fml0; cbn; try (split; [ apply geqpc_refl | apply geq_refl ]).
      destruct (dmutres_try_assume_eq_geq pc0 t1 t2 s0); cbn.
      { destruct a as [Œ£1 Œ∂01 pc1 [] s1]; cbn; destruct_conjs; auto. }
      clear H.
      destruct (dmutres_try_assume_eq_geq pc0 t2 t1 s0); cbn.
      { destruct a as [Œ£1 Œ∂01 pc1 [] s1]; cbn.
        destruct H as [Hpc01 Hs]. split; auto.
        intros ? ? rel Hpc1. specialize (Hpc01 _ _ rel Hpc1).
        rewrite inst_pathcondition_cons in *. cbn in *.
        intuition.
      }
      clear H. split.
      - intros ? ? <-.
        rewrite inst_sub_id. rewrite ?inst_pathcondition_cons.
        cbn. intuition.
      - apply geq_refl.
    Qed.

    (* Subsumes the two above. *)
    Lemma dmutres_assume_formula_spec_v2 {Œì Œ£0} (pc0 : PathCondition Œ£0) (fml0 : Formula Œ£0) (s0 : SymbolicState Œì Œ£0) :
      dmutres_equiv (dmutres_assume_formula pc0 fml0 s0) (MkDynMutResult (sub_id _) (cons fml0 pc0) tt s0).
    Proof.
    Admitted.

    (* These should be kept abstract in the rest of the proof. If you need some
       property, add a lemma above. *)
    Local Opaque dmutres_try_assume_eq.
    Local Opaque dmutres_assume_formula.

    Section DownwardsClosure.

      Definition dmut_dcl {Œì1 Œì2 AT Œ£0 A} `{Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) : Prop :=
        forall Œ£1 Œ£2 (Œ∂01 : Sub Œ£0 Œ£1) pc1 (s1 : SymbolicState Œì1 Œ£1) (Œ∂12 : Sub Œ£1 Œ£2) pc2 s2 Œ∂02,
          geqpc Œ∂12 pc1 pc2 ->
          geq Œ∂12 pc2 s1 s2 ->
          geq Œ∂12 pc2 Œ∂01 Œ∂02 ->
          forall (P : ResultProperty Œì2 AT Œ£1) (P_dcl : resultprop_downwards_closed P) (P_vac : resultprop_vacuous P)
                 (Q : ResultProperty Œì2 AT Œ£2) (PQ : forall r, resultprop_specialize_pc Œ∂12 pc2 P r -> Q r),
            outcome_satisfy (d Œ£1 Œ∂01 pc1 s1) P ->
            outcome_satisfy (d Œ£2 Œ∂02 pc2 s2) Q.

      Definition dmut_dcl' {Œì1 Œì2 AT Œ£0 A} `{Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) : Prop :=
        forall Œ£1 Œ£2 (Œ∂01 : Sub Œ£0 Œ£1) pc1 (s1 : SymbolicState Œì1 Œ£1) (Œ∂12 : Sub Œ£1 Œ£2) pc2 s2 Œ∂02,
          geqpc Œ∂12 pc1 pc2 ->
          geq Œ∂12 pc2 s1 s2 ->
          geq Œ∂12 pc2 Œ∂01 Œ∂02 ->
          forall (P : ResultProperty Œì2 AT Œ£1) (P_dcl : resultprop_downwards_closed P) (P_vac : resultprop_vacuous P),
            outcome_satisfy (d Œ£1 Œ∂01 pc1 s1) P ->
            outcome_satisfy (d Œ£2 Œ∂02 pc2 s2) (resultprop_specialize_pc Œ∂12 pc2 P).

      Lemma dmut_dcl_dcl' {Œì1 Œì2 AT Œ£0 A} `{Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) :
        dmut_dcl d <-> dmut_dcl' d.
      Proof.
        split.
        - unfold dmut_dcl, dmut_dcl'.
          intros d_dcl * Hpc12 Hs12 HŒ∂12 P P_dcl P_vac.
          eapply d_dcl; eauto.
        - unfold dmut_dcl, dmut_dcl'.
          intros d_dcl * Hpc12 Hs12 HŒ∂12 P P_dcl P_vac Q PQ.
          intros HP. eapply d_dcl in HP; eauto. revert HP.
          apply outcome_satisfy_monotonic. intros r. apply PQ.
      Qed.

      Lemma dmut_pure_dcl {Œì AT Œ£ A} {subA: Subst AT} {sublAT: SubstLaws AT}
            {instA : Inst AT A} {instlA : InstLaws AT A} (a : AT Œ£) :
        dmut_dcl (dmut_pure (Œì := Œì) a).
      Proof.
        apply dmut_dcl_dcl'. unfold dmut_dcl', dmut_pure; cbn.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl P_vac HP.
        split. cbn. apply geqpc_refl. revert HP.
        apply P_dcl.
        exists Œ∂12. repeat split; auto.
        - apply geq_syntactic. change (subst Œ∂12 ?Œ∂) with (sub_comp Œ∂ Œ∂12).
          now rewrite sub_comp_id_right, sub_comp_id_left.
        - revert HŒ∂12.
          unfold geq. intros HYP Œπ1 Œπ2 rel12 Hpc2.
          specialize (HYP Œπ1 Œπ2 rel12 Hpc2) .
          rewrite ?inst_subst. congruence.
      Qed.

      Lemma dmut_fail_dcl `{Inst AT A} {D Œì1 Œì2 Œ£} func msg data :
        dmut_dcl (@dmut_fail Œì1 Œì2 AT Œ£ D func msg data).
      Proof. apply dmut_dcl_dcl'. unfold dmut_dcl', dmut_fail; cbn. intuition. Qed.

      Definition dmut_arrow_dcl' {Œì1 Œì2 AT A BT B Œ£0} `{Inst AT A, Inst BT B}
        (f : DynamicMutatorArrow' Œì1 Œì2 AT BT Œ£0) : Prop :=
        forall Œ£1 Œ£2 (Œ∂01 : Sub Œ£0 Œ£1) (Œ∂02 : Sub Œ£0 Œ£2) (Œ∂12 : Sub Œ£1 Œ£2) pc1 pc2 (a1 : AT Œ£1) (a2 : AT Œ£2) s1 s2,
          geqpc Œ∂12 pc1 pc2 ->
          geq Œ∂12 pc2 s1 s2 ->
          geq Œ∂12 pc2 Œ∂01 Œ∂02 ->
          forall (P : ResultProperty Œì2 BT Œ£1) (P_dcl : resultprop_downwards_closed P) (P_vac : resultprop_vacuous P)
            (Q : ResultProperty Œì2 BT Œ£2) (PQ : forall r, resultprop_specialize_pc Œ∂12 pc2 P r -> Q r),
            outcome_satisfy (f Œ£1 Œ∂01 a1 pc1 s1) P ->
            outcome_satisfy (f Œ£2 Œ∂02 a2 pc2 s2) Q.

      Lemma dmut_bind_dcl' {AT A BT B} {substB : Subst BT} {instB : Inst BT B} {instA : Inst AT A}
            {subA : Subst AT} {subLA : SubstLaws AT} {instLA : InstLaws AT A}
            {Œì1 Œì2 Œì3 Œ£0} (d : DynamicMutator Œì1 Œì2 AT Œ£0) (d_dcl : dmut_dcl d)
            (f : DynamicMutatorArrow' Œì2 Œì3 AT BT Œ£0)
            (f_dcl : dmut_arrow_dcl' f)
            (f_vac : dmut_arrow_vac' f) :
        dmut_dcl (dmut_bind' d f).
      Proof.
        apply dmut_dcl_dcl'. unfold dmut_dcl', dmut_bind'.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl P_vac.
        rewrite ?outcome_satisfy_bind; cbn.
        eapply d_dcl; eauto.
        - clear - f_dcl P P_dcl P_vac.
          unfold resultprop_downwards_closed.
          intros [Œ£2 Œ∂12 pc2 a2 s2] [Œ£3 Œ∂13 pc3 a3 s3] [Œ∂23 (Hpc23 & HŒ∂23 & ?)]; cbn in *.
          rewrite ?outcome_satisfy_bind; cbn.
          destruct_conjs. eapply f_dcl; eauto using geq_pre_comp.
          now apply resultprop_specialize_dcl.
          now apply resultprop_specialize_vac.
          intros [Œ£4 Œ∂34 pc4 b4 s4]; unfold resultprop_specialize_pc; cbn.
          intros [Hpc34 HP]; revert HP. apply P_dcl.
          exists (sub_id _).
          repeat split; try apply geq_refl.
          apply geqpc_refl. rewrite <- sub_comp_assoc.
          clear - HŒ∂23 Hpc34. intros ? Œπ4 <-. rewrite inst_sub_id.
          pose (inst Œπ4 Œ∂34) as Œπ3.
          pose (inst Œπ3 Œ∂23) as Œπ2.
          specialize (HŒ∂23 Œπ2 Œπ3 eq_refl).
          specialize (Hpc34 Œπ3 Œπ4 eq_refl).
          unfold sub_comp; rewrite ?inst_subst.
          intuition.
        - intros [Œ£3 Œ∂23 pc3 a3 s3]; cbn.
          rewrite outcome_satisfy_bind; cbn.
          now apply f_vac, resultprop_specialize_vac.
        - intros [Œ£3 Œ∂23 pc3 a3 s3]; unfold resultprop_specialize_pc; cbn.
          rewrite ?outcome_satisfy_bind; cbn.
          intros [Hpc23 Hpost]; revert Hpost.
          eapply f_dcl; try apply geq_refl.
          + apply geqpc_refl.
          + clear - HŒ∂12 Hpc23.
            intros ? Œπ3 <- Hpc3.
            rewrite inst_sub_id.
            pose (inst Œπ3 Œ∂23) as Œπ2.
            pose (inst Œπ2 Œ∂12) as Œπ1.
            specialize (Hpc23 Œπ2 Œπ3 eq_refl).
            specialize (HŒ∂12 Œπ1 Œπ2 eq_refl).
            unfold sub_comp. rewrite ?inst_subst.
            intuition.
          + now apply resultprop_specialize_dcl.
          + now apply resultprop_specialize_vac.
          + intros [Œ£4 Œ∂34 pc4 b4 s4]; unfold resultprop_specialize_pc; cbn.
            intros [Hpc34 Hpost]. rewrite sub_comp_id_left, sub_comp_assoc in Hpost.
            split; cbn; auto. apply geqpc_trans with Œ∂23 Œ∂34 pc3; auto.
            now apply geq_syntactic.
      Qed.

      Definition dmut_arrow_dcl {Œì1 Œì2 AT A BT B Œ£0} `{Inst AT A, Inst BT B}
                 (f : DynamicMutatorArrow Œì1 Œì2 AT BT Œ£0) : Prop :=
        forall Œ£1 Œ£2 (Œ∂01 : Sub Œ£0 Œ£1) (Œ∂02 : Sub Œ£0 Œ£2) (Œ∂12 : Sub Œ£1 Œ£2) pc1 pc2 (a1 : AT Œ£1) (a2 : AT Œ£2) s1 s2,
          geqpc Œ∂12 pc1 pc2 ->
          geq Œ∂12 pc2 s1 s2 ->
          geq Œ∂12 pc2 Œ∂01 Œ∂02 ->
          forall (P : ResultProperty Œì2 BT Œ£1) (P_dcl : resultprop_downwards_closed P) (P_vac : resultprop_vacuous P)
            (Q : ResultProperty Œì2 BT Œ£2) (PQ : forall r, resultprop_specialize_pc Œ∂12 pc2 P r -> Q r),
            outcome_satisfy (f Œ£1 Œ∂01 a1 Œ£1 (sub_id _) pc1 s1) P ->
            outcome_satisfy (f Œ£2 Œ∂02 a2 Œ£2 (sub_id _) pc2 s2) Q.

      Lemma dmut_bind_dcl {AT A BT B} {substB : Subst BT} {instB : Inst BT B} {instA : Inst AT A}
            {subA : Subst AT} {subLA : SubstLaws AT} {instLA : InstLaws AT A}
            {Œì1 Œì2 Œì3 Œ£0} (d : DynamicMutator Œì1 Œì2 AT Œ£0) (d_wf : dmut_dcl d)
            (f : DynamicMutatorArrow Œì2 Œì3 AT BT Œ£0)
            (f_dcl : dmut_arrow_dcl f)
            (f_vac : dmut_arrow_vac f) :
        dmut_dcl (dmut_bind d f).
      Proof.
        apply dmut_dcl_dcl'. unfold dmut_dcl', dmut_bind.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl P_vac.
        rewrite ?outcome_satisfy_bind; cbn.
        eapply d_wf; eauto.
        - clear - f_dcl f_vac P P_dcl P_vac.
          unfold resultprop_downwards_closed.
          intros [Œ£2 Œ∂12 pc2 a2 s2] [Œ£3 Œ∂13 pc3 a3 s3] [Œ∂23 (Hpc23 & HŒ∂23 & ?)]; cbn in *.
          rewrite ?outcome_satisfy_bind; cbn.
          destruct_conjs. eapply f_dcl; eauto using geq_pre_comp.
          + unfold resultprop_downwards_closed.
            intros [] [] Hgeq; cbn - [dmutres_geq].
            apply P_dcl. revert Hgeq. apply dmutres_geq_pre_comp.
          + unfold resultprop_vacuous.
            intros [] Hpc; cbn in *. now apply P_vac.
          + intros [Œ£4 Œ∂34 pc4 b4 s4]; unfold resultprop_specialize_pc; cbn.
            intros [Hpc34 HP]; revert HP. apply P_dcl.
            exists (sub_id _).
            repeat split; try apply geq_refl.
            apply geqpc_refl.
            clear - HŒ∂23 Hpc34.
            intros ? Œπ4 <-. rewrite inst_sub_id.
            pose (inst Œπ4 Œ∂34) as Œπ3.
            pose (inst Œπ3 Œ∂23) as Œπ2.
            specialize (HŒ∂23 Œπ2 Œπ3 eq_refl).
            specialize (Hpc34 Œπ3 Œπ4 eq_refl).
            unfold sub_comp; rewrite ?inst_subst.
            intuition.
        - intros [Œ£3 Œ∂23 pc3 a3 s3]; cbn.
          rewrite outcome_satisfy_bind; cbn.
          apply f_vac.
          intros [Œ£4 Œ∂34 pc4 a4 s4]; cbn.
          intros.
          now apply P_vac.
        - intros [Œ£3 Œ∂23 pc3 a3 s3]; unfold resultprop_specialize_pc; cbn.
          rewrite ?outcome_satisfy_bind; cbn.
          intros [Hpc23 Hpost]; revert Hpost.
          eapply f_dcl; try apply geq_refl.
          + apply geqpc_refl.
          + clear - HŒ∂12 Hpc23. intros ? Œπ3 <- Hpc3.
            rewrite inst_sub_id.
            pose (inst Œπ3 Œ∂23) as Œπ2.
            pose (inst Œπ2 Œ∂12) as Œπ1.
            specialize (Hpc23 Œπ2 Œπ3 eq_refl).
            specialize (HŒ∂12 Œπ1 Œπ2 eq_refl).
            unfold sub_comp. rewrite ?inst_subst.
            intuition.
          + unfold resultprop_downwards_closed.
            intros [] [] Hgeq; cbn - [dmutres_geq].
            apply P_dcl. revert Hgeq. apply dmutres_geq_pre_comp.
          + unfold resultprop_vacuous.
            intros [] Hpc; cbn in *. now apply P_vac.
          + intros [Œ£4 Œ∂34 pc4 b4 s4]; unfold resultprop_specialize_pc; cbn.
            intros [Hpc34 Hpost]. split.
            apply geqpc_trans with Œ∂23 Œ∂34 pc3; auto. now apply geq_syntactic.
            now rewrite sub_comp_id_left, sub_comp_assoc in Hpost.
      Qed.

      Lemma dmut_sub_dcl {Œì1 Œì2 AT A Œ£0} {instA : Inst AT A} (d : DynamicMutator Œì1 Œì2 AT Œ£0) (d_dcl : dmut_dcl d) :
        forall (Œ£1 : LCtx) (Œ∂1 : Sub Œ£0 Œ£1), dmut_dcl (dmut_sub Œ∂1 d).
      Proof.
        unfold dmut_dcl, dmut_sub.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl Q PQ.
        eapply d_dcl; eauto. now apply geq_pre_comp.
      Qed.

      Lemma dmut_bind_right_dcl `{InstLaws AT A, InstLaws BT B} {Œì1 Œì2 Œì3 Œ£0}
        (d1 : DynamicMutator Œì1 Œì2 AT Œ£0) (d2 : DynamicMutator Œì2 Œì3 BT Œ£0)
        (d1_dcl : dmut_dcl d1) (d2_dcl : dmut_dcl d2) (d2_vac : dmut_vac d2) :
        dmut_dcl (dmut_bind_right d1 d2).
      Proof.
        unfold dmut_bind_right.
        apply dmut_bind_dcl; auto.
        - unfold dmut_arrow_dcl.
          intros until Q. intros PQ.
          unfold dmut_sub; cbn.
          rewrite ?sub_comp_id_right.
          eapply d2_dcl; eauto.
        - unfold dmut_arrow_vac.
          intros.
          now apply dmut_sub_vac.
      Qed.

      Lemma dmut_demonic_binary_dcl {Œì1 Œì2 AT A Œ£0} `{Inst AT A} (d1 d2 : DynamicMutator Œì1 Œì2 AT Œ£0) (d_wf1 : dmut_dcl d1) (d_wf2 : dmut_dcl d2) :
        dmut_dcl (dmut_demonic_binary d1 d2).
      Proof.
        unfold dmut_dcl, dmut_demonic_binary; cbn.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl P_vac Q PQ [H1 H2].
        split.
        - revert PQ H1. apply d_wf1; auto.
        - revert PQ H2. apply d_wf2; auto.
      Qed.

      Lemma dmut_angelic_binary_dcl {Œì1 Œì2 AT A Œ£0} `{Inst AT A} (d1 d2 : DynamicMutator Œì1 Œì2 AT Œ£0) (d1_dcl : dmut_dcl d1) (d2_dcl : dmut_dcl d2) :
        dmut_dcl (dmut_angelic_binary d1 d2).
      Proof.
        unfold dmut_dcl, dmut_angelic_binary. cbn.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl P_vac Q PQ [H1|H1].
        - left. revert PQ H1. apply d1_dcl; auto.
        - right. revert PQ H1. apply d2_dcl; auto.
      Qed.

      Lemma dmut_assume_formula_dcl {Œì Œ£} (f : Formula Œ£) :
        dmut_dcl (@dmut_assume_formula Œì Œ£ f).
      Proof.
        apply dmut_dcl_dcl'. unfold dmut_assume_formula, dmut_dcl'.
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl P_vac H.
        remember (dmutres_assume_formula pc2 (subst Œ∂02 f) s2) as r.
        destruct (try_solve_formula_spec (subst Œ∂01 f));
        destruct (try_solve_formula_spec (subst Œ∂02 f)); cbn in *.
        - clear r Heqr. destruct a, a0; cbn in *; auto.
          + split; cbn. apply geqpc_refl.
            revert H. apply P_dcl.
            exists Œ∂12. rewrite sub_comp_id_right.
            repeat split; auto. intros ? ? <-; now rewrite inst_sub_id.
          + apply resultprop_specialize_pc_vac; cbn; auto.
            intros Œπ Hpc2. specialize (HŒ∂12 _ Œπ eq_refl Hpc2).
            specialize (H0 (inst Œπ Œ∂12)). specialize (H1 Œπ).
            rewrite inst_subst in H0. rewrite inst_subst in H1.
            rewrite HŒ∂12 in H0. clear - H0 H1. intuition.
        - clear H1. destruct a; cbn in *; auto.
          + subst r. pose proof (dmutres_assume_formula_geq pc2 (subst Œ∂02 f) s2) as Hgeq.
            destruct (dmutres_assume_formula pc2 (subst Œ∂02 f) s2) as [Œ£3 Œ∂23 pc3 [] s3]; cbn in *.
            destruct Hgeq as [Hpc23 Hs23].
            split; cbn.
            * intros Œπ2 Œπ3 rel23 Hpc3. specialize (Hpc23 Œπ2 Œπ3 rel23 Hpc3).
              rewrite inst_pathcondition_cons in Hpc23. now destruct Hpc23.
            * revert H. apply P_dcl. apply dmutres_geq_low_equiv. exists (sub_comp Œ∂12 Œ∂23).
              intros Œπ1 Œπ3 rel13 Hpc3. rewrite inst_sub_id.
              apply syminstance_rel_comp in rel13.
              pose (inst Œπ3 Œ∂23) as Œπ2.
              specialize (Hpc23 Œπ2 Œπ3 eq_refl Hpc3).
              specialize (Hs23 Œπ2 Œπ3 eq_refl Hpc3).
              rewrite inst_pathcondition_cons in Hpc23. destruct Hpc23 as [Hfml Hpc2].
              specialize (Hpc12 Œπ1 Œπ2 rel13 Hpc2).
              specialize (Hs12 Œπ1 Œπ2 rel13 Hpc2).
              specialize (HŒ∂12 Œπ1 Œπ2 rel13 Hpc2).
              unfold sub_comp. rewrite inst_subst.
              cbn. repeat split; auto.
              now transitivity (inst Œπ2 s2).
          + subst r. pose proof (dmutres_assume_formula_geq pc2 (subst Œ∂02 f) s2) as Hgeq.
            destruct (dmutres_assume_formula pc2 (subst Œ∂02 f) s2) as [Œ£3 Œ∂23 pc3 [] s3]; cbn in *.
            destruct Hgeq as [Hpc23 Hs23].
            split; cbn.
            * intros Œπ2 Œπ3 rel23 Hpc3. specialize (Hpc23 Œπ2 Œπ3 rel23 Hpc3).
              rewrite inst_pathcondition_cons in Hpc23. now destruct Hpc23.
            * clear - H0 Hpc23 Hpc12. admit.
        - clear H0 r Heqr. destruct a; cbn; auto. split; cbn.
          apply geqpc_refl. rewrite sub_comp_id_right.
          apply (dmutres_assume_formula_spec pc1 (subst Œ∂01 f) s1) in H; auto.
          revert H. apply P_dcl. apply dmutres_geq_low_equiv.
          exists Œ∂12. intros Œπ1 Œπ2 <- Hpc2.
          rewrite inst_pathcondition_cons, inst_sub_id, ?inst_subst; cbn.
          intuition.
          specialize (HŒ∂12 _ Œπ2 eq_refl Hpc2). rewrite HŒ∂12.
          rewrite <- inst_subst. now apply H1.
        - clear H0 H1. subst r.
          pose proof (dmutres_assume_formula_geq pc2 (subst Œ∂02 f) s2) as Hgeq.
          destruct (dmutres_assume_formula pc2 (subst Œ∂02 f) s2) as [Œ£3 Œ∂23 pc3 [] s3]; cbn in *.
          destruct Hgeq as [Hpc23 Hs23].
          split; cbn.
          * intros Œπ2 Œπ3 rel23 Hpc3. specialize (Hpc23 Œπ2 Œπ3 rel23 Hpc3).
            rewrite inst_pathcondition_cons in Hpc23. now destruct Hpc23.
          * apply (dmutres_assume_formula_spec pc1 (subst Œ∂01 f) s1) in H; auto.
            revert H. apply P_dcl. apply dmutres_geq_low_equiv.
            exists (sub_comp Œ∂12 Œ∂23). intros Œπ1 Œπ3 <- Hpc3.
            rewrite inst_pathcondition_cons, inst_sub_id.
            unfold sub_comp; rewrite ?inst_subst; cbn.
            repeat split; auto.
            admit.
            admit.
            admit.
      Admitted.

      Lemma dmut_produce_chunk_dcl {Œì Œ£} (c : Chunk Œ£) :
        dmut_dcl (@dmut_produce_chunk Œì Œ£ c).
      Proof. Admitted.

      Lemma dmut_fresh_dcl {AT A} `{Inst AT A} {Œì Œ£ œÉ x} (d : DynamicMutator Œì Œì AT (Œ£ ‚ñª (x :: œÉ))) (d_dcl : dmut_dcl d) :
        dmut_dcl (dmut_fresh (x :: œÉ) d).
      Proof. Admitted.

      Lemma dmut_freshtermvar_dcl {Œì Œ£ œÉ x} :
        dmut_dcl (@dmut_freshtermvar Œì Œ£ œÉ x).
      Proof.
        apply dmut_dcl_dcl'. unfold dmut_dcl', dmut_freshtermvar; cbn - [dmut_fresh].
        intros * Hpc12 Hs12 HŒ∂12 P P_dcl P_vac.
        eapply dmut_fresh_dcl; eauto.
        apply dmut_pure_dcl.
      Qed.

      Lemma dmut_produce_dcl {Œì Œ£} (asn : Assertion Œ£) :
        dmut_dcl (@dmut_produce Œì Œ£ asn).
      Proof.
        induction asn; cbn [dmut_produce]; unfold dmut_assume_term.
        - apply dmut_assume_formula_dcl.
        - apply dmut_produce_chunk_dcl.
        - apply dmut_demonic_binary_dcl.
          apply dmut_bind_right_dcl;
            auto using dmut_assume_formula_dcl, dmut_produce_vac.
          apply dmut_bind_right_dcl;
            auto using dmut_assume_formula_dcl, dmut_produce_vac.
        - admit.
        - admit.
        - apply dmut_fail_dcl.
        - admit.
        - apply dmut_fail_dcl.
        - admit.
        - admit.
        - apply dmut_bind_right_dcl; auto using dmut_produce_vac.
        - now apply dmut_fresh_dcl.
      Admitted.

      Lemma dmut_exec_dcl {Œì Œ£ œÑ} (s : Stm Œì œÑ) :
        dmut_vac (@dmut_exec Œì œÑ Œ£ s).
      Proof. Admitted.

    End DownwardsClosure.

    Definition scmut_wp {Œì1 Œì2 A}
      (m : SCMut Œì1 Œì2 A)
      (POST : A -> SCState Œì2 -> Prop)
      (s1 : SCState Œì1) : Prop :=
      outcome_satisfy (m s1) (fun r => POST (scmutres_value r) (scmutres_state r)).

    Lemma scmut_wp_bind {Œì1 Œì2 Œì3 A B} (ma : SCMut Œì1 Œì2 A) (f : A -> SCMut Œì2 Œì3 B)
          (POST : B -> SCState Œì3 -> Prop) :
      forall s1 : SCState Œì1,
        scmut_wp (scmut_bind ma f) POST s1 <->
        scmut_wp ma (fun a => scmut_wp (f a) POST) s1.
    Proof.
      unfold SCMut, scmut_bind, scmut_wp in *; cbn; intros.
      now rewrite outcome_satisfy_bind.
    Qed.

    Definition dmut_wp {Œì1 Œì2 Œ£0 A}
      (m : DynamicMutator Œì1 Œì2 A Œ£0)
      (POST : StateProperty Œì2 A Œ£0)
      (pc0 : PathCondition Œ£0)
      (s1 : SymbolicState Œì1 Œ£0) : Prop :=
      forall Œ£1 (Œ∂1 : Sub Œ£0 Œ£1),
        outcome_satisfy
          (* SK: There is still some wiggle room here. We can generalize to
             oathconditions in Œ£1 that are stronger than pc0. *)
          (m Œ£1 Œ∂1 (subst Œ∂1 pc0) (subst Œ∂1 s1))
          (fun '(MkDynMutResult Œ∂2 pc2 a2 s2) =>
             POST _ (sub_comp Œ∂1 Œ∂2) pc2 a2 s2).

    Lemma dmut_wp_monotonic {Œì1 Œì2 Œ£0 A} (m : DynamicMutator Œì1 Œì2 A Œ£0)
          (P Q : StateProperty Œì2 A Œ£0) (HYP : stateprop_impl P Q) :
      forall (pc : PathCondition Œ£0) (s : SymbolicState Œì1 Œ£0),
        dmut_wp m P pc s -> dmut_wp m Q pc s.
    Proof.
      unfold dmut_wp; cbn; intros pc1 s1 H Œ£1 Œ∂1.
      specialize (H Œ£1 Œ∂1). revert H.
      apply outcome_satisfy_monotonic.
      intros [Œ£2 Œ∂2 pc2 a2 s2]; cbn.
      intuition.
    Qed.

    Definition APPROX Œì1 Œì2 AT A {instA : Inst AT A} : Type :=
      forall Œ£ (Œπ : SymInstance Œ£),
        DynamicMutator Œì1 Œì2 AT Œ£ -> SCMut Œì1 Œì2 A -> Prop.
    Arguments APPROX _ _ _ _ {_}.

    Definition box {Œì1 Œì2 AT A} {instA : Inst AT A} (R : APPROX Œì1 Œì2 AT A) : APPROX Œì1 Œì2 AT A :=
      fun Œ£ Œπ dm sm =>
        forall Œ£1 (Œ∂1 : Sub Œ£ Œ£1) (Œπ1 : SymInstance Œ£1),
          syminstance_rel Œ∂1 Œπ Œπ1 ->
          R Œ£1 Œπ1 (dmut_sub Œ∂1 dm) sm.

    Lemma box_proj {Œì1 Œì2 AT A} {instA : Inst AT A} (R : APPROX Œì1 Œì2 AT A) :
      forall Œ£ (Œπ : SymInstance Œ£) dm sm,
        box R Œπ dm sm -> R _ Œπ dm sm.
    Proof.
      intros ? ? ? ? b.
      unfold box in b.
      inster b by apply syminstance_rel_refl.
      unfold dmut_sub in b.
      (* apply b. *)
    Admitted.

    Definition box_box {Œì1 Œì2 AT A} {instA : Inst AT A} (R : APPROX Œì1 Œì2 AT A) :
      forall Œ£ (Œπ : SymInstance Œ£) dm sm,
        box R Œπ dm sm -> box (box R) Œπ dm sm.
    Proof.
      intros ? ? ? ?. unfold box. intros bb Œ£1 Œ∂1 Œπ1 ? Œ£2 Œ∂2 Œπ2 ?.
      specialize (bb Œ£2 (sub_comp Œ∂1 Œ∂2) Œπ2).
      inster bb by eapply syminstance_rel_trans; eauto.
      (* apply bb. *)
    Admitted.

    Definition approximates {Œì1 Œì2 AT A} {instA : Inst AT A} : APPROX Œì1 Œì2 AT A :=
      fun Œ£ Œπ dm sm =>
        forall pc (s__sym : SymbolicState Œì1 Œ£),
        forall (POST : A -> SCState Œì2 -> Prop),
          dmut_wp dm (stateprop_lift Œπ POST) pc s__sym ->
          (inst Œπ pc : Prop) ->
          scmut_wp sm POST (inst Œπ s__sym).

    Lemma approximates_proj {Œì1 Œì2 AT A} {instA : Inst AT A} {Œ£} (Œπ : SymInstance Œ£)
      (dm : DynamicMutator Œì1 Œì2 AT Œ£) (sm : SCMut Œì1 Œì2 A) :
      box approximates Œπ dm sm -> approximates Œπ dm sm.
    Proof.
      unfold approximates, box. intros Happrox * Hdwp Hpc.
      inster Happrox by apply syminstance_rel_refl.
      specialize (Happrox pc). apply Happrox; auto.
      unfold dmut_wp, dmut_sub. intros Œ£1 Œ∂1.
      rewrite sub_comp_id_left. apply Hdwp.
    Qed.

    Lemma approximates_box_box {Œì1 Œì2 AT A} {instA : Inst AT A} {Œ£} (Œπ : SymInstance Œ£)
      (dm : DynamicMutator Œì1 Œì2 AT Œ£) (sm : SCMut Œì1 Œì2 A) :
      box approximates Œπ dm sm -> box (box approximates) Œπ dm sm.
    Proof.
      unfold approximates, box, dmut_wp, dmut_sub. intros.
      inster H by eapply syminstance_rel_trans; eauto.
      specialize (H pc). apply H; auto.
      intros. now rewrite sub_comp_assoc.
    Qed.

    Lemma approximates_sub {Œì Œ£ Œ£1} (Œ∂1 : Sub Œ£ Œ£1) (Œπ : SymInstance Œ£) (Œπ1 : SymInstance Œ£1)
      (relŒπ1 : syminstance_rel Œ∂1 Œπ Œπ1) (d : DynamicMutator Œì Œì Unit Œ£) (s : SCMut Œì Œì unit) :
      box approximates Œπ d s -> box approximates Œπ1 (dmut_sub Œ∂1 d) s.
    Proof. intros H. eapply approximates_box_box; eauto. Qed.

    Lemma approximates_fail `{Inst AT A} {D Œì1 Œì2 Œ£} func msg data Œπ s :
      box approximates Œπ (@dmut_fail Œì1 Œì2 AT Œ£ D func msg data) s.
    Proof. Admitted.

    Lemma approximates_block `{Inst AT A} {Œì1 Œì2 Œ£} (Œπ : SymInstance Œ£) :
      box approximates Œπ (@dmut_block Œì1 Œì2 AT Œ£) (@scmut_block Œì1 Œì2 A).
    Proof. Admitted.

    Lemma scmut_wp_demonic_binary {Œì1 Œì2 A} (sm1 sm2 : SCMut Œì1 Œì2 A) (s__sc : SCState Œì1) (POST : A -> SCState Œì2 -> Prop) :
      scmut_wp (scmut_demonic_binary sm1 sm2) POST s__sc <->
      scmut_wp sm1 POST s__sc /\ scmut_wp sm2 POST s__sc.
    Proof. unfold scmut_wp, scmut_demonic_binary; cbn; intuition. Qed.

    Lemma dmut_wp_demonic_binary {Œì1 Œì2 Œ£ A} (m1 m2 : DynamicMutator Œì1 Œì2 A Œ£)
      (POST : StateProperty Œì2 A Œ£) pc (s : SymbolicState Œì1 Œ£) :
        dmut_wp (dmut_demonic_binary m1 m2) POST pc s <->
        dmut_wp m1 POST pc s /\ dmut_wp m2 POST pc s.
    Proof. unfold dmut_wp, dmut_demonic_binary; cbn; intuition. Qed.

    Lemma dmut_wp_sub_demonic_binary {Œì1 Œì2 Œ£ A Œ£1} (Œ∂1 : Sub Œ£ Œ£1) (m1 m2 : DynamicMutator Œì1 Œì2 A Œ£)
      (POST : StateProperty Œì2 A Œ£1) pc (s : SymbolicState Œì1 Œ£1) :
        dmut_wp (dmut_sub Œ∂1 (dmut_demonic_binary m1 m2)) POST pc s <->
        dmut_wp (dmut_sub Œ∂1 m1) POST pc s /\ dmut_wp (dmut_sub Œ∂1 m2) POST pc s.
    Proof. unfold dmut_wp, dmut_demonic_binary; cbn; intuition. Qed.

    Lemma approximates_demonic_binary {Œì1 Œì2 Œ£} (Œπ : SymInstance Œ£)
          (dm1 dm2 : DynamicMutator Œì1 Œì2 Unit Œ£) (sm1 sm2 : SCMut Œì1 Œì2 unit) :
      box approximates Œπ dm1 sm1 ->
      box approximates Œπ dm2 sm2 ->
      box approximates Œπ (dmut_demonic_binary dm1 dm2) (scmut_demonic_binary sm1 sm2).
    Proof.
      unfold box. intros H1 H2 Œ£1 Œ∂1 Œπ1 H__Œπ.
      specialize (H1 Œ£1 Œ∂1 Œπ1 H__Œπ). specialize (H2 Œ£1 Œ∂1 Œπ1 H__Œπ).
      intros pc s1 POST Hwp Hpc. apply dmut_wp_sub_demonic_binary in Hwp.
      destruct Hwp as [Hwp1 Hwp2].
      specialize (H1 pc s1 POST Hwp1 Hpc). specialize (H2 pc s1 POST Hwp2 Hpc).
      apply scmut_wp_demonic_binary. split; auto.
    Qed.

    Lemma scmut_wp_demonic {Œì1 Œì2 A B} (sm : B -> SCMut Œì1 Œì2 A) (s__sc : SCState Œì1) (POST : A -> SCState Œì2 -> Prop) :
      scmut_wp (scmut_demonic sm) POST s__sc <-> forall v, scmut_wp (sm v) POST s__sc.
    Proof. unfold scmut_wp, scmut_demonic; cbn; intuition. Qed.

    Lemma dmut_wp_demonic {Œì1 Œì2 Œ£ A B} (m : B -> DynamicMutator Œì1 Œì2 A Œ£)
      (POST : StateProperty Œì2 A Œ£) pc (s : SymbolicState Œì1 Œ£) :
        dmut_wp (dmut_demonic m) POST pc s <->
        forall b, dmut_wp (m b) POST pc s.
    Proof. unfold dmut_wp, dmut_demonic; cbn; intuition. Qed.

    Lemma subst_symbolicstate_produce_chunk {Œì Œ£ Œ£1} (Œ∂1 : Sub Œ£ Œ£1) (c : Chunk Œ£) (s : SymbolicState Œì Œ£) :
      subst Œ∂1 (symbolicstate_produce_chunk c s) = symbolicstate_produce_chunk (subst Œ∂1 c) (subst Œ∂1 s).
    Proof. now destruct s. Qed.

    Lemma dmut_wp_produce_chunk {Œì Œ£ Œ£1} (Œ∂1 : Sub Œ£ Œ£1) (c : Chunk _) pc (s__sym : SymbolicState Œì _)
          (POST : StateProperty Œì Unit _) (POST_dcl : stateprop_downwards_closed POST) :
      dmut_wp (dmut_sub Œ∂1 (dmut_produce_chunk c)) POST pc s__sym <->
      POST Œ£1 (sub_id Œ£1) pc tt (symbolicstate_produce_chunk (subst Œ∂1 c) s__sym).
    Proof.
      split.
      - intros dwp.
        specialize (dwp Œ£1 (sub_id Œ£1)). cbn in dwp.
        now rewrite ?sub_comp_id_right, ?subst_sub_id in dwp.
      - intros p Œ£2 Œ∂2. cbn. rewrite subst_sub_comp. revert p.
        apply POST_dcl. apply dmutres_geq_syntactic.
        exists Œ∂2.
        rewrite sub_comp_id_right, sub_comp_id_left.
        now rewrite subst_symbolicstate_produce_chunk.
    Qed.

    Lemma dmut_produce_chunk_sound {Œì Œ£} (Œπ : SymInstance Œ£) (c : Chunk Œ£) :
      box approximates
        (Œì1 := Œì) (Œì2 := Œì) Œπ
        (dmut_produce_chunk c)
        (scmut_produce_chunk (inst Œπ c)).
    Proof.
      intros ? ? ? <- ? ? ? Hwp Hpc. cbn.
      apply dmut_wp_produce_chunk in Hwp.
      - specialize (Hwp Œπ1). inster Hwp by apply syminstance_rel_refl.
        specialize (Hwp Hpc). destruct s__sym as [Œ¥ h]; cbn.
        now rewrite <- inst_subst.
      - apply stateprop_lift_dcl.
    Qed.

    Lemma dmut_wp_sub {Œì1 Œì2 A Œ£0} (d : DynamicMutator Œì1 Œì2 A Œ£0)
          (POST : StateProperty Œì2 A Œ£0) pc (s : SymbolicState Œì1 Œ£0) Œ£1 (Œ∂ : Sub Œ£0 Œ£1) :
        dmut_wp d POST pc s ->
        dmut_wp (dmut_sub Œ∂ d) (stateprop_specialize Œ∂ POST) (subst Œ∂ pc) (subst Œ∂ s).
    Proof.
      unfold dmut_sub, dmut_wp. intros * Hpost *.
      specialize (Hpost Œ£2 (sub_comp Œ∂ Œ∂1)).
      rewrite ?subst_sub_comp in Hpost. revert Hpost.
      apply outcome_satisfy_monotonic. clear. intros [Œ£3 Œ∂3 pc3 a3 s3].
      unfold stateprop_specialize. now rewrite sub_comp_assoc.
    Qed.

    Opaque subst.
    Opaque sub_up1.
    Opaque sub_snoc.
    Opaque wk1.
    Opaque SubstEnv.

    Lemma dmut_wp_bind {AT A BT B} {instA : Inst AT A} {substB : Subst BT} {instB : Inst BT B}
          {Œì1 Œì2 Œì3 Œ£0} (ma : DynamicMutator Œì1 Œì2 AT Œ£0)
          (f : forall Œ£', Sub Œ£0 Œ£' -> AT Œ£' -> DynamicMutator Œì2 Œì3 BT Œ£')
          (f_dcl : dmut_arrow_dcl f)
          (POST : StateProperty Œì3 BT Œ£0) (POST_dcl : stateprop_downwards_closed POST) :
      forall pc (s0 : SymbolicState Œì1 Œ£0),
        dmut_wp (dmut_bind ma f) POST pc s0 <->
        dmut_wp ma (fun Œ£1 Œ∂1 pc1 a1 => dmut_wp (f Œ£1 Œ∂1 a1) (stateprop_specialize Œ∂1 POST) pc1) pc s0.
    Proof.
      (* unfold DynamicMutator, dmut_bind, dmut_wp, dmut_dcl in *; cbn; intros pc0 s0. *)
      (* split; intros H Œ£1 Œ∂1; specialize (H Œ£1 Œ∂1). revert H. *)
      (* - rewrite outcome_satisfy_bind. apply outcome_satisfy_monotonic. *)
      (*   intros [Œ£2 Œ∂2 pc2 a2 s2] H Œ£3 Œ∂3. revert H. *)
      (*   rewrite outcome_satisfy_bind. *)
      (*   eapply f_dcl. *)

      (* OLD: *)
      (*   apply (f_wf Œ£2 (sub_comp Œ∂1 Œ∂2) a2 Œ£2 Œ£3 (sub_id Œ£2) Œ∂3) in H. *)
      (*   + revert H. rewrite sub_comp_id_left. *)
      (*     apply outcome_satisfy_monotonic. *)
      (*     intros [Œ£4 Œ∂4 pc4 b4 s4]. cbn. *)
      (*     now rewrite <- sub_comp_assoc. *)
      (*   + clear f_wf H. *)
      (*     unfold resultprop_downwards_closed. *)
      (*     intros [Œ£4 Œ∂4 pc4 b4 s4] [Œ£5 Œ∂5 pc5 b5 s5]. cbn - [dmutres_geq]. *)
      (*     intros Hgeq. apply POST_dcl. rewrite <- ?sub_comp_assoc. *)
      (*     revert Hgeq. apply dmutres_geq_pre_comp. *)
      (* - rewrite outcome_satisfy_bind. revert H. *)
      (*   apply outcome_satisfy_monotonic. *)
      (*   intros [Œ£2 Œ∂2 pc2 a2 s2] H. specialize (H Œ£2 (sub_id _)). *)
      (*   revert H. rewrite outcome_satisfy_bind, ?subst_sub_id. *)
      (*   apply outcome_satisfy_monotonic. *)
      (*   intros [Œ£3 Œ∂3 pc3 b3 s3]. cbn. *)
      (*   unfold stateprop_specialize. *)
      (*   now rewrite sub_comp_id_left, sub_comp_assoc. *)
    Admitted.

    Lemma dmut_wp_sub_bind {AT A BT B} {instA : Inst AT A} {instB : Inst BT B} {subB: Subst BT}
          {Œì1 Œì2 Œì3 Œ£0 Œ£1} (Œ∂1 : Sub Œ£0 Œ£1)
          (ma : DynamicMutator Œì1 Œì2 AT Œ£0)
          (f : forall Œ£', Sub Œ£0 Œ£' -> AT Œ£' -> DynamicMutator Œì2 Œì3 BT Œ£')
          (f_dcl : dmut_arrow_dcl f)
          (POST : StateProperty Œì3 BT Œ£1) (POST_dcl : stateprop_downwards_closed POST) :
      forall pc1 s1,
        dmut_wp (dmut_sub Œ∂1 (dmut_bind ma f)) POST pc1 s1 <->
        dmut_wp
          (dmut_sub Œ∂1 ma)
          (fun Œ£2 Œ∂2 pc2 a2 => dmut_wp (f Œ£2 (sub_comp Œ∂1 Œ∂2) a2) (stateprop_specialize Œ∂2 POST) pc2)
          pc1 s1.
    Proof.
      (* unfold DynamicMutator, dmut_bind, dmut_sub, dmut_wp, dmut_dcl in *; cbn; intros pc1 s1. *)
      (* split; intros H Œ£2 Œ∂2; specialize (H Œ£2 Œ∂2). revert H. *)
      (* - rewrite outcome_satisfy_bind. apply outcome_satisfy_monotonic. *)
      (*   intros [Œ£3 Œ∂3 pc3 a3 s3] H Œ£4 Œ∂4. revert H. *)
      (*   rewrite outcome_satisfy_bind. *)
      (*   eapply f_dcl. *)

      (* OLD: *)
      (*   apply (f_wf Œ£3 (sub_comp (sub_comp Œ∂1 Œ∂2) Œ∂3) a3 Œ£3 Œ£4 (sub_id Œ£3) Œ∂4) in H. *)
      (*   + revert H. rewrite sub_comp_id_left, sub_comp_assoc. *)
      (*     apply outcome_satisfy_monotonic. *)
      (*     intros [Œ£5 Œ∂5 b5 s5]. cbn. *)
      (*     now rewrite <- sub_comp_assoc. *)
      (*   + revert POST_dcl. clear. intros. *)
      (*     unfold resultprop_downwards_closed. *)
      (*     intros [Œ£4 Œ∂4 b4 s4] [Œ£5 Œ∂5 b5 s5] Hgeq. *)
      (*     cbn. apply POST_dcl. rewrite <- ?sub_comp_assoc. *)
      (*     revert Hgeq. apply dmutres_geq_sem_pre_comp. *)
      (* - rewrite outcome_satisfy_bind. revert H. *)
      (*   apply outcome_satisfy_monotonic. *)
      (*   intros [Œ£3 Œ∂3 a3 s3] H. specialize (H Œ£3 (sub_id _)). *)
      (*   revert H. rewrite outcome_satisfy_bind, subst_sub_id, sub_comp_assoc. *)
      (*   apply outcome_satisfy_monotonic. *)
      (*   intros [Œ£4 Œ∂4 b4 s4]. cbn. *)
      (*   unfold stateprop_specialize. *)
      (*   now rewrite sub_comp_id_left, sub_comp_assoc. *)
    Admitted.


    Lemma inst_snoc_wk1 {Œ£2 x œÑ} {Œπ0 : SymInstance (Œ£2 ‚ñª (x :: œÑ))} {Œπ1} `{Subst AT} {substLawsA : SubstLaws AT} `{Inst AT A} {instLaws : InstLaws AT A} {t : AT Œ£2} {v} :
      syminstance_rel (sub_id Œ£2 ‚ñ∫ (x :: œÑ ‚Ü¶ v)) Œπ0 Œπ1 -> inst Œπ0 (wk1 t) = inst Œπ1 t.
    Proof.
      unfold syminstance_rel.
      intros; subst Œπ0.
      change (wk1 t) with (subst (sub_wk1 (b := x :: œÑ)) t).
      rewrite inst_subst.
      f_equal.
      rewrite <-inst_subst.
      replace (subst (sub_id Œ£2 ‚ñ∫ (x :: œÑ ‚Ü¶ v)) sub_wk1) with (sub_id Œ£2); [now rewrite inst_sub_id|].
      change (subst (sub_id Œ£2 ‚ñ∫ (x :: œÑ ‚Ü¶ v)) sub_wk1) with (sub_comp sub_wk1 (sub_id Œ£2 ‚ñ∫ (x :: œÑ ‚Ü¶ v))).
      rewrite sub_comp_wk1_tail.
      now cbn.
    Qed.

    Lemma dmut_wp_fresh {Œì Œ£0 AT A x œÑ} `{Subst AT, Inst AT A}
          (d : DynamicMutator Œì Œì AT (Œ£0 ‚ñª (x,œÑ))%ctx) (d_dcl : dmut_dcl d)
          (POST : StateProperty Œì AT Œ£0)
          (POST_dcl : stateprop_downwards_closed POST)
          (POST_vac : stateprop_vacuous POST)
          (pc : PathCondition Œ£0) (s : SymbolicState Œì Œ£0) :
      dmut_wp (dmut_fresh (x,œÑ) d) POST pc s <->
      dmut_wp d (stateprop_specialize sub_wk1 POST) (subst sub_wk1 pc) (subst sub_wk1 s).
    Proof.
      unfold dmut_wp, dmut_fresh; cbn; split; intros HYP ? ?.
      - dependent elimination Œ∂1 as [@env_snoc Œ£0 Œ∂1 _ v]; cbn in v.
        rewrite <- subst_sub_comp, sub_comp_wk1_tail; cbn.
        specialize (HYP Œ£1 Œ∂1).
        rewrite outcome_satisfy_map in HYP; cbn in *.
        refine (@d_dcl _ Œ£1 _ _ _ (env_snoc (sub_id _) (_,œÑ) v) _ _ _ _ _ _ _ _ _ _ _ HYP); clear d_dcl HYP.
        + unfold geqpc.
          intros.
          now rewrite (inst_snoc_wk1 H1).
        + unfold geq.
          intros.
          rewrite (inst_snoc_wk1 H1).
          f_equal.
          now rewrite <-subst_sub_comp, sub_comp_wk1_tail.
        + unfold geq, syminstance_rel.
          intros. subst Œπ0.
          rewrite <-inst_subst.
          f_equal.
          change (subst _ _) with (sub_comp (sub_up1 Œ∂1) (sub_id Œ£1 ‚ñ∫ (x :: œÑ ‚Ü¶ v))).
          now rewrite <- (sub_snoc_comp Œ∂1),  sub_comp_id_right.
        + revert POST_dcl. clear. intros.
          unfold resultprop_downwards_closed.
          intros [Œ£3 Œ∂3 pc3 a3 s3] [Œ£4 Œ∂4 pc4 a4 s4] Hgeq.
          cbn. apply POST_dcl. rewrite <- ?sub_comp_assoc.
          revert Hgeq. apply dmutres_geq_pre_comp.
        + unfold resultprop_vacuous.
          intros [Œ£3 Œ∂3 pc3 a3 s3].
          cbn.
          eapply POST_vac.
        + intros [Œ£3 Œ∂3 pc3 a3 s3].
          unfold resultprop_specialize_pc. cbn.
          intros [geqpc post].
          rewrite <-(sub_comp_assoc sub_wk1), sub_comp_wk1_tail in post.
          cbn in post.
          rewrite sub_comp_id_left in post.
          unfold stateprop_specialize.
          now rewrite <-(sub_comp_assoc sub_wk1), sub_comp_wk1_tail.
      - rewrite outcome_satisfy_map.
        specialize (HYP (Œ£1 ‚ñª (x,œÑ)) (sub_up1 Œ∂1)).
        rewrite <- ?subst_sub_comp, ?sub_comp_wk1_comm in HYP.
        change (wk1 (b := (x,œÑ)) (subst Œ∂1 ?t)) with (subst (sub_wk1 (b := (x,œÑ))) (subst Œ∂1 t)).
        rewrite <- ?subst_sub_comp. revert HYP.
        apply outcome_satisfy_monotonic.
        intros [Œ£2 Œ∂2 pc2 a2 s2]. clear.
        dependent elimination Œ∂2 as [@env_snoc Œ£1 Œ∂2 _ t].
        unfold stateprop_specialize. cbn.
        now rewrite <- ?sub_comp_assoc, <- sub_comp_wk1_comm.
    Qed.

    Lemma dmut_wp_sub_fresh {Œì Œ£0 Œ£1 AT A x œÑ} `{Subst AT, Inst AT A}
          (Œ∂1 : Sub Œ£0 Œ£1)
          (d : DynamicMutator Œì Œì AT (Œ£0 ‚ñª (x,œÑ))%ctx)
          (POST : StateProperty Œì AT Œ£1)
          (POST_dcl : stateprop_downwards_closed POST)
          (POST_vac : stateprop_vacuous POST)
          (pc : PathCondition Œ£1)
          (s : SymbolicState Œì Œ£1) (wfd : dmut_dcl d) :
      dmut_wp (dmut_sub Œ∂1 (dmut_fresh (x,œÑ) d)) POST pc s <->
      dmut_wp (dmut_sub (sub_up1 Œ∂1) d) (stateprop_specialize sub_wk1 POST) (subst sub_wk1 pc) (subst sub_wk1 s).
    Proof.
      (* OLD: *)
      unfold dmut_wp, dmut_sub, dmut_fresh; cbn; split; intros HYP Œ£2 Œ∂2.
      - dependent elimination Œ∂2 as [@env_snoc Œ£1 Œ∂2 _ v]; cbn in v.
        rewrite <- ?subst_sub_comp, ?sub_comp_wk1_tail; cbn.
        specialize (HYP Œ£2 Œ∂2).
        rewrite outcome_satisfy_map in HYP; cbn in *.
        Print dmut_dcl.
        refine (wfd _ Œ£2 _ _ _ (env_snoc (sub_id _) (_,œÑ) v) _ _ _ _ _ _ _ _ _ _ _ HYP); clear wfd.
        + unfold geqpc.
          intros.
          now rewrite (inst_snoc_wk1 H1).
        + unfold geq.
          intros.
          now rewrite (inst_snoc_wk1 H1).
        + unfold geq, syminstance_rel.
          intros. subst Œπ0.
          rewrite <-inst_subst.
          f_equal.
          rewrite sub_up_comp.
          change (subst _ (sub_comp _ _)) with (sub_comp (sub_comp (sub_up1 Œ∂1) (sub_up1 Œ∂2)) (sub_id Œ£2 ‚ñ∫ (x :: œÑ ‚Ü¶ v))).
          rewrite (sub_comp_assoc (sub_up1 Œ∂1)).
          f_equal.
          now rewrite <- (sub_snoc_comp Œ∂2),  sub_comp_id_right.
        + revert POST_dcl. clear. intros.
          unfold resultprop_downwards_closed.
          intros [Œ£3 Œ∂3 pc3 a3 s3] [Œ£4 Œ∂4 pc4 a4 s4] Hgeq.
          cbn. apply POST_dcl. rewrite <- ?sub_comp_assoc.
          revert Hgeq. apply dmutres_geq_pre_comp.
        + unfold resultprop_vacuous.
          intros [Œ£3 Œ∂3 pc3 a3 s3].
          cbn.
          eapply POST_vac.
        + intros [Œ£3 Œ∂3 pc3 a3 s3].
          unfold resultprop_specialize_pc. cbn.
          intros [geqpc post].
          rewrite <-(sub_comp_assoc sub_wk1), sub_comp_wk1_tail in post.
          cbn in post.
          rewrite sub_comp_id_left in post.
          unfold stateprop_specialize.
          now rewrite <-(sub_comp_assoc sub_wk1), sub_comp_wk1_tail.
      - rewrite outcome_satisfy_map.
        specialize (HYP (Œ£2 ‚ñª (x,œÑ)) (sub_up1 Œ∂2)).
        rewrite <- ?subst_sub_comp, ?sub_comp_wk1_comm in HYP.
        change (wk1 (b := (x,œÑ)) (subst Œ∂2 ?t)) with (subst (sub_wk1 (b := (x,œÑ))) (subst Œ∂2 t)).
        rewrite ?sub_up_comp, <- ?subst_sub_comp.
        revert HYP. apply outcome_satisfy_monotonic.
        intros [Œ£3 Œ∂3 pc3 a3 s3]. clear.
        dependent elimination Œ∂3 as [@env_snoc Œ£2 Œ∂3 _ t].
        unfold stateprop_specialize. cbn.
        now rewrite <- ?sub_comp_assoc, <- sub_comp_wk1_comm.
    Qed.

    Lemma dmut_bind_sound {Œì1 Œì2 Œì3 Œ£0 AT A BT B}
      `{Subst AT, Inst AT A, InstLaws BT B} (Œπ0 : SymInstance Œ£0)
      (dma : DynamicMutator Œì1 Œì2 AT Œ£0) (dm_dcl : dmut_dcl dma)
      (sma : SCMut Œì1 Œì2 A)
      (dmf : forall Œ£1, Sub Œ£0 Œ£1 -> AT Œ£1 -> DynamicMutator Œì2 Œì3 BT Œ£1)
      (dmf_dcl : dmut_arrow_dcl dmf)
      (smf : A -> SCMut Œì2 Œì3 B) :
      box approximates Œπ0 dma sma ->
      (forall Œ£1 (Œ∂1 : Sub Œ£0 Œ£1) (a1 : AT Œ£1) (Œπ1 : SymInstance Œ£1),
          syminstance_rel Œ∂1 Œπ0 Œπ1 ->
          box approximates Œπ1 (dmf Œ£1 Œ∂1 a1) (smf (inst Œπ1 a1))) ->
      box approximates Œπ0 (dmut_bind dma dmf) (scmut_bind sma smf).
    Proof.
      intros H__a H__f.
      intros Œ£1 Œ∂1 Œπ1 relŒπ1 pc1 s__sym1 POST H__wp Hpc.
      apply scmut_wp_bind. revert Hpc.
      apply dmut_wp_sub_bind in H__wp; auto using stateprop_lift_dcl.
      specialize (H__a Œ£1 Œ∂1 Œπ1 relŒπ1).
      apply H__a. revert H__wp. apply dmut_wp_monotonic.
      intros Œ£2 Œ∂2 pc2 a2 s2 Hwp2 Œπ2 rel12 Hpc2. revert Hpc2.
      specialize (H__f Œ£2 (sub_comp Œ∂1 Œ∂2) a2 Œπ2).
      inster H__f by eapply syminstance_rel_trans; eauto.
      apply approximates_proj in H__f. apply H__f.
      revert Hwp2. apply dmut_wp_monotonic.
      intros Œ£3 Œ∂3 pc3 b3 s__sym3 H__post Œπ3 rel23 Hpc3.
      apply H__post. apply (syminstance_rel_trans rel12 rel23). assumption.
    Qed.

    Lemma dmut_bind_right_sound {Œì1 Œì2 Œì3 Œ£0 AT A BT B}
      `{Subst AT, Inst AT A, InstLaws BT B} (Œπ0 : SymInstance Œ£0)
      (dma : DynamicMutator Œì1 Œì2 AT Œ£0) (dm_dcl : dmut_dcl dma) (sma : SCMut Œì1 Œì2 A)
      (dmb : DynamicMutator Œì2 Œì3 BT Œ£0) (dmb_dcl : dmut_dcl dmb) (smb : SCMut Œì2 Œì3 B) :
      box approximates Œπ0 dma sma ->
      box approximates Œπ0 dmb smb ->
      box approximates Œπ0 (dmut_bind_right dma dmb) (scmut_bind_right sma smb).
    Proof.
    Admitted.

    Lemma dmut_fresh_sound {Œì Œ£ œÇ œÑ} (Œπ : SymInstance Œ£)
          (dm : DynamicMutator Œì Œì Unit (Œ£ ‚ñª (œÇ,œÑ))) (dm_dcl : dmut_dcl dm)
          (sm : Lit œÑ -> SCMut Œì Œì unit) :
      (forall v, box approximates (env_snoc Œπ _ v) dm (sm v)) ->
      box approximates Œπ
        (dmut_fresh (œÇ,œÑ) dm)
        (scmut_demonic sm).
    Proof.
      intros HYP. unfold box, approximates.
      intros * <- pc1 s1 POST Hwp Hpc.
      apply scmut_wp_demonic. intros v.
      specialize (HYP v (Œ£1 ‚ñª (œÇ,œÑ)) (sub_up1 Œ∂1) (env_snoc Œπ1 (œÇ,œÑ) v)).
      inster HYP by apply syminstance_rel_up; auto.
      unfold approximates in HYP.
      specialize (HYP (subst sub_wk1 pc1) (subst (sub_wk1) s1) POST).
      rewrite ?inst_subst, ?inst_sub_wk1 in HYP. apply HYP; auto.
      apply dmut_wp_sub_fresh in Hwp; auto.
      - revert Hwp.
        apply dmut_wp_monotonic; cbn.
        unfold stateprop_impl, stateprop_specialize, stateprop_lift.
        intros ? Œ∂ * Hpost Œπ0 rel10.
        dependent elimination Œ∂ as [@env_snoc Œ£0 Œ∂ _ t].
        apply syminstance_rel_snoc in rel10.
        apply Hpost. now rewrite sub_comp_wk1_tail.
      - apply stateprop_lift_dcl.
      - eapply stateprop_lift_vac.
    Qed.

    Lemma dmut_assume_formula_sound {Œì Œ£} (Œπ : SymInstance Œ£) (fml : Formula Œ£) :
      box approximates
        (Œì1 := Œì) (Œì2 := Œì) Œπ
        (dmut_assume_formula fml)
        (scmut_assume_formula Œπ fml).
    Proof.
      unfold box, approximates.
      intros * <- ? ? POST Hwp Hpc.
      unfold dmut_wp, dmut_sub, dmut_assume_formula in Hwp.
      specialize (Hwp Œ£1 (sub_id Œ£1)).
      rewrite sub_comp_id_right in Hwp.
      unfold scmut_wp, scmut_assume_formula. cbn.
      intros Hfml. rewrite ?subst_sub_id in Hwp.
      destruct (try_solve_formula_spec (subst Œ∂1 fml)).
      - specialize (H Œπ1). rewrite inst_subst in H.
        apply H in Hfml. clear H.
        unfold is_true in Hfml. subst a.
        cbn in Hwp.
        rewrite ?sub_comp_id_left in Hwp.
        unfold stateprop_lift in Hwp.
        inster Hwp by apply syminstance_rel_refl.
        now apply Hwp.
      - clear H.
        destruct (dmutres_assume_formula pc (subst Œ∂1 fml) s__sym) as [Œ£2 Œ∂2 [] s2] eqn:?.
        + cbn in Hwp. rewrite sub_comp_id_left in Hwp.
          assert (resultprop_lift Œπ1 POST (dmutres_assume_formula pc (subst Œ∂1 fml) s__sym))
            by (rewrite Heqd; apply Hwp).
          apply dmutres_assume_formula_spec in H; auto using resultprop_lift_dcl.
          unfold resultprop_lift, stateprop_lift in H.
          inster H by apply syminstance_rel_refl. apply H.
          rewrite inst_pathcondition_cons.
          rewrite inst_subst. auto.
        + cbn in Hwp. rewrite sub_comp_id_left in Hwp.
          assert (resultprop_lift Œπ1 POST (dmutres_assume_formula pc (subst Œ∂1 fml) s__sym))
            by (rewrite Heqd; apply Hwp).
          apply dmutres_assume_formula_spec in H; auto using resultprop_lift_dcl.
          unfold resultprop_lift, stateprop_lift in H.
          inster H by apply syminstance_rel_refl. apply H.
          rewrite inst_pathcondition_cons.
          rewrite inst_subst. auto.
    Qed.

    Opaque dmut_assume_formula.

    Lemma dmut_produce_sound {Œì Œ£} (asn : Assertion Œ£) (Œπ : SymInstance Œ£) :
      box approximates
        (Œì1 := Œì) (Œì2 := Œì) Œπ
        (dmut_produce asn)
        (scmut_produce Œπ asn).
    Proof.
      induction asn; cbn.
      - apply dmut_assume_formula_sound.
      - apply dmut_produce_chunk_sound.
      - apply approximates_demonic_binary.
        + unfold dmut_assume_term, scmut_assume_term.
          apply dmut_bind_right_sound;
            auto using dmut_assume_formula_dcl, dmut_produce_dcl, dmut_assume_formula_sound.
        + unfold dmut_assume_term, scmut_assume_term.
          apply dmut_bind_right_sound;
            auto using dmut_assume_formula_dcl, dmut_produce_dcl, dmut_assume_formula_sound.
      - admit.
      - admit.
      - admit.
      - admit.
      - admit.
      - admit.
      - admit.
      - apply dmut_bind_right_sound; auto using dmut_produce_dcl.
      - apply dmut_fresh_sound; auto using dmut_produce_dcl.
    Admitted.

    Lemma dmut_exec_sound {Œì Œ£ œÉ} (s : Stm Œì œÉ) (Œπ : SymInstance Œ£) :
      box approximates Œπ (dmut_exec s) (scmut_exec s).
    Proof. (* induction s; cbn [dmut_exec scmut_exec]. *) Admitted.

    Section Leftovers.

      Context `{HL: IHeaplet L} {SLL: ISepLogicLaws L}.

      Definition interpret_heap {Œ£} (Œπ : SymInstance Œ£) (h : SymbolicHeap Œ£) : L :=
        List.fold_right (fun c h => ASS.inst_chunk Œπ c ‚àß h) ltrue h.

      Transparent subst SubstEnv.
      Lemma subst_lookup {Œì Œ£ Œ£' x œÉ} (xInŒì : (x ‚à∂ œÉ)%ctx ‚àà Œì) (Œ∂ : Sub Œ£ Œ£') (Œ¥ : SymbolicLocalStore Œì Œ£) :
        (subst Œ∂ (Œ¥ ‚Äº x)%exp = (subst Œ∂ Œ¥ ‚Äº x)%exp).
      Proof.
        unfold subst at 2, subst_localstore, SubstEnv.
        now rewrite env_lookup_map.
      Qed.

      Lemma subst_symboliceval {Œì œÑ Œ£ Œ£'} (e : Exp Œì œÑ) (Œ∂ : Sub Œ£ Œ£') (Œ¥ : SymbolicLocalStore Œì Œ£) :
        subst (T := fun Œ£ => Term Œ£ _) Œ∂ (symbolic_eval_exp Œ¥ e) = symbolic_eval_exp (subst Œ∂ Œ¥) e.
      Proof.
        induction e; cbn; f_equal; auto.
        { now rewrite (subst_lookup xInŒì). }
        all: induction es; cbn in *; destruct_conjs; f_equal; auto.
      Qed.

      Transparent inst instantiate_env.

      Lemma eval_exp_inst {Œì Œ£ œÑ} (Œπ : SymInstance Œ£) (Œ¥ŒìŒ£ : SymbolicLocalStore Œì Œ£) (e : Exp Œì œÑ) :
        eval e (inst Œπ Œ¥ŒìŒ£) = inst Œπ (symbolic_eval_exp Œ¥ŒìŒ£ e).
      Proof.
        induction e; cbn; repeat f_equal; auto.
        { unfold inst; cbn. now rewrite env_lookup_map. }
        2: {
          induction es as [|eb n es IHes]; cbn in *.
          { reflexivity. }
          { destruct X as [-> Heqs].
            change (inst_term ?Œπ ?t) with (inst Œπ t).
            destruct (inst Œπ (symbolic_eval_exp Œ¥ŒìŒ£ eb));
              cbn; f_equal; auto.
          }
        }
        all: induction es; cbn in *; destruct_conjs; f_equal; auto.
      Qed.

    End Leftovers.

  End DynMutV1Soundness.

End Soundness.
