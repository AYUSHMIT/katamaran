(******************************************************************************)
(* Copyright (c) 2019 Steven Keuchel                                          *)
(* All rights reserved.                                                       *)
(*                                                                            *)
(* Redistribution and use in source and binary forms, with or without         *)
(* modification, are permitted provided that the following conditions are     *)
(* met:                                                                       *)
(*                                                                            *)
(* 1. Redistributions of source code must retain the above copyright notice,  *)
(*    this list of conditions and the following disclaimer.                   *)
(*                                                                            *)
(* 2. Redistributions in binary form must reproduce the above copyright       *)
(*    notice, this list of conditions and the following disclaimer in the     *)
(*    documentation and/or other materials provided with the distribution.    *)
(*                                                                            *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  *)
(* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR *)
(* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR          *)
(* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,      *)
(* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *)
(* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *)
(* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *)
(* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *)
(* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *)
(* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               *)
(******************************************************************************)

From Coq Require Import
     Strings.String.
From MicroSail Require Import
     Syntax.

Set Implicit Arguments.

Module SmallStep
  (Import typekit : TypeKit)
  (Import termkit : TermKit typekit)
  (Import progKit : ProgramKit typekit termkit).

  Import CtxNotations.
  Import EnvNotations.

  Inductive Step {Œì : Ctx (ùëø * Ty)} : forall {œÉ : Ty} (Œ¥1 Œ¥2 : LocalStore Œì) (s1 s2 : Stm Œì œÉ), Prop :=

  | step_stm_exp
      (Œ¥ : LocalStore Œì) (œÉ : Ty) (e : Exp Œì œÉ) :
      ‚ü® Œ¥ , stm_exp e ‚ü© ---> ‚ü® Œ¥ , stm_lit œÉ (eval e Œ¥) ‚ü©

  | step_stm_let_value
      (Œ¥ : LocalStore Œì) (x : ùëø) (œÑ œÉ : Ty) (v : Lit œÑ) (k : Stm (Œì ‚ñª (x , œÑ)) œÉ) :
      ‚ü® Œ¥ , stm_let x œÑ (stm_lit œÑ v) k ‚ü© ---> ‚ü® Œ¥ , stm_let' (env_snoc env_nil (x,œÑ) v) k ‚ü©
  | step_stm_let_exit
      (Œ¥ : LocalStore Œì) (x : ùëø) (œÑ œÉ : Ty) (s : string) (k : Stm (Œì ‚ñª (x , œÑ)) œÉ) :
      ‚ü® Œ¥ , stm_let x œÑ (stm_exit œÑ s) k ‚ü© ---> ‚ü® Œ¥ , stm_exit œÉ s ‚ü©
  | step_stm_let_step
      (Œ¥ : LocalStore Œì) (Œ¥' : LocalStore Œì) (x : ùëø) (œÑ œÉ : Ty)
      (s : Stm Œì œÑ) (s' : Stm Œì œÑ) (k : Stm (Œì ‚ñª (x , œÑ)) œÉ) :
      ‚ü® Œ¥ , s ‚ü© ---> ‚ü® Œ¥' , s' ‚ü© ->
      ‚ü® Œ¥ , stm_let x œÑ s k ‚ü© ---> ‚ü® Œ¥' , stm_let x œÑ s' k ‚ü©
  | step_stm_let'_value
      (Œ¥ : LocalStore Œì) (Œî : Ctx (ùëø * Ty)) (Œ¥Œî : LocalStore Œî) (œÉ : Ty) (v : Lit œÉ) :
      ‚ü® Œ¥ , stm_let' Œ¥Œî (stm_lit œÉ v) ‚ü© ---> ‚ü® Œ¥ , stm_lit œÉ v ‚ü©
  | step_stm_let'_exit
      (Œ¥ : LocalStore Œì) (Œî : Ctx (ùëø * Ty)) (Œ¥Œî : LocalStore Œî) (œÉ : Ty) (s : string) :
      ‚ü® Œ¥ , stm_let' Œ¥Œî (stm_exit œÉ s) ‚ü© ---> ‚ü® Œ¥ , stm_exit œÉ s ‚ü©
  | step_stm_let'_step
      (Œ¥ Œ¥' : LocalStore Œì) (Œî : Ctx (ùëø * Ty)) (Œ¥Œî Œ¥Œî' : LocalStore Œî) (œÉ : Ty) (k k' : Stm (Œì ‚ñª‚ñª Œî) œÉ) :
      ‚ü® Œ¥ ‚ñ∫‚ñ∫ Œ¥Œî , k ‚ü© ---> ‚ü® Œ¥' ‚ñ∫‚ñ∫ Œ¥Œî' , k' ‚ü© ->
      ‚ü® Œ¥ , stm_let' Œ¥Œî k ‚ü© ---> ‚ü® Œ¥' , stm_let' Œ¥Œî' k' ‚ü©

  | step_stm_seq_step
      (Œ¥ Œ¥' : LocalStore Œì) (œÑ œÉ : Ty) (s s' : Stm Œì œÑ) (k : Stm Œì œÉ) :
      ‚ü® Œ¥ , s ‚ü© ---> ‚ü® Œ¥' , s' ‚ü© ->
      ‚ü® Œ¥ , stm_seq s k ‚ü© ---> ‚ü® Œ¥' , stm_seq s' k ‚ü©
  | step_stm_seq_value
      (Œ¥ : LocalStore Œì) (œÑ œÉ : Ty) (v : Lit œÑ) (k : Stm Œì œÉ) :
      ‚ü® Œ¥ , stm_seq (stm_lit œÑ v) k ‚ü© ---> ‚ü® Œ¥ , k ‚ü©
  | step_stm_seq_exit
      (Œ¥ : LocalStore Œì) (œÑ œÉ : Ty) (s : string) (k : Stm Œì œÉ) :
      ‚ü® Œ¥ , stm_seq (stm_exit œÑ s) k ‚ü© ---> ‚ü® Œ¥ , stm_exit œÉ s ‚ü©

  | step_stm_app
      {Œ¥ : LocalStore Œì} {œÉs œÉ} {f : ùë≠ œÉs œÉ} (es : Env' (Exp Œì) œÉs) :
      ‚ü® Œ¥ , stm_app f es ‚ü© --->
      ‚ü® Œ¥ , stm_app' œÉs (evals es Œ¥) œÉ (fun_body (Pi f)) ‚ü©
  | step_stm_app'_step
      {Œ¥ : LocalStore Œì} (Œî : Ctx (ùëø * Ty)) {Œ¥Œî Œ¥Œî' : LocalStore Œî} (œÑ : Ty)
      (s s' : Stm Œî œÑ) :
      ‚ü® Œ¥Œî , s ‚ü© ---> ‚ü® Œ¥Œî' , s' ‚ü© ->
      ‚ü® Œ¥ , stm_app' Œî Œ¥Œî œÑ s ‚ü© ---> ‚ü® Œ¥ , stm_app' Œî Œ¥Œî' œÑ s' ‚ü©
  | step_stm_app'_value
      {Œ¥ : LocalStore Œì} (Œî : Ctx (ùëø * Ty)) {Œ¥Œî : LocalStore Œî} (œÑ : Ty) (v : Lit œÑ) :
      ‚ü® Œ¥ , stm_app' Œî Œ¥Œî œÑ (stm_lit œÑ v) ‚ü© ---> ‚ü® Œ¥ , stm_lit œÑ v ‚ü©
  | step_stm_app'_exit
      {Œ¥ : LocalStore Œì} (Œî : Ctx (ùëø * Ty)) {Œ¥Œî : LocalStore Œî} (œÑ : Ty) (s : string) :
      ‚ü® Œ¥ , stm_app' Œî Œ¥Œî œÑ (stm_exit œÑ s) ‚ü© ---> ‚ü® Œ¥ , stm_exit œÑ s ‚ü©
  | step_stm_assign
      (Œ¥ : LocalStore Œì) (x : ùëø) (œÉ : Ty) {xInŒì : InCtx (x , œÉ) Œì} (e : Exp Œì œÉ) :
      let v := eval e Œ¥ in
      ‚ü® Œ¥ , stm_assign x e ‚ü© ---> ‚ü® Œ¥ [ x ‚Ü¶ v ] , stm_lit œÉ v ‚ü©
  | step_stm_if
      (Œ¥ : LocalStore Œì) (e : Exp Œì ty_bool) (œÉ : Ty) (s1 s2 : Stm Œì œÉ) :
      ‚ü® Œ¥ , stm_if e s1 s2 ‚ü© ---> ‚ü® Œ¥ , if eval e Œ¥ then s1 else s2 ‚ü©
  | step_stm_assert
      (Œ¥ : LocalStore Œì) (e1 : Exp Œì ty_bool) (e2 : Exp Œì ty_string) :
      ‚ü® Œ¥ , stm_assert e1 e2 ‚ü© --->
      ‚ü® Œ¥ , if eval e1 Œ¥ then stm_lit ty_bool true else stm_exit ty_bool (eval e2 Œ¥) ‚ü©
  (* | step_stm_while : *)
  (*   (Œ¥ : LocalStore Œì) (w : ùëæ Œ¥) (e : Exp Œì ty_bool) {œÉ : Ty} (s : Stm Œì œÉ) -> *)
  (*   ‚ü® Œ¥ , stm_while w e s ‚ü© ---> *)
  (*   ‚ü® Œ¥ , stm_if e (stm_seq s (stm_while w e s)) (stm_lit tt) ‚ü© *)
  | step_stm_match_list
      (Œ¥ : LocalStore Œì) {œÉ œÑ : Ty} (e : Exp Œì (ty_list œÉ)) (alt_nil : Stm Œì œÑ)
      (xh xt : ùëø) (alt_cons : Stm (Œì ‚ñª (xh , œÉ) ‚ñª (xt , ty_list œÉ)) œÑ) :
      ‚ü® Œ¥ , stm_match_list e alt_nil xh xt alt_cons ‚ü© --->
      ‚ü® Œ¥ , match eval e Œ¥ with
            | nil => alt_nil
            | cons vh vt => stm_let' (env_snoc (env_snoc env_nil (xh,œÉ) vh) (xt,ty_list œÉ) vt) alt_cons
            end
      ‚ü©
  | step_stm_match_sum
      (Œ¥ : LocalStore Œì) {œÉinl œÉinr œÑ : Ty} (e : Exp Œì (ty_sum œÉinl œÉinr))
      (xinl : ùëø) (alt_inl : Stm (Œì ‚ñª (xinl , œÉinl)) œÑ)
      (xinr : ùëø) (alt_inr : Stm (Œì ‚ñª (xinr , œÉinr)) œÑ) :
      ‚ü® Œ¥ , stm_match_sum e xinl alt_inl xinr alt_inr ‚ü© --->
      ‚ü® Œ¥ , match eval e Œ¥ with
            | inl v => stm_let' (env_snoc env_nil (xinl,œÉinl) v) alt_inl
            | inr v => stm_let' (env_snoc env_nil (xinr,œÉinr) v) alt_inr
            end
      ‚ü©
  | step_stm_match_pair
      (Œ¥ : LocalStore Œì) {œÉ1 œÉ2 œÑ : Ty} (e : Exp Œì (ty_prod œÉ1 œÉ2)) (xl xr : ùëø)
      (rhs : Stm (Œì ‚ñª (xl , œÉ1) ‚ñª (xr , œÉ2)) œÑ) :
      ‚ü® Œ¥ , stm_match_pair e xl xr rhs ‚ü© --->
      ‚ü® Œ¥ , let (vl , vr) := eval e Œ¥ in
            stm_let' (env_snoc (env_snoc env_nil (xl,œÉ1) vl) (xr,œÉ2) vr) rhs
      ‚ü©

  | step_stm_match_tuple
      (Œ¥ : LocalStore Œì) {œÉs : Ctx Ty} {Œî : Ctx (ùëø * Ty)}
      (e : Exp Œì (ty_tuple œÉs)) (p : TuplePat œÉs Œî)
      {œÑ : Ty} (rhs : Stm (ctx_cat Œì Œî) œÑ) :
      ‚ü® Œ¥ , stm_match_tuple e p rhs ‚ü© --->
      ‚ü® Œ¥ , stm_let' (tuple_pattern_match p (eval e Œ¥)) rhs ‚ü©

  | step_stm_match_union
      (Œ¥ : LocalStore Œì) {T : ùëª} (e : Exp Œì (ty_union T)) {œÑ : Ty}
      (altx : forall (K : ùë≤ T), ùëø)
      (alts : forall (K : ùë≤ T), Stm (ctx_snoc Œì (altx K , ùë≤_Ty K)) œÑ) :
      ‚ü® Œ¥ , stm_match_union e altx alts ‚ü© --->
      ‚ü® Œ¥ , let (K , v) := eval e Œ¥ in
            stm_let' (env_snoc env_nil (altx K,ùë≤_Ty K) (untag v)) (alts K)
      ‚ü©
  | step_stm_match_record
      (Œ¥ : LocalStore Œì) {R : ùëπ} {Œî : Ctx (ùëø * Ty)}
      (e : Exp Œì (ty_record R)) (p : RecordPat (ùëπùë≠_Ty R) Œî)
      {œÑ : Ty} (rhs : Stm (ctx_cat Œì Œî) œÑ) :
      ‚ü® Œ¥ , stm_match_record R e p rhs ‚ü© --->
      ‚ü® Œ¥ , stm_let' (record_pattern_match p (eval e Œ¥)) rhs ‚ü©

  where "'‚ü®' Œ¥1 ',' s1 '‚ü©' '--->' '‚ü®' Œ¥2 ',' s2 '‚ü©'" := (@Step _ _ Œ¥1 Œ¥2 s1 s2).

  Inductive Steps {Œì : Ctx (ùëø * Ty)} {œÉ : Ty} (Œ¥1 : LocalStore Œì) (s1 : Stm Œì œÉ) : LocalStore Œì -> Stm Œì œÉ -> Prop :=
  | step_refl : Steps Œ¥1 s1 Œ¥1 s1
  | step_trans {Œ¥2 Œ¥3 : LocalStore Œì} {s2 s3 : Stm Œì œÉ} :
      Step Œ¥1 Œ¥2 s1 s2 -> Steps Œ¥2 s2 Œ¥3 s3 -> Steps Œ¥1 s1 Œ¥3 s3.

  Notation "'‚ü®' Œ¥1 ',' s1 '‚ü©' '--->' '‚ü®' Œ¥2 ',' s2 '‚ü©'" := (@Step _ _ Œ¥1 Œ¥2 s1 s2).
  Notation "'‚ü®' Œ¥1 ',' s1 '‚ü©' --->* '‚ü®' Œ¥2 ',' s2 '‚ü©'" := (@Steps _ _ Œ¥1 s1 Œ¥2 s2).

End SmallStep.
