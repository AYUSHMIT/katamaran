Require Import Coq.Program.Tactics.
Require Import FunctionalExtensionality.

Require Import MicroSail.Syntax.
Require Import MicroSail.Sep.Spec.

(* Abstract logic interface, implemented as a Coq typeclasses

   Partially adopted from Gregory Malecha's PhD thesis (Chapter 7.1) and
   VST https://github.com/PrincetonUniversity/VST/blob/master/msl/seplog.v
*)

Class ILogic (L : Type) :=
{ lentails : L -> L -> Prop;
  ltrue : L;
  lfalse : L;
  land : L -> L -> L;
  lor : L -> L -> L;
  limpl : L -> L -> L;
  lprop: Prop -> L;
  lex : forall {T : Type}, (T -> L) -> L;
  lall : forall {T : Type}, (T -> L) -> L
 }.

Delimit Scope logic with logic.
Local Open Scope logic.
Notation "P '‚ä¢' Q" := (lentails P Q) (at level 80, no associativity) : logic_entails.
Open Scope logic_entails.
Notation "'‚àÉ' x .. y , P " :=
  (lex (fun x => .. (lex (fun y => P%logic)) ..)) (at level 65, x binder, y binder, right associativity) : logic.
Notation "'‚àÄ' x .. y , P " :=
  (lall (fun x => .. (lall (fun y => P%logic)) ..)) (at level 65, x binder, y binder, right associativity) : logic.
Infix "‚à®" := lor (at level 50, left associativity) : logic.
Infix "‚àß" := land (at level 40, left associativity) : logic.
Notation "P '-->' Q" := (limpl P Q) (at level 55, right associativity) : logic.
Notation "P '<-->' Q" := (land (limpl P Q) (limpl Q P))
  (at level 57, no associativity) : logic.
Notation "P ‚ä£‚ä¢ Q" := ((P ‚ä¢ Q) /\ (Q ‚ä¢ P)) (at level 50, no associativity) : logic.
Notation "'!!' e" := (lprop e) (at level 25) : logic.
Notation "‚ä•" := lfalse.
Notation "‚ä§" := ltrue.

Class ILogicLaws (L : Type) (LL : ILogic L) :=
{ entails_refl  : forall P, P ‚ä¢ P;
  entails_trans : forall P Q R, P ‚ä¢ Q -> Q ‚ä¢ R -> P ‚ä¢ R;
  land_right :  forall X P Q, X ‚ä¢ P -> X ‚ä¢ Q -> X ‚ä¢ P ‚àß Q;
  land_left1 :  forall P Q R, P ‚ä¢ R -> P ‚àß Q ‚ä¢ R;
  land_left2 :  forall P Q R, Q ‚ä¢ R -> P ‚àß Q ‚ä¢ R;
  lor_left : forall P Q R, P ‚ä¢ R -> Q ‚ä¢ R -> P ‚à® Q ‚ä¢ R;
  lor_right1 : forall P Q R, P ‚ä¢ Q -> P ‚ä¢ Q ‚à® R;
  lor_right2 : forall P Q R, P ‚ä¢ R -> P ‚ä¢ Q ‚à® R;
  lex_right  : forall {B : Type} (x : B) (P: L) (Q: B -> L), P ‚ä¢ (Q x) -> P ‚ä¢ (lex Q);
  lex_left   : forall {B : Type} (P : B -> L) (Q : L), (forall x, (P x) ‚ä¢ Q) -> (lex P) ‚ä¢ Q;
  lall_left  : forall {B : Type} (P: B -> L) x Q, (P x) ‚ä¢ Q -> (lall P) ‚ä¢ Q;
  lall_right : forall {B : Type} (P: L) (Q: B -> L),  (forall v, P ‚ä¢ (Q v)) -> P ‚ä¢ (lall Q);
  limpl_and_adjoint : forall P Q R, P ‚àß Q ‚ä¢ R <-> P ‚ä¢ (Q --> R);
}.

Class ISepLogic (L : Type) := {
  is_ILogic :> ILogic L;
  emp : L;
  sepcon : L -> L -> L;
  wand : L -> L -> L;
}.

Notation "P '‚ú±' Q" := (sepcon P Q) (at level 45, left associativity) : logic.
Notation "P '-‚ú±' Q" := (wand P Q) (at level 60, right associativity) : logic.

Class ISepLogicLaws (L : Type) (SL : ISepLogic L) := {
  is_ILogicLaws :> ILogicLaws L is_ILogic;
  sepcon_assoc: forall (P Q R : L), ((P ‚ú± Q) ‚ú± R) ‚ä£‚ä¢ (P ‚ú± (Q ‚ú± R));
  sepcon_comm:  forall (P Q : L), P ‚ú± Q ‚ä£‚ä¢ Q ‚ú± P;
  wand_sepcon_adjoint: forall (P Q R : L), (P ‚ú± Q ‚ä¢ R) <-> (P ‚ä¢ Q -‚ú± R);
  sepcon_andp_prop: forall (P R : L) (Q : Prop), P ‚ú± (!!Q ‚àß R) ‚ä£‚ä¢ !!Q ‚àß (P ‚ú± R);
  sepcon_entails: forall P P' Q Q' : L, P ‚ä¢ P' -> Q ‚ä¢ Q' -> P ‚ú± Q ‚ä¢ P' ‚ú± Q';
}.



Module Type HeapKit
       (Import typekit : TypeKit)
       (Import termkit : TermKit typekit)
       (Import progkit : ProgramKit typekit termkit)
       (Import assertkit : AssertionKit typekit termkit progkit)
       (Import contractkit : SymbolicContractKit typekit termkit progkit assertkit).

  Import CtxNotations.
  Import EnvNotations.

  Class IHeaplet (L : Type) := {
    is_ISepLogic :> ISepLogic L;
    pred (p : ùë∑) (ts : Env Lit (ùë∑_Ty p)) : L;
    ptsreg  {œÉ : Ty} (r : ùëπùë¨ùëÆ œÉ) (t : Lit œÉ) : L
  }.

  Section Contracts.
    Context (L : Type) (Logic : IHeaplet L).

    Fixpoint interpret {Œ£ : Ctx (ùë∫ * Ty)} (Œ¥ : NamedEnv Lit Œ£) (a : Assertion Œ£) : L :=
      match a with
      | asn_bool b => if eval_term b Œ¥ then ltrue else lfalse
      | asn_prop p => !!(uncurry_named p Œ¥) ‚àß emp
      | asn_chunk c =>
        match c with
        | chunk_pred p ts => pred p (env_map (fun _ t => eval_term t Œ¥) ts)
        | chunk_ptsreg r t => ptsreg r (eval_term t Œ¥)
        end
      | asn_if b a1 a2 => if eval_term b Œ¥ then interpret Œ¥ a1 else interpret Œ¥ a2
      | asn_match_enum E k alts => interpret Œ¥ (alts (eval_term k Œ¥))
      | asn_sep a1 a2 => interpret Œ¥ a1 ‚ú± interpret Œ¥ a2
      | asn_exist œÇ œÑ a => ‚àÉ v, @interpret (Œ£ ‚ñª (œÇ , œÑ)) (Œ¥ ‚ñ∫ (œÇ , œÑ) ‚Ü¶ v) a
    end.

    Definition ValidContract {Œì œÑ} (c : SepContract Œì œÑ) : L :=
      match c with
      | sep_contract_unit _ req ens => ‚àÄ Œ¥, interpret Œ¥ req --> interpret Œ¥ ens
      | sep_contract_result_pure _ result req ens => ‚àÄ Œ¥, interpret Œ¥ req --> interpret Œ¥ ens
      | @sep_contract_result _ Œ£ œÉ _ result req ens =>
        ‚àÄ Œ¥ v, interpret Œ¥ req -->
               @interpret (Œ£ ‚ñª (result , œÉ)) (Œ¥ ‚ñ∫ (result , œÉ) ‚Ü¶ v) ens
      | sep_contract_none _ => ‚ä§
      end.

  End Contracts.

  Arguments interpret {_ _ _ _} _.
  Arguments ValidContract {_ _ _ _} _.

  Notation "r '‚Ü¶' t" := (ptsreg r t) (at level 30).

End HeapKit.
