Require Import Coq.Program.Tactics.
Require Import FunctionalExtensionality.

Require Import MicroSail.Syntax.
Require Import MicroSail.Environment.
Require Import MicroSail.Sep.Logic.
Require Import MicroSail.Sep.Spec.

Module ProgramLogic

  (Import typekit : TypeKit)
  (Import termkit : TermKit typekit)
  (Import progkit : ProgramKit typekit termkit)
  (Import assertkit : AssertionKit typekit termkit progkit)
  (Import contractkit : SymbolicContractKit typekit termkit progkit assertkit)
  (Import heapkit : HeapKit typekit termkit progkit assertkit contractkit).

  Import CtxNotations.
  Import EnvNotations.

  (* Some simple instance that make writing program logic rules more natural by
   avoiding the need to mention the local variable store Œ¥ in the pre and post
   conditions that don't affect it *)
  Section WithŒì.
    Context (Œì : Ctx (ùëø * Ty)).

    Instance Œ¥_ILogic (L : Type) (LL : ILogic L) : ILogic (LocalStore Œì -> L) :=
      { lentails P Q := (forall Œ¥, lentails (P Œ¥ ) (Q Œ¥));
        ltrue := (fun _ => ltrue);
        lfalse := (fun _ => lfalse);
        land P Q := (fun Œ¥ => (land (P Œ¥) (Q Œ¥)));
        lor P Q := (fun Œ¥ => (lor (P Œ¥) (Q Œ¥)));
        limpl P Q := (fun Œ¥ => (limpl (P Œ¥) (Q Œ¥)));
        lprop P := fun _ => lprop P;
        lex {T} (F : T -> LocalStore Œì -> L) := fun Œ¥ => lex (fun t => F t Œ¥);
        lall {T} (F : T -> LocalStore Œì -> L) := fun Œ¥ => lall (fun t => F t Œ¥)
      }.

    Program Instance Œ¥_ILogicLaws (L : Type) (LL : ILogic L) (LLL : ILogicLaws L LL) :
      ILogicLaws (LocalStore Œì -> L) (Œ¥_ILogic L LL).
    (* (* Solve the obligations with firstorder take a lot of time. *) *)
    (* Solve Obligations with firstorder. *)
    Admit Obligations.

    Instance Œ¥_ISepLogic (L : Type) (SL : ISepLogic L) : ISepLogic (LocalStore Œì -> L) :=
      { emp := fun _ => emp;
        sepcon P Q := fun Œ¥ => sepcon (P Œ¥) (Q Œ¥);
        wand P Q := fun Œ¥ => wand (P Œ¥) (Q Œ¥)
      }.

    Program Instance Œ¥_ISepLogicLaws (L : Type) (LL : ISepLogic L)
                                     (LLL : ISepLogicLaws L LL) :
      ISepLogicLaws (LocalStore Œì -> L) (Œ¥_ISepLogic L LL).
    Admit Obligations.

    Program Instance Œ¥_IHeaplet (L : Type) (SL : IHeaplet L) :
      IHeaplet (LocalStore Œì -> L) :=
      { pred p ts := fun Œ¥ => pred p ts;
        ptsreg œÉ r v := fun Œ¥ => ptsreg r v
      }.

  End WithŒì.

  Open Scope logic.

  Reserved Notation "Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ s ‚¶É Q ‚¶Ñ" (at level 75, no associativity).

  Existing Instance Œ¥_IHeaplet.

  (* Hoare triples for SepContract *)

  Inductive CTriple {L : Type} {Logic : IHeaplet L} (Œî : Ctx (ùëø * Ty)) (Œ¥Œî : LocalStore Œî) :
    forall {œÑ : Ty} (pre : L) (post : Lit œÑ -> L) (c : SepContract Œî œÑ), Prop :=
  | rule_sep_contract_unit
      (Œ£  : Ctx (ùë∫ * Ty)) (Œ∏Œî : SymbolicLocalStore Œî Œ£) (Œ¥Œ£ : NamedEnv Lit Œ£)
      (req : Assertion Œ£) (ens : Assertion Œ£) :
      Œ¥Œî = env_map (fun _ t => eval_term t Œ¥Œ£) Œ∏Œî ->
      CTriple (œÑ:=ty_unit) Œî Œ¥Œî
        (interpret Œ¥Œ£ req)
        (fun _ => interpret Œ¥Œ£ ens)
        (sep_contract_unit Œ∏Œî req ens)
  | rule_sep_contract_result_pure
      (œÉ : Ty)
      (Œ£  : Ctx (ùë∫ * Ty)) (Œ∏Œî : SymbolicLocalStore Œî Œ£) (Œ¥Œ£ : NamedEnv Lit Œ£)
      (req : Assertion Œ£) (ens : Assertion Œ£) (result : Term Œ£ œÉ) :
      Œ¥Œî = env_map (fun _ t => eval_term t Œ¥Œ£) Œ∏Œî ->
      CTriple Œî Œ¥Œî
        (interpret Œ¥Œ£ req)
        (fun v => interpret Œ¥Œ£ ens ‚àß !!(v = eval_term result Œ¥Œ£))
        (sep_contract_result_pure Œ∏Œî result req ens)
  | rule_sep_contract_result
      (œÉ : Ty) (result : ùë∫)
      (Œ£  : Ctx (ùë∫ * Ty)) (Œ∏Œî : SymbolicLocalStore Œî Œ£) (Œ¥Œ£ : NamedEnv Lit Œ£)
      (req : Assertion Œ£) (ens : Assertion (Œ£ ‚ñª (result , œÉ))) :
      Œ¥Œî = env_map (fun _ t => eval_term t Œ¥Œ£) Œ∏Œî ->
      CTriple
        Œî Œ¥Œî
        (interpret Œ¥Œ£ req)
        (fun v => interpret (env_snoc Œ¥Œ£ (result , œÉ) v) ens)
        (@sep_contract_result _ _ _ Œ∏Œî result req ens).
  (* | rule_sep_contract_none {œÉ} : *)
  (*     Pi f *)
  (*     CTriple Œì (fun _ => ‚ä§) (fun _ _ => ‚ä§) (@sep_contract_none Œì œÉ). *)


  Inductive Triple {L : Type} {Logic : IHeaplet L} (Œì : Ctx (ùëø * Ty)) (Œ¥ : LocalStore Œì) :
    forall {œÑ : Ty}
      (pre : L) (s : Stm Œì œÑ)
      (post :  Lit œÑ -> LocalStore Œì -> L), Prop :=
  | rule_consequence {œÉ : Ty}
      (P P' : L) (Q Q' : Lit œÉ -> LocalStore Œì -> L) (s : Stm Œì œÉ) :
      (P ‚ä¢ P') -> (forall v Œ¥', Q' v Œ¥' ‚ä¢ Q v Œ¥') -> Œ¥ ‚ä¢ ‚¶É P' ‚¶Ñ s ‚¶É Q' ‚¶Ñ -> Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ s ‚¶É Q ‚¶Ñ
  | rule_frame {œÉ : Ty}
      (R P : L) (Q : Lit œÉ -> LocalStore Œì -> L) (s : Stm Œì œÉ) :
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ s ‚¶É Q ‚¶Ñ -> Œ¥ ‚ä¢ ‚¶É R ‚ú± P ‚¶Ñ s ‚¶É fun v Œ¥' => R ‚ú± Q v Œ¥' ‚¶Ñ
  | rule_stm_lit (œÑ : Ty) (l : Lit œÑ) :
      Œ¥ ‚ä¢ ‚¶É ‚ä§ ‚¶Ñ stm_lit œÑ l ‚¶É fun v Œ¥' => !!(l = v /\ Œ¥ = Œ¥') ‚¶Ñ
  | rule_stm_exp_forwards (œÑ : Ty) (e : Exp Œì œÑ) (P : L) :
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ stm_exp e ‚¶É fun v Œ¥' => P ‚àß !!(eval e Œ¥ = v /\ Œ¥ = Œ¥') ‚¶Ñ
  | rule_stm_exp_backwards (œÑ : Ty) (e : Exp Œì œÑ) (Q : Lit œÑ -> LocalStore Œì -> L) :
      Œ¥ ‚ä¢ ‚¶É Q (eval e Œ¥) Œ¥ ‚¶Ñ stm_exp e ‚¶É Q ‚¶Ñ
  | rule_stm_let
      (x : ùëø) (œÉ œÑ : Ty) (s : Stm Œì œÉ) (k : Stm (ctx_snoc Œì (x , œÉ)) œÑ)
      (P : L) (Q : Lit œÉ -> LocalStore Œì -> L)
      (R : Lit œÑ -> LocalStore Œì -> L) :
      Œ¥         ‚ä¢ ‚¶É P ‚¶Ñ s ‚¶É Q ‚¶Ñ ->
      (forall (v : Lit œÉ) (Œ¥' : LocalStore Œì),
          env_snoc Œ¥' (x,œÉ) v ‚ä¢ ‚¶É Q v Œ¥' ‚¶Ñ k ‚¶É fun v Œ¥'' => R v (env_tail Œ¥'') ‚¶Ñ ) ->
      Œ¥         ‚ä¢ ‚¶É P ‚¶Ñ let: x := s in k ‚¶É R ‚¶Ñ
  | rule_stm_if
      (œÑ : Ty) (e : Exp Œì ty_bool) (s1 s2 : Stm Œì œÑ)
      (P : L) (Q : Lit œÑ -> LocalStore Œì -> L) :
      Œ¥ ‚ä¢ ‚¶É P ‚àß !!(eval e Œ¥ = true) ‚¶Ñ s1 ‚¶É Q ‚¶Ñ ->
      Œ¥ ‚ä¢ ‚¶É P ‚àß !!(eval e Œ¥ = false) ‚¶Ñ s2 ‚¶É Q ‚¶Ñ ->
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ stm_if e s1 s2 ‚¶É Q ‚¶Ñ
  | rule_stm_if_backwards
      (œÑ : Ty) (e : Exp Œì ty_bool) (s1 s2 : Stm Œì œÑ)
      (P1 P2 : L) (Q : Lit œÑ -> LocalStore Œì -> L) :
      Œ¥ ‚ä¢ ‚¶É P1 ‚¶Ñ s1 ‚¶É Q ‚¶Ñ -> Œ¥ ‚ä¢ ‚¶É P2 ‚¶Ñ s2 ‚¶É Q ‚¶Ñ ->
      Œ¥ ‚ä¢ ‚¶É (!!(eval e Œ¥ = true)  --> P1) ‚àß
            (!!(eval e Œ¥ = false) --> P2)
          ‚¶Ñ stm_if e s1 s2 ‚¶É Q ‚¶Ñ
  | rule_stm_seq
      (œÑ : Ty) (s1 : Stm Œì œÑ) (œÉ : Ty) (s2 : Stm Œì œÉ)
      (P : L) (Q : LocalStore Œì -> L) (R : Lit œÉ -> LocalStore Œì -> L) :
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ s1 ‚¶É fun _ => Q ‚¶Ñ ->
      (forall Œ¥', Œ¥' ‚ä¢ ‚¶É Q Œ¥' ‚¶Ñ s2 ‚¶É R ‚¶Ñ) ->
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ s1 ;; s2 ‚¶É R ‚¶Ñ
  | rule_stm_assert (e1 : Exp Œì ty_bool) (e2 : Exp Œì ty_string)
                    (P : L)
                    (Q : Lit ty_bool -> LocalStore Œì -> L) :
      Œ¥ ‚ä¢ ‚¶É P ‚àß !!(eval e1 Œ¥ = true) ‚¶Ñ stm_assert e1 e2 ‚¶É Q ‚¶Ñ
  | rule_stm_fail (œÑ : Ty) (s : Lit ty_string) :
      forall (Q : Lit œÑ -> LocalStore Œì -> L),
        Œ¥ ‚ä¢ ‚¶É ‚ä• ‚¶Ñ stm_fail œÑ s ‚¶É Q ‚¶Ñ
  | rule_stm_match_sum (œÉinl œÉinr œÑ : Ty) (e : Exp Œì (ty_sum œÉinl œÉinr))
                       (xinl : ùëø) (alt_inl : Stm (ctx_snoc Œì (xinl , œÉinl)) œÑ)
                       (xinr : ùëø) (alt_inr : Stm (ctx_snoc Œì (xinr , œÉinr)) œÑ)
                       (Pinl : L)
                       (Pinr : L)
                       (Q : Lit œÑ -> LocalStore Œì -> L) :
      (forall v, env_snoc Œ¥ (xinl,œÉinl) v ‚ä¢ ‚¶É Pinl ‚¶Ñ alt_inl ‚¶É fun v' Œ¥' => Q v' (env_tail Œ¥') ‚¶Ñ) ->
      (forall v, env_snoc Œ¥ (xinr,œÉinr) v ‚ä¢ ‚¶É Pinr ‚¶Ñ alt_inr ‚¶É fun v' Œ¥' => Q v' (env_tail Œ¥') ‚¶Ñ) ->
      Œ¥ ‚ä¢ ‚¶É (‚àÄ x, !!(eval e Œ¥ = inl x) --> Pinl)
          ‚àß (‚àÄ x, !!(eval e Œ¥ = inr x) --> Pinr)
          ‚¶Ñ stm_match_sum e xinl alt_inl xinr alt_inr ‚¶É Q ‚¶Ñ
  | rule_stm_read_register_backwards {œÉ : Ty} (r : ùëπùë¨ùëÆ œÉ)
                                     (Q : Lit œÉ -> LocalStore Œì -> L) :
      Œ¥ ‚ä¢ ‚¶É ‚àÄ v, r ‚Ü¶ v ‚ú± (r ‚Ü¶ v -‚ú± Q v Œ¥) ‚¶Ñ stm_read_register r ‚¶É Q ‚¶Ñ
  | rule_stm_write_register_backwards {œÉ : Ty} (r : ùëπùë¨ùëÆ œÉ) (w : Exp Œì œÉ)
                                      (Q : Lit œÉ -> LocalStore Œì -> L) :
      Œ¥ ‚ä¢ ‚¶É ‚àÄ v, r ‚Ü¶ v ‚ú± (r ‚Ü¶ eval w Œ¥ -‚ú± Q (eval w Œ¥) Œ¥) ‚¶Ñ stm_write_register r w ‚¶É Q ‚¶Ñ
  | rule_stm_assign_backwards
      (x : ùëø) (œÉ : Ty) (xIn : (x,œÉ) ‚àà Œì) (s : Stm Œì œÉ)
      (P : L) (R : Lit œÉ -> LocalStore Œì -> L) :
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ s ‚¶É fun v Œ¥' => R v (Œ¥' ‚ü™ x ‚Ü¶ v ‚ü´)%env ‚¶Ñ ->
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ stm_assign x s ‚¶É R ‚¶Ñ
  | rule_stm_assign_forwards
      (x : ùëø) (œÉ : Ty) (xIn : (x,œÉ) ‚àà Œì) (s : Stm Œì œÉ)
      (P : L) (R : Lit œÉ -> LocalStore Œì -> L) :
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ s ‚¶É R ‚¶Ñ ->
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ stm_assign x s ‚¶É fun v__new Œ¥' => ‚àÉ v__old, R v__new (Œ¥' ‚ü™ x ‚Ü¶ v__old ‚ü´)%env ‚¶Ñ
  | rule_stm_call_forwards
      {Œî œÉ} (f : ùë≠ Œî œÉ) (es : NamedEnv (Exp Œì) Œî)
      (P : L)
      (Q : Lit œÉ -> L) :
      CTriple Œî (evals es Œ¥) P Q (CEnv f) ->
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ stm_call f es ‚¶É fun v Œ¥' => Q v ‚àß !!(Œ¥ = Œ¥') ‚¶Ñ
  | rule_stm_call_backwards
      {Œî œÉ} (f : ùë≠ Œî œÉ) (es : NamedEnv (Exp Œì) Œî)
      (P : L) (Q : Lit œÉ -> LocalStore Œì -> L) :
      CTriple Œî (evals es Œ¥) P (fun v => Q v Œ¥) (CEnv f) ->
      Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ stm_call f es ‚¶É Q ‚¶Ñ
  | rule_stm_match_pair {œÉ1 œÉ2 œÑ : Ty} (e : Exp Œì (ty_prod œÉ1 œÉ2))
    (xl xr : ùëø) (rhs : Stm (ctx_snoc (ctx_snoc Œì (xl , œÉ1)) (xr , œÉ2)) œÑ)
    (P : L)
    (Q : Lit œÑ -> LocalStore Œì -> L) :
    (forall vl vr, env_snoc (env_snoc Œ¥ (xl, œÉ1) vl) (xr, œÉ2) vr ‚ä¢
              ‚¶É P ‚¶Ñ rhs ‚¶É fun v Œ¥' => Q v (env_tail (env_tail Œ¥')) ‚¶Ñ) ->
    Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ stm_match_pair e xl xr rhs ‚¶É Q ‚¶Ñ
  where "Œ¥ ‚ä¢ ‚¶É P ‚¶Ñ s ‚¶É Q ‚¶Ñ" := (Triple _ Œ¥ P s Q).

End ProgramLogic.
