Require Import FunctionalExtensionality.

Require Import MicroSail.Syntax.
Require Import MicroSail.Environment.
Require Import MicroSail.Sep.Logic.
Require Import MicroSail.Sep.Spec.
(* Require Import MicroSail.Sep.Hoare. *)

(* Simple model (aka Logic Instance) using disjoint register-heaps *)

(* VST heavily relies of predicate extensionality to establish equality of
   heap propositions. To the contrary, Mirror Shard does not assume pred ext, but
   proves implications (even not <->) instead of qualities.

   The logic typelcasses we adopted from VST are tailored towards pred ext; thus, perhaps,
   we will need to look into other interfaces or adopt pred ext. *)


Module Disjoint
       (Import typekit : TypeKit)
       (Import termkit : TermKit typekit)
       (Import progkit : ProgramKit typekit termkit)
       (Import assertkit : AssertionKit typekit termkit progkit)
       (Import contractkit : SymbolicContractKit typekit termkit progkit assertkit)
       (Import heapkit : HeapKit typekit termkit progkit assertkit contractkit).

  Open Scope logic.

  Definition Heap : Type := forall œÉ, ùëπùë¨ùëÆ œÉ -> option (Lit œÉ).

  Definition emp : Heap := fun _ _ => None.

  Definition HProp : Type := Heap -> Prop.

  Instance HProp_ILogic : ILogic HProp :=
  { land := (fun P Q => (fun Œ≥ => P Œ≥ /\ Q Œ≥));
    lor  := (fun P Q => (fun Œ≥ => P Œ≥ \/ Q Œ≥));
    (* existential quantification *)
    lex := (fun {T : Type} (P : T -> HProp) => (fun Œ≥ => exists x, P x Œ≥));
    (* universal quantification *)
    lall := (fun {T : Type} (P : T -> HProp) => (fun Œ≥ => forall x, P x Œ≥));
    limpl := (fun P Q => (fun Œ≥ => P Œ≥ -> Q Œ≥));

    (* Prop embedding *)
    lprop := (fun (p : Prop) => (fun _ => p));
    (* P ‚ä¢ Q *)
    lentails := (fun P Q => forall Œ≥, P Œ≥ -> Q Œ≥);

    ltrue := fun _ => True;
    lfalse := fun _ => False
  }.

  Program Instance HProp_ILogicLaws : @ILogicLaws HProp HProp_ILogic.
  Solve Obligations with firstorder.

  (* Check if two heaps are disjoint,
     Peter O'Hearn's Marktoberdorf notes call this '#'. *)
  Definition split (Œ≥ Œ≥l Œ≥r : Heap) : Prop :=
    forall (œÉ : Ty) (r : ùëπùë¨ùëÆ œÉ), (Œ≥l œÉ r = None \/ Œ≥r œÉ r = None) /\
                             Œ≥ œÉ r = match Œ≥l œÉ r with
                                     | None => Œ≥r œÉ r
                                     | Some x => Some x
                                     end.

  Definition disjoint (Œ≥l Œ≥r : Heap) : Prop :=
    forall œÉ (r : ùëπùë¨ùëÆ œÉ), Œ≥l œÉ r <> None -> Œ≥r œÉ r <> None -> False.

  Definition join (Œ≥l Œ≥r : Heap) (_ : disjoint Œ≥l Œ≥r) : Heap :=
    fun œÉ r => match Œ≥l œÉ r with
            | None => Œ≥r œÉ r
            | Some v => Some v
            end.

  Program Instance HProp_ISepLogic : ISepLogic HProp :=
  { emp := fun Œ≥ => forall œÉ r, Œ≥ œÉ r = None;
    sepcon P Q := fun Œ≥ => exists Œ≥l Œ≥r, split Œ≥ Œ≥l Œ≥r /\ P Œ≥l /\ Q Œ≥r;
    wand P Q := fun Œ≥l => forall Œ≥ Œ≥r, split Œ≥ Œ≥l Œ≥r -> P Œ≥r -> Q Œ≥
  }.

  (* Solve a heap partitioning goal of form 'split Œ≥ Œ≥l Œ≥r' *)
  Ltac heap_solve_split :=
      repeat match goal with
      | [ |- split _ _ _ ] => unfold split in *
      | [ H : split _ _ _ |- _ ] => unfold split in *
      | [ |- forall x, _] => intro
      | [ H : ?P -> _, H' : ?P |- _ ] => specialize (H H')
      | [ Œ≥ : Heap , œÉ : Ty , r : ùëπùë¨ùëÆ _ |- _ ] => destruct (Œ≥ œÉ r); clear Œ≥
      | [ H : _ /\ _ |- _ ] => destruct H
      | [ H : _ \/ _ |- _ ] => destruct H
      | [ H : Some ?l1 = Some ?l2 |- _ ] => rewrite H
      | [ |- _ /\ _ ] => split
      | [ |- _ \/ _ ] => auto
      end; cbn in *; try congruence; try eauto with seplogic.

  Create HintDb seplogic.

  Lemma split_eq : forall Œ≥1 Œ≥2 Œ≥l Œ≥r, split Œ≥1 Œ≥l Œ≥r -> split Œ≥2 Œ≥l Œ≥r -> Œ≥1 = Œ≥2.
  Proof.
    intros Œ≥1 Œ≥2 Œ≥l Œ≥r H1 H2.
    extensionality œÉ.
    extensionality r.
    heap_solve_split.
  Qed.

  Lemma split_comm : forall Œ≥ Œ≥1 Œ≥2, split Œ≥ Œ≥1 Œ≥2 -> split Œ≥ Œ≥2 Œ≥1.
  Proof. heap_solve_split. Qed.
  Hint Resolve split_comm : seplogic.

  Lemma split_emp : forall Œ≥ Œ≥1, split Œ≥ emp Œ≥1 <-> Œ≥ = Œ≥1.
  Proof.
    intros Œ≥ Œ≥1.
    split.
    - intros H.
      extensionality œÉ. extensionality r.
      heap_solve_split.
    - heap_solve_split.
  Qed.
  Hint Resolve split_emp : seplogic.

  Lemma split_assoc_l : forall Œ≥ Œ≥l Œ≥r Œ≥ll Œ≥lr,
    split Œ≥ Œ≥l Œ≥r -> split Œ≥l Œ≥ll Œ≥lr ->
    exists f, split Œ≥ Œ≥ll f /\ split f Œ≥lr Œ≥r.
  Proof.
    intros Œ≥ Œ≥l Œ≥r Œ≥ll Œ≥lr H_split_1 H_split_2.
    exists (fun œÉ r => match Œ≥r œÉ r with
               | None => Œ≥lr œÉ r
               | Some x => Some x
               end).
    split; heap_solve_split.
  Qed.
  Hint Resolve split_assoc_l : seplogic.

  Lemma split_assoc_r : forall Œ≥ Œ≥l Œ≥r Œ≥rl Œ≥rr,
    split Œ≥ Œ≥l Œ≥r -> split Œ≥r Œ≥rl Œ≥rr ->
    exists f, split Œ≥ f Œ≥rr /\ split f Œ≥l Œ≥rl.
  Proof.
    intros Œ≥ Œ≥l Œ≥r Œ≥rl Œ≥rr H_split_1 H_split_2.
    exists (fun œÉ r => match Œ≥l œÉ r with
               | None => Œ≥rl œÉ r
               | Some x => Some x
               end).
    split; heap_solve_split.
  Qed.
  Hint Resolve split_assoc_r : seplogic.

  Lemma sepcon_comm : forall (P Q : HProp), P ‚ú± Q ‚ä¢ Q ‚ú± P.
  Proof.
    intros P Q Œ≥ H.
    destruct H as [Œ≥l [Œ≥r H]].
    exists Œ≥r. exists Œ≥l.
    destruct H as [H1 [H2 H3]].
    split.
    + apply (@split_comm _ _ _ H1).
    + firstorder.
  Qed.
  Hint Resolve sepcon_comm : seplogic.

  Lemma sepcon_assoc_forward : forall (P Q R : HProp), P ‚ú± Q ‚ú± R ‚ä¢ P ‚ú± (Q ‚ú± R).
  Proof.
    cbn.
    intros P Q R Œ≥ H.
    destruct H as [Œ≥l [Œ≥r [H_split_1 [H HR]]]].
    destruct H as [Œ≥l' [Œ≥r' [H_split_2 [HP HQ]]]].
    specialize (split_assoc_l Œ≥ Œ≥l Œ≥r Œ≥l' Œ≥r' H_split_1 H_split_2) as H_split_3.
    inversion H_split_3 as [Œ≥comp H_split_comp].
    exists Œ≥l'. exists Œ≥comp.
    split.
    * apply H_split_comp.
    * split.
    + apply HP.
    + exists Œ≥r'. exists Œ≥r.
      intuition.
  Qed.
  Hint Resolve sepcon_assoc_forward : seplogic.

  Lemma sepcon_assoc_backward : forall (P Q R : HProp), P ‚ú± (Q ‚ú± R) ‚ä¢ P ‚ú± Q ‚ú± R.
  Proof.
    intros P Q R Œ≥ H.
    cbn in *.
    destruct H as [Œ≥l [Œ≥r [H_split_1 [HP H]]]].
    destruct H as [Œ≥rl [Œ≥rr [H_split_2 [HQ HR]]]].
    specialize (split_comm _ _ _ H_split_1) as H_split_1'.
    specialize (split_comm _ _ _ H_split_2) as H_split_2'.
    specialize (split_assoc_l Œ≥ Œ≥r Œ≥l Œ≥rr Œ≥rl H_split_1' H_split_2') as H_split_3.
    destruct H_split_3 as [Œ≥comp H_split_comp].
    exists Œ≥comp, Œ≥rr.
    split.
    - intuition.
    - split.
      + exists Œ≥l, Œ≥rl.
        intuition.
      + intuition.
  Qed.
  Hint Resolve sepcon_assoc_backward : seplogic.

  Lemma wand_sepcon_adjoint : forall (P Q R : HProp),
      (P ‚ú± Q ‚ä¢ R) <-> (P ‚ä¢ Q -‚ú± R).
  Proof.
    intros P Q R.
    split.
    - intros H.
      cbn in *.
      intros Œ≥l HP Œ≥ Œ≥r H_split HQ.
      specialize (H Œ≥).
      apply H.
      exists Œ≥l. exists Œ≥r.
      intuition.
    - intros H.
      cbn in *.
      intros Œ≥l H1.
      destruct H1 as [Œ≥ll [Œ≥lr [H_split [HP HQ]]]].
      exact (H Œ≥ll HP Œ≥l Œ≥lr H_split HQ).
  Qed.
  Hint Resolve wand_sepcon_adjoint : seplogic.

  Lemma sepcon_andp_prop_forward : forall (P R : HProp) (Q : Prop),
      (P ‚ú± (!!Q ‚àß R)) ‚ä¢ (!!Q ‚àß (P ‚ú± R)).
  Proof.
    intros P R Q Œ≥ H.
    destruct H as [Œ≥l [Œ≥r [H_split [HP [HQ HR]]]]].
    split.
    - intuition.
    - cbn.
      exists Œ≥l. exists Œ≥r.
      intuition.
  Qed.
  Hint Resolve sepcon_andp_prop_forward : seplogic.

  Lemma sepcon_andp_prop_backward : forall (P R : HProp) (Q : Prop),
      (!!Q ‚àß (P ‚ú± R)) ‚ä¢ (P ‚ú± (!!Q ‚àß R)).
  Proof.
    intros P R Q Œ≥ H.
    cbn in *.
    destruct H as [HQ [Œ≥l [Œ≥r [H_split [HP HR]]]]].
    exists Œ≥l, Œ≥r.
    split; intuition.
  Qed.
  Hint Resolve sepcon_andp_prop_backward : seplogic.

  Lemma sepcon_entails: forall (P P' Q Q' : HProp),
      P ‚ä¢ P' -> Q ‚ä¢ Q' -> P ‚ú± Q ‚ä¢ P' ‚ú± Q'.
  Proof.
    intros P P' Q Q' H1 H2 Œ≥ H3.
    cbn in *.
    destruct H3 as [Œ≥l [Œ≥r [H_split [HP HQ]]]].
    exists Œ≥l, Œ≥r.
    intuition.
  Qed.
  Hint Resolve sepcon_entails : seplogic.

  Program Instance HProp_ISepLogicLaws : ISepLogicLaws HProp (HProp_ISepLogic).
  Solve Obligations with eauto with seplogic.

  Instance HProp_Heaplet : IHeaplet HProp :=
  { (* We don't have any predicates in this model yet;
       thus we map the predicate to False *)
    pred (p : ùë∑) (ts : Env Lit (ùë∑_Ty p)) := fun Œ≥ => False;
    ptsreg (œÉ : Ty) (r : ùëπùë¨ùëÆ œÉ) (t : Lit œÉ) := fun Œ≥ => Œ≥ œÉ r = Some t
  }.

End Disjoint.
