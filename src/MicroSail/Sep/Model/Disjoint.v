Require Import FunctionalExtensionality.

Require Import MicroSail.Syntax.
Require Import MicroSail.Environment.
Require Import MicroSail.Sep.Logic.
Require Import MicroSail.Sep.Spec.
Require Import MicroSail.Sep.Hoare.

(* Simple model (aka Logic Instance) using disjoint register-heaps *)

(* VST heavily relies of predicate extensionality to establish equality of
   heap propositions. To the contrary, Mirror Shard does not assume pred ext, but
   proves implications (even not <->) instead of qualities.

   The logic typelcasses we adopted from VST are tailored towards pred ext; thus, perhaps,
   we will need to look into other interfaces or adopt pred ext. *)


Module Disjoint
       (Import typekit : TypeKit)
       (Import termkit : TermKit typekit)
       (Import progkit : ProgramKit typekit termkit)
       (Import assertkit : AssertionKit typekit termkit progkit)
       (Import heapkit : HeapKit typekit termkit progkit assertkit).

  Open Scope logic.

  Definition Heap : Type := forall œÉ, ùëπùë¨ùëÆ œÉ -> option (Lit œÉ).

  Definition emp : Heap := fun _ _ => None.

  Definition HProp (Œì : Ctx (ùëø * Ty)) := LocalStore Œì -> Heap -> Prop.

  Program Instance HProp_NatDed (Œì : Ctx (ùëø * Ty)) : NatDed (HProp Œì) :=
  { andp := (fun P Q => (fun Œ¥ Œ≥ => P Œ¥ Œ≥ /\ Q Œ¥ Œ≥));
    orp  := (fun P Q => (fun Œ¥ Œ≥ => P Œ¥ Œ≥ \/ Q Œ¥ Œ≥));
    (* existential quantification *)
    exp := (fun {T : Type} (P : T -> HProp Œì) => (fun Œ¥ Œ≥ => exists x, P x Œ¥ Œ≥));
    (* universal quantification *)
    allp := (fun {T : Type} (P : T -> HProp Œì) => (fun Œ¥ Œ≥ => forall x, P x Œ¥ Œ≥));
    imp := (fun P Q => (fun Œ¥ Œ≥ => P Œ¥ Œ≥ -> Q Œ¥ Œ≥));

    (* Prop embedding *)
    prop := (fun (p : Prop) => (fun Œ¥ Œ≥ => p));
    (* P ‚ä¢ Q *)
    derives := (fun P Q => forall Œ¥ Œ≥, P Œ¥ Œ≥ -> Q Œ¥ Œ≥)
  }.

  Program Instance HProp_NatDedAxioms (Œì : Ctx (ùëø * Ty)) : @NatDedAxioms _ (HProp_NatDed Œì).
  Solve Obligations with firstorder.

  (* Check if two heaps are disjoint,
     Peter O'Hearn's Marktoberdorf notes call this '#'. *)
  Definition split (Œ≥ Œ≥l Œ≥r : Heap) : Prop :=
    forall (œÉ : Ty) (r : ùëπùë¨ùëÆ œÉ), (Œ≥l œÉ r = None \/ Œ≥r œÉ r = None) /\
                             Œ≥ œÉ r = match Œ≥l œÉ r with
                                     | None => Œ≥r œÉ r
                                     | Some x => Some x
                                     end.

  Program Instance HProp_SepLog (Œì : Ctx (ùëø * Ty)) : SepLog (HProp Œì) :=
  { emp := fun Œ¥ Œ≥ => forall œÉ r, Œ≥ œÉ r = None;
    sepcon P Q := fun Œ¥ Œ≥ => exists Œ≥l Œ≥r, split Œ≥ Œ≥l Œ≥r /\ P Œ¥ Œ≥l /\ Q Œ¥ Œ≥r;
    wand P Q := fun Œ¥ Œ≥l => forall Œ≥ Œ≥r, split Œ≥ Œ≥l Œ≥r -> P Œ¥ Œ≥r -> Q Œ¥ Œ≥
  }.

  (* Solve a heap partitioning goal of form 'split Œ≥ Œ≥l Œ≥r' *)
  Local Ltac heap_solve_split :=
      repeat match goal with
      | [ |- split _ _ _ ] => unfold split in *
      | [ H : split _ _ _ |- _ ] => unfold split in *
      | [ |- forall x, _] => intro
      | [ H : ?P -> _, H' : ?P |- _ ] => specialize (H H')
      | [ Œ≥ : Heap , œÉ : Ty , r : ùëπùë¨ùëÆ _ |- _ ] => destruct (Œ≥ œÉ r); clear Œ≥
      | [ H : _ /\ _ |- _ ] => destruct H
      | [ H : _ \/ _ |- _ ] => destruct H
      | [ H : Some ?l1 = Some ?l2 |- _ ] => rewrite H
      | [ |- _ /\ _ ] => split
      | [ |- _ \/ _ ] => auto
      end; cbn in *; try congruence.

  Lemma split_comm {Œì : Ctx (ùëø * Ty)} : forall Œ≥ Œ≥1 Œ≥2, split Œ≥ Œ≥1 Œ≥2 -> split Œ≥ Œ≥2 Œ≥1.
  Proof. heap_solve_split. Qed.

  Lemma split_emp {Œì : Ctx (ùëø * Ty)} : forall Œ≥ Œ≥1, split Œ≥ emp Œ≥1 <-> Œ≥ = Œ≥1.
  Proof.
    intros Œ≥ Œ≥1.
    split.
    - intros H.
      extensionality œÉ. extensionality r.
      heap_solve_split.
    - heap_solve_split.
  Qed.

  Lemma split_assoc : forall Œ≥ Œ≥l Œ≥r Œ≥ll Œ≥lr,
    split Œ≥ Œ≥l Œ≥r -> split Œ≥l Œ≥ll Œ≥lr ->
    exists f, split Œ≥ Œ≥ll f /\ split f Œ≥lr Œ≥r.
  Proof.
    intros Œ≥ Œ≥l Œ≥r Œ≥ll Œ≥lr H_split_1 H_split_2.
    exists (fun œÉ r => match Œ≥r œÉ r with
               | None => Œ≥lr œÉ r
               | Some x => Some x
               end).
    split; heap_solve_split.
  Qed.

  Lemma sepcon_comm_forward (Œì : Ctx (ùëø * Ty)) : forall (P Q : HProp Œì),
      forall Œ¥ Œ≥, (P ‚ú± Q --> Q ‚ú± P) Œ¥ Œ≥.
  Proof.
    intros P Q Œ¥ Œ≥.
    cbn.
    intros.
    destruct H as [Œ≥l [Œ≥r H]].
    exists Œ≥r. exists Œ≥l.
    destruct H as [H1 [H2 H3]].
    split.
    - apply (@split_comm Œì _ _ _ H1).
    - firstorder.
  Qed.

  Lemma sepcon_assoc_forward {Œì : Ctx (ùëø * Ty)} : forall (P Q R : HProp Œì),
    forall Œ¥ Œ≥, ((P ‚ú± Q ‚ú± R) --> (P ‚ú± (Q ‚ú± R))) Œ¥ Œ≥.
  Proof.
    intros P Q R Œ¥ Œ≥.
    cbn.
    intros H.
    destruct H as [Œ≥l [Œ≥r [H_split_1 [H HR]]]].
    destruct H as [Œ≥l' [Œ≥r' [H_split_2 [HP HQ]]]].
    specialize (split_assoc Œ≥ Œ≥l Œ≥r Œ≥l' Œ≥r' H_split_1 H_split_2) as H_split_3.
    inversion H_split_3 as [Œ≥comp H_split_comp].
    exists Œ≥l'. exists Œ≥comp.
    split.
    - apply H_split_comp.
    - split.
      + apply HP.
      + exists Œ≥r'. exists Œ≥r.
        intuition.
  Qed.

  Lemma wand_sepcon_adjoint {Œì : Ctx (ùëø * Ty)} : forall (P Q R : HProp Œì),
      (P ‚ú± Q ‚ä¢ R) <-> (P ‚ä¢ Q -‚ú± R).
  Proof.
    intros P Q R.
    split.
    - intros H.
      cbn in *.
      intros Œ¥ Œ≥l HP Œ≥ Œ≥r H_split HQ.
      specialize (H Œ¥ Œ≥).
      apply H.
      exists Œ≥l. exists Œ≥r.
      intuition.
    - intros H.
      cbn in *.
      intros Œ¥ Œ≥l H1.
      (* specialize (H Œ¥ Œ≥l). *)
      destruct H1 as [Œ≥ll [Œ≥lr [H_split [HP HQ]]]].
      exact (H Œ¥ Œ≥ll HP Œ≥l Œ≥lr H_split HQ).
  Qed.

Lemma sepcon_andp_prop {Œì : Ctx (ùëø * Ty)} : forall (P R : HProp Œì) (Q : Prop),
      (P ‚ú± (!!Q ‚àß R)) <-> (!!Q ‚àß (P ‚ú± R)).


  sepcon_entails: forall P P' Q Q' : A, P ‚ä¢ P' -> Q ‚ä¢ Q' -> P ‚ú± Q ‚ä¢ P' ‚ú± Q';
